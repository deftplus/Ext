#Область ОписаниеПеременных

Перем Каталог, КаталогАрхива, ПолноеИмяФайлаЛога;
//Перем ДатаПоследнегоИзменения; // Дата, когда в эту обработку в последний раз вносились изменения.
Перем ДокРеализацияТоваровУслуг,
		ДокВозвратТоваровОтПокупателя,
		ДокСчетФактураВыданный,
		ДокСчетНаОплатуПокупателю,
		ДокПоступлениеТоваровУслуг,
		ДокСчетФактураПолученный,
		ДокТребованиеНакладная,
		ДокПеремещениеТоваров,
		ДокОтчетПроизводстваЗаСмену,
		ДокГТДИмпорт;
Перем СпрЭлемент;
Перем ВалютаДоллар, ВалютаЕвро, ВалютаРубль;
Перем ЕдиницаИзмеренияШт, ВидНоменклатурыТовар;
Перем Организация, Руководитель, ГлавныйБухгалтер, ГлобальныйКомментарий, Ответственный, ДатаЗапретаРедактированияДляПользователя;
Перем ПеремещатьФайлыПослеУспешнойОбработки;
Перем НайденоПоНаименованию, НайденоПоДате, НайденоПоНомеру, НеНайденоКонтрагентов, НайденоКонтрагентов;
Перем ЭтоТорговаяПлощадка, НоменклатурнаяГруппаТорговойПлощадки;
Перем СтруктураОшибок;
Перем ТЗ_ГТД, ТЗ_Поступление, СтруктураГТДИмпорт;
Перем НомерОтправленияСсылка;

Перем глЭтоПрогрессивныйФормат;
Перем глМассивЗагружаемыхДокументов;
Перем глПериодОбработки;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("3.0.103.21");
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	ПараметрыРегистрации.Версия = Формат(ДатаПоследнегоИзменения, "ДФ=гггг");
	ПараметрыРегистрации.Разрешения.Добавить(РаботаВБезопасномРежиме.РазрешениеНаИспользованиеПривилегированногоРежима("необходимо для выполнения регламентного задания"));
	
	ПараметрыРегистрации.Вставить("Информация", СтрШаблон(НСтр("ru = '""Загрузка текстовый обмен РС в 1С""© %1.
																		|Версии:
																		|	2022.06.16 - начальная;
																		|	2022.06.23 - изменеён алгоритм создания валютных договоров в РТУ;
																		|	2022.06.29 - добавлена возможность ограничения по периоду загружаемых одокументов, дата загрузки в комментарии, пр. множественные изменения;
																		|	2022.06.30 - опция перемещения файлов без обработки в архив;
																		|	2022.07.04 - изменено определение торговых площадок по счетам поставщиков;
																		|	2022.07.06 - добавлена пометка удаления счетов-фактур при удалении Возвратов от покупателя;
																		|	2022.07.07 - добавлен интеллектуальный поиск Возврата от покупателя;
																		|	2022.07.13 - добавлено заполнение (значением по умолчанию из нетиповых констант):
																		|					- склада в РТУ;
																		|					- контрагента в РТУ;
																		|	2022.07.14 - исправлен алгоритм расчета суммы номенклатуры и НДС в строках возврата товаров от покупателя;
																		|					- добавлен алгоритм фиксации возникающих ошибок в регистре ллл_ОшибкиОбменаСРС.'"),
	Формат(ДатаПоследнегоИзменения, "ДФ=гггг")));
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();

	ДобавитьКоманду(ТаблицаКоманд, НСтр("ru = 'Настройка ""Загрузка данных из РС (*.txt)""'"), "НастроитьОбработку", "ОткрытиеФормы", Истина,);
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);

	ДобавитьКоманду(ТаблицаКоманд, НСтр("ru = 'Загрузить данные из РС интерактивно'"), "ВыполнитьИнтерактивно", "ОткрытиеФормы", Истина,);
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);

	ДобавитьКоманду(ТаблицаКоманд, НСтр("ru = 'Загрузить данные из РС в фоне'"), "ВыполнитьВФоне", "ВызовСерверногоМетода", Истина,);
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);

	Возврат ПараметрыРегистрации;

КонецФункции

// Функция формирует наименование обработки с указанием версии.
// 
// Возвращаемое значение:
//  Строка - наименование обработки для вывода пользователю.
//
Функция НаименованиеОбработки() Экспорт
	
	Возврат Метаданные().Синоним + " (" + НСтр("ru = 'версия от'; en = 'last updated'") + 
			" " + Формат(ДатаПоследнегоИзменения, "ДЛФ=D") + ")";
	
КонецФункции

#КонецОбласти

Функция ПолучитьТаблицуКоманд()
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	Возврат Команды;
КонецФункции  

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды) Экспорт

	Если ИдентификаторКоманды = "ВыполнитьВФоне" Тогда
		ДополнительнаяОбработкаСсылка = ПараметрыКоманды.ДополнительнаяОбработкаСсылка;
		ЗначениеХранилищаНастроек = Неопределено;
		Если ЗначениеЗаполнено(ДополнительнаяОбработкаСсылка) Тогда
			ХранилищеНастроек = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительнаяОбработкаСсылка, "ХранилищеНастроек");
			ЗначениеХранилищаНастроек = ХранилищеНастроек.Получить();
		КонецЕсли;
		
		ОбработатьФайлы(ЗначениеХранилищаНастроек);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьФайлы( ПараметрыВыполнения = Неопределено ) Экспорт
	
	МассивЗагружаемых = Новый Массив;
	ПеремещатьБезОбработки = Ложь;
	Если ТипЗНЧ(ПараметрыВыполнения) = Тип("Структура") Тогда
		Если ПараметрыВыполнения.Свойство("МассивЗагружаемых", МассивЗагружаемых)
			И ТипЗНЧ(МассивЗагружаемых) = Тип("Массив") Тогда
			глМассивЗагружаемыхДокументов = МассивЗагружаемых;
		КонецЕсли;
		ПериодОбработки = Неопределено;
		Если ПараметрыВыполнения.Свойство("Период", ПериодОбработки)
			И ТипЗнч(ПериодОбработки) = Тип("СтандартныйПериод")
			И (ЗначениеЗаполнено(ПериодОбработки.ДатаНачала)
				ИЛИ ЗначениеЗаполнено(ПериодОбработки.ДатаОкончания)) Тогда
			глПериодОбработки = ПериодОбработки;
		КонецЕсли;
		Если ПараметрыВыполнения.Свойство("Каталог",)
			И ЗначениеЗаполнено(ПараметрыВыполнения.Каталог) Тогда
			Каталог = ПараметрыВыполнения.Каталог;
			КаталогАрхива = Каталог + "\Архив";
			ПолноеИмяФайлаЛога = Каталог + "\Log.txt";
		КонецЕсли;
	КонецЕсли;
	
	МассивНеОбрабатываемых = Новый Массив;
	МассивНеОбрабатываемых.Добавить("ПеремещениеТоваров");
	МассивНеОбрабатываемых.Добавить("СправочникВидыНоменклатуры");
	МассивНеОбрабатываемых.Добавить("СправочникСклады");
	МассивНеОбрабатываемых.Добавить("СправочникДоговорыКонтрагентов");
	
	Для Каждого ТекВид Из МассивНеОбрабатываемых Цикл
		Если глМассивЗагружаемыхДокументов.Найти(ТекВид) = Неопределено Тогда
			глМассивЗагружаемыхДокументов.Добавить(ТекВид);
		КонецЕсли;
	КонецЦикла;
	
	НоменклатураИсправитьНаСервере();
	
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	
	ТЗ_Основная = Новый ТаблицаЗначений();
	ТЗ_Основная.Колонки.Добавить("Наименование");
	ТЗ_Основная.Колонки.Добавить("Каталог");
	Стр = ТЗ_Основная.Добавить();    Стр.Каталог = Каталог;
	Стр = ТЗ_Основная.Добавить();    Стр.Каталог = КаталогАрхива;
	
	ТЗ_Ошибки = Новый ТаблицаЗначений();
	ТЗ_Ошибки.Колонки.Добавить("Наименование");
	ТЗ_Ошибки.Колонки.Добавить("Каталог");
	Стр = ТЗ_Ошибки.Добавить();    Стр.Наименование = "ОшибкаПоДатеЗапрета";					Стр.Каталог = Каталог + "\Ошибки\" + "ОшибкаПоДатеЗапрета";
	Стр = ТЗ_Ошибки.Добавить();    Стр.Наименование = "ОшибкаВСтруктуре";						Стр.Каталог = Каталог + "\Ошибки\" + "ОшибкаВСтруктуре";
	Стр = ТЗ_Ошибки.Добавить();    Стр.Наименование = "ОшибкаПоСтатусуДокумента";				Стр.Каталог = Каталог + "\Ошибки\" + "ОшибкаПоСтатусуДокумента";
	Стр = ТЗ_Ошибки.Добавить();    Стр.Наименование = "ОшибкаТорговаяПлощадкаРегистрСведений";	Стр.Каталог = Каталог + "\Ошибки\" + "ОшибкаТорговаяПлощадкаРегистрСведений";
	Стр = ТЗ_Ошибки.Добавить();    Стр.Наименование = "ОшибкаТорговаяПлощадкаСчетНаОплату";		Стр.Каталог = Каталог + "\Ошибки\" + "ОшибкаТорговаяПлощадкаСчетНаОплату";
	Стр = ТЗ_Ошибки.Добавить();    Стр.Наименование = "ОшибкаПеремещениеТоваров";				Стр.Каталог = Каталог + "\Ошибки\" + "ОшибкаПеремещениеТоваров";
	Стр = ТЗ_Ошибки.Добавить();    Стр.Наименование = "ОшибкаКонтрагент";						Стр.Каталог = Каталог + "\Ошибки\" + "ОшибкаКонтрагент";
	Стр = ТЗ_Ошибки.Добавить();    Стр.Наименование = "ОшибкаНеМосковскаяПоставка";				Стр.Каталог = Каталог + "\Ошибки\" + "ОшибкаНеМосковскаяПоставка";
	
	МассивКаталогов = ТЗ_Основная.ВыгрузитьКолонку("Каталог");
	Для Каждого Элемент Из глМассивЗагружаемыхДокументов Цикл
		МассивКаталогов.Добавить(СтрШаблон("%1\%2", КаталогАрхива, Элемент));
	КонецЦикла;
	Для Каждого Элемент Из ТЗ_Ошибки.ВыгрузитьКолонку("Каталог") Цикл
		МассивКаталогов.Добавить(Элемент);
	КонецЦикла;
	
	ПроверитьНаличиеСтруктурыКаталогов( МассивКаталогов );
	
	ТекстовыйФайл.ДобавитьСтроку("Начало выполнения: " + ТекущаяДата());
	
	ВыводитьНаименованиеОбработанныхФайлов = Ложь;
	РезультатОбработки = Новый Структура("ОбработаноФайлов, ЗагруженоСправочников, ЗагруженоДокументов");
	
	Для каждого Наименование Из глМассивЗагружаемыхДокументов Цикл
		МассивФайлов = НайтиФайлы(Каталог, СтрЗаменить(Наименование, "Справочник", "") + "*.txt",);
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			Событие = "объект загружен, файл в архиве";
			Попытка
				СтруктураОшибок = Новый Структура();
				ПеремещатьФайлыПослеУспешнойОбработки = Истина;
				Если ВыводитьНаименованиеОбработанныхФайлов Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Файл: " + ИмяФайла.ПолноеИмя;
					Сообщение.Сообщить();
				КонецЕсли;
				
				Если МассивНеОбрабатываемых.Найти(Наименование) <> Неопределено Тогда
					Событие = "перемещён без обработки";
					ПереместитьФайл(ИмяФайла.ПолноеИмя, СтрШаблон("%1\%2\%3", КаталогАрхива, Наименование, ИмяФайла.Имя));
				Иначе
					Если Сред(Наименование, 1, 10) = "Справочник" Тогда	// справочники
						ЗагрузитьСправочникиНаСервере(ТекстовыйФайл, ИмяФайла.ПолноеИмя, СтрЗаменить(Наименование, "Справочник", ""));
					ИначеЕсли Сред(Наименование, 1, 3) = "РС_" Тогда	// РегистрСведений
						ЗагрузитьРегистрыСведенийНаСервере(ТекстовыйФайл, ИмяФайла.ПолноеИмя, СтрЗаменить(Наименование, "РС_", ""));
					Иначе	// документы
						Результат = ЗагрузитьДокументыНаСервере(ТекстовыйФайл, ИмяФайла.ПолноеИмя, ?(Наименование = "ГТДИмпорт", "Windows1251", "UTF8"));
					КонецЕсли;
					Если СтруктураОшибок.Свойство("ТипОшибки") Тогда
						Если СтруктураОшибок.ТипОшибки = "ОграничениеПоПериоду" Тогда
							Событие = "объект не входит в обрабатываемый период, файл оставлен без изменений";
						Иначе
							Событие = "отказ обработки объекта, файл перемещён в ошибки";
							НовоеИмяФайла = Каталог + "\Ошибки\" + СтруктураОшибок.ТипОшибки + "\" + ИмяФайла.Имя;
							//Сообщить("НовоеИмяФайла: " + НовоеИмяФайла);
							Если СтруктураОшибок.ТипОшибки = "ОшибкаПоДатеЗапрета" Тогда
								ЗаписьЖурналаРегистрации("ЗагрузкаРС", УровеньЖурналаРегистрации.Предупреждение, , , "Ошибка по дате запрета редактирования: " + ИмяФайла);
							ИначеЕсли СтруктураОшибок.ТипОшибки = "ОшибкаВСтруктуре" Тогда
								ЗаписьЖурналаРегистрации("ЗагрузкаРС", УровеньЖурналаРегистрации.Предупреждение, , , "Ошибка в структуре файла: " + ИмяФайла);
							ИначеЕсли СтруктураОшибок.ТипОшибки = "ОшибкаПоСтатусуДокумента" Тогда
								ЗаписьЖурналаРегистрации("ЗагрузкаРС", УровеньЖурналаРегистрации.Предупреждение, , , "Ошибка статус документа не соответствует для загрузке: " + ИмяФайла);
							КонецЕсли;
							ПереместитьФайл(ИмяФайла.ПолноеИмя, НовоеИмяФайла);
						КонецЕсли;
					Иначе
						Если ПеремещатьФайлыПослеУспешнойОбработки Тогда
							ПереместитьФайл(ИмяФайла.ПолноеИмя, СтрШаблон("%1\%2\%3", КаталогАрхива, Наименование, ИмяФайла.Имя));
						Иначе
							Событие = "файл переименован префикс Ошибка, не найдена номенклатура либо контрагент.";
							ПереместитьФайл(ИмяФайла.ПолноеИмя, Каталог + "\Ошибка_" + ИмяФайла.Имя);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

			Исключение
				Событие = "исключительная ситуация, файл переименован префикс ~";
				ТекстОшибки = СтрШаблон("Ошибка обработки файла: %1. Файл переименован, префикс ~.%2%3", ИмяФайла.ПолноеИмя, Символы.ПС, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации("Загрузка из РС", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
				Сообщить(ТекстОшибки);
				ПереместитьФайл(ИмяФайла.ПолноеИмя, Каталог + "\~" + ИмяФайла.Имя);
				ЗарегистрироватьОшибку( Новый Структура("ТекОб, ИмяФайла, ТекущаяДата, ОписаниеОшибки, ID_Документа, Номер", Неопределено, ИмяФайла.Имя, ТекущаяДата(), ТекстОшибки, "", "") );
			КонецПопытки;
			ТекстСообщения = СтрШаблон("Обработан файл (%2): %1", ИмяФайла.Имя, Событие);
			ТекстовыйФайл.ДобавитьСтроку(ТекстСообщения);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЦикла;
	
	ТекстовыйФайл.ДобавитьСтроку("Окончание выполнения: " + ТекущаяДата());
	ТекстовыйФайл.Записать(ПолноеИмяФайлаЛога, КодировкаТекста.UTF8, Символы.ВК);

КонецПроцедуры

#Область ОБРАБОТКА_ФАЙЛА

&НаСервере
Функция ЗагрузитьДокументыНаСервере(ТД, ИмяФайла, Кодировка)

	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(ИмяФайла, Кодировка);
	//ТекстДок.Прочитать(ИмяФайла, "UTF8");
	
	КоличествоСтрокВФайле = ТекстДок.КоличествоСтрок();
	Если КоличествоСтрокВФайле = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Пустой файл!";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	ДокументЗагружен = Ложь;
	
	ЭтоТорговаяПлощадка = Ложь;
	
	ДокРеализацияТоваровУслуг = Неопределено;
	ДокПоступлениеТоваровУслуг = Неопределено;
	ДокВозвратТоваровОтПокупателя = Неопределено;
	ДокСчетФактураВыданный = Неопределено;
	ДокСчетФактураПолученный = Неопределено;
	ДокСчетНаОплатуПокупателю = Неопределено;
	ДокТребованиеНакладная = Неопределено;
	ДокПеремещениеТоваров = Неопределено;
	ДокОтчетПроизводстваЗаСмену = Неопределено;
	ДокГТДИмпорт = Неопределено;
	НомерОтправленияСсылка = Неопределено;
	
	НомерТекущейСтроки = 1;
	СоздаватьСФ = Истина;
	Пока НомерТекущейСтроки <= КоличествоСтрокВФайле Цикл
		ТекущаяСтрока = ТекстДок.ПолучитьСтроку(НомерТекущейСтроки);
		Если ТекущаяСтрока = "#" Тогда	// конец текущего документа
			Если ПеремещатьФайлыПослеУспешнойОбработки Тогда
				
				Если НЕ ДокГТДИмпорт = Неопределено Тогда
					ДокГТДИмпорт.Записать(РежимЗаписиДокумента.Запись);
					ТЗ_ГТД.Очистить();
					ТЗ_Поступление.Очистить();
					ЗарегистрироватьИзменение(ДокГТДИмпорт.Ссылка, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), , "Документ.ГТДИмпорт");
				КонецЕсли;
				
				Если НЕ ДокСчетФактураВыданный = Неопределено Тогда
					//ДокСчетФактураВыданный.Записать(РежимЗаписиДокумента);
					Попытка
						ДокСчетФактураВыданный.ПометкаУдаления = Ложь;
						ДокСчетФактураВыданный.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						ДокСчетФактураВыданный.ОбменДанными.Загрузка = Истина;
						ДокСчетФактураВыданный.Записать(РежимЗаписиДокумента.Запись);
						ДокСчетФактураВыданный.ОбменДанными.Загрузка = Ложь;
						ДокСчетФактураВыданный.Записать(РежимЗаписиДокумента.Проведение);
					КонецПопытки;
					ДокументЗагружен = Истина;
				КонецЕсли;
				Если НЕ ДокРеализацияТоваровУслуг = Неопределено Тогда
					ЗаписатьДокумент(ДокРеализацияТоваровУслуг, Истина);
					
					Если НЕ НомерОтправленияСсылка = Неопределено Тогда
						НЗ = РегистрыСведений.ллл_НомераОтправленийПоМаркетплейсам.СоздатьМенеджерЗаписи();
						НЗ.НомерОтправления = НомерОтправленияСсылка;
						НЗ.Документ = ДокРеализацияТоваровУслуг.Ссылка;
						НЗ.Записать( Истина );
					КонецЕсли;
					
					ЗарегистрироватьИзменение(ДокРеализацияТоваровУслуг.Ссылка, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), ДокРеализацияТоваровУслуг.Дата, "Документ.РеализацияТоваровУслуг");
					ДокументЗагружен = Истина;
				КонецЕсли;
				Если НЕ ДокСчетНаОплатуПокупателю = Неопределено Тогда
					ЗаписатьДокумент(ДокСчетНаОплатуПокупателю, Истина);
					ЗарегистрироватьИзменение(ДокСчетНаОплатуПокупателю.Ссылка, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), ДокСчетНаОплатуПокупателю.Дата, "Документ.СчетНаОплатуПокупателю");
					ДокументЗагружен = Истина;
				КонецЕсли;
				Если НЕ ДокВозвратТоваровОтПокупателя = Неопределено Тогда
					ЗаписатьДокумент(ДокВозвратТоваровОтПокупателя, Истина);
					ЗарегистрироватьИзменение(ДокВозвратТоваровОтПокупателя.Ссылка, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), ДокВозвратТоваровОтПокупателя.Дата, "Документ.ВозвратТоваровОтПокупателя");
					ДокументЗагружен = Истина;
					
					Если НЕ НомерОтправленияСсылка = Неопределено Тогда
						НЗ = РегистрыСведений.ллл_НомераОтправленийПоМаркетплейсам.СоздатьМенеджерЗаписи();
						НЗ.НомерОтправления = НомерОтправленияСсылка;
						НЗ.Документ = ДокВозвратТоваровОтПокупателя.Ссылка;
						НЗ.Записать( Истина );
					КонецЕсли;
					
				КонецЕсли;
				Если НЕ ДокСчетФактураПолученный = Неопределено Тогда
					Если НЕ ДокПоступлениеТоваровУслуг = Неопределено Тогда
						ДокСчетФактураПолученный.ДокументыОснования.Очистить();
						ДокСчетФактураПолученный.ДокументОснование = ДокПоступлениеТоваровУслуг.Ссылка;
						Стр = ДокСчетФактураПолученный.ДокументыОснования.Добавить();
						Стр.ДокументОснование = ДокПоступлениеТоваровУслуг.Ссылка;
					КонецЕсли;
					ДокСчетФактураПолученный.Записать(РежимЗаписиДокумента.Запись);
					ДокументЗагружен = Истина;
				КонецЕсли;
				Если НЕ ДокПоступлениеТоваровУслуг = Неопределено Тогда
					Если НЕ ДокГТДИмпорт = Неопределено Тогда
						ДокПоступлениеТоваровУслуг.Записать(РежимЗаписиДокумента.Запись);
					Иначе
						Попытка
							ДокПоступлениеТоваровУслуг.Записать(РежимЗаписиДокумента.Проведение);
						Исключение
							ДокПоступлениеТоваровУслуг.Записать(РежимЗаписиДокумента.Запись);
						КонецПопытки;
						ЗарегистрироватьИзменение(ДокПоступлениеТоваровУслуг.Ссылка, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), ДокПоступлениеТоваровУслуг.Дата, "Документ.ПоступлениеТоваровУслуг");
					КонецЕсли;
					ДокументЗагружен = Истина;
				КонецЕсли;
				Если НЕ ДокТребованиеНакладная = Неопределено Тогда
					ДокТребованиеНакладная.Записать(РежимЗаписиДокумента.Запись);
					ЗарегистрироватьИзменение(ДокТребованиеНакладная.Ссылка, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), ДокТребованиеНакладная.Дата, "Документ.ТребованиеНакладная");
					ДокументЗагружен = Истина;
				КонецЕсли;
				Если НЕ ДокПеремещениеТоваров = Неопределено Тогда
					ДокПеремещениеТоваров.Записать(РежимЗаписиДокумента.Запись);
					ЗарегистрироватьИзменение(ДокПеремещениеТоваров.Ссылка, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), ДокПеремещениеТоваров.Дата, "Документ.ПеремещениеТоваров");
					ДокументЗагружен = Истина;
				КонецЕсли;
				Если НЕ ДокОтчетПроизводстваЗаСмену = Неопределено Тогда
					ДокОтчетПроизводстваЗаСмену.Записать(РежимЗаписиДокумента.Запись);
					ЗарегистрироватьИзменение(ДокОтчетПроизводстваЗаСмену.Ссылка, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), ДокОтчетПроизводстваЗаСмену.Дата, "Документ.ОтчетПроизводстваЗаСмену");
					ДокументЗагружен = Истина;
				КонецЕсли;
			КонецЕсли;
			ЭтоТорговаяПлощадка = Ложь;
			
			ДокРеализацияТоваровУслуг = Неопределено;
			ДокПоступлениеТоваровУслуг = Неопределено;
			ДокВозвратТоваровОтПокупателя = Неопределено;
			ДокСчетФактураВыданный = Неопределено;
			ДокСчетФактураПолученный = Неопределено;
			ДокСчетНаОплатуПокупателю = Неопределено;
			ДокТребованиеНакладная = Неопределено;
			ДокПеремещениеТоваров = Неопределено;
			ДокОтчетПроизводстваЗаСмену = Неопределено;
			ДокГТДИмпорт = Неопределено;

		Иначе
			Массив = РазложитьСтрокуВМассив(ТекущаяСтрока, ";");
			// первоначально проверим, корректный ли файл
			Если НомерТекущейСтроки = 1 Тогда
				Если НЕ (	Массив[0] = "Продажа_ШапкаДокумента" ИЛИ
							Массив[0] = "ПродажаСчетПокупателя_ШапкаДокумента" ИЛИ
							Массив[0] = "Поступление_ШапкаДокумента" ИЛИ
							Массив[0] = "СчетЗакупка_ШапкаДокумента" ИЛИ
							Массив[0] = "Возврат_Продажа_ШапкаДокумента" ИЛИ
							Массив[0] = "ТребованиеНакладная_ШапкаДокумента" ИЛИ
							//Массив[0] = "ПеремещениеТоваров_ШапкаДокумента" ИЛИ
							Массив[0] = "ОтчетПроизводстваЗаСмену_ШапкаДокумента" ИЛИ
							Массив[0] = "ГТДИмпорт_ШапкаДокумента") Тогда
					СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаВСтруктуре");
					ЭлементыПути = СтрРазделить(ИмяФайла, "\", Ложь);
					ТекстОшибки = СтрШаблон("Файлы, с данными типа %1 - не обрабатываются. Перемещен в ошибки структуры.", Массив[0]);
					//ЗарегистрироватьОшибку( Неопределено, ЭлементыПути[ЭлементыПути.ВГраница()], ТекущаяДата(), ТекстОшибки );
					ЗарегистрироватьОшибку( Новый Структура("ТекОб, ИмяФайла, ТекущаяДата, ОписаниеОшибки, ID_Документа, Номер", Неопределено, ЭлементыПути[ЭлементыПути.ВГраница()], ТекущаяДата(), ТекстОшибки, "", "") );
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			Если Массив[0] = "Продажа_ШапкаДокумента" Тогда
				глЭтоПрогрессивныйФормат = (СтрНайти(ИмяФайла, "Р_Т_У_") > 0);
				// Загружаем только ПРОГРЕССИВНЫЕ документы, остальное перемещаем по нужным адресам без загрузки.
				Если НЕ глЭтоПрогрессивныйФормат Тогда
					Прервать;
				КонецЕсли;
				Структура = МассивВСтруктуруДокумент("Продажа_ШапкаДокумента", "РеализацияТоваровУслуг", Массив, ИмяФайла);
				Если СтруктураОшибок.Свойство("ТипОшибки") Тогда
					Возврат Ложь;
				КонецЕсли;
				Если Структура.Свойство("ПризнакТорговойПлощадки") И Структура.ПризнакТорговойПлощадки = Истина Тогда
					СоздаватьСФ = Ложь;
				КонецЕсли;
				ОбработатьШапкуДокумента("РеализацияТоваровУслуг", Структура);

			ИначеЕсли Массив[0] = "Продажа_нестандартныеТеги" Тогда
				Структура = МассивВСтруктуруДокумент("Продажа_НестандартныеТеги", "РеализацияТоваровУслуг", Массив, ИмяФайла);
				ОбработатьШапкуДокумента("РеализацияТоваровУслуг", Структура);
				
			ИначеЕсли Массив[0] = "Продажа_ТЧ_Документа" Тогда
				Структура = МассивВСтруктуруДокумент("Продажа_ТЧ_Документа", "РеализацияТоваровУслуг", Массив, ИмяФайла);
				ОбработатьТЧ_Документа("РеализацияТоваровУслуг", "Товары", Структура);
				
			ИначеЕсли Массив[0] = "ПродажаСчетФактура_ШапкаДокумента" Тогда
				Если СоздаватьСФ Тогда
					Структура = МассивВСтруктуруДокумент("ПродажаСчетФактура_ШапкаДокумента", "СчетФактураВыданный", Массив, ИмяФайла);
					ОбработатьШапкуДокумента("СчетФактураВыданный", Структура);
				КонецЕсли;
			ИначеЕсли Массив[0] = "ПродажаСчетПокупателя_ШапкаДокумента" Тогда
				Структура = МассивВСтруктуруДокумент("ПродажаСчетПокупателя_ШапкаДокумента", "СчетНаОплатуПокупателю", Массив, ИмяФайла);
				Если СтруктураОшибок.Свойство("ТипОшибки") Тогда
					Возврат Ложь;
				КонецЕсли;
				ОбработатьШапкуДокумента("СчетНаОплатуПокупателю", Структура);
				
			ИначеЕсли Массив[0] = "СчетПокупателяПродажа_ТЧ_Документа" Тогда
				Структура = МассивВСтруктуруДокумент("СчетПокупателяПродажа_ТЧ_Документа", "СчетНаОплатуПокупателю", Массив, ИмяФайла);
				ОбработатьТЧ_Документа("СчетНаОплатуПокупателю", "Товары", Структура);

			ИначеЕсли Массив[0] = "Поступление_ШапкаДокумента" Тогда
				глЭтоПрогрессивныйФормат = (СтрНайти(ИмяФайла, "П_Т_У_") > 0);
				// Загружаем только НЕ ПРОГРЕССИВНЫЕ документы, остальное перемещаем по нужным адресам без загрузки.
				Если глЭтоПрогрессивныйФормат Тогда
					Прервать;
				КонецЕсли;
				Структура = МассивВСтруктуруДокумент("Поступление_ШапкаДокумента", "ПоступлениеТоваровУслуг", Массив, ИмяФайла);
				Если СтруктураОшибок.Свойство("ТипОшибки") Тогда
					Возврат Ложь;
				КонецЕсли;
				ОбработатьШапкуДокумента("ПоступлениеТоваровУслуг", Структура);

			ИначеЕсли Массив[0] = "Поступление_ТЧ_Документа" Тогда
				Прервать;
				Структура = МассивВСтруктуруДокумент("Поступление_ТЧ_Документа", "ПоступлениеТоваровУслуг", Массив, ИмяФайла);
				ОбработатьТЧ_Документа("ПоступлениеТоваровУслуг", "Товары", Структура);
				
			ИначеЕсли Массив[0] = "Поступление_СчетФактураПолученный" Тогда
				Структура = МассивВСтруктуруДокумент("Поступление_СчетФактураПолученный", "СчетФактураПолученный", Массив, ИмяФайла);
				ОбработатьШапкуДокумента("СчетФактураПолученный", Структура);

			ИначеЕсли Массив[0] = "СчетЗакупка_ШапкаДокумента" Тогда
				Структура = МассивВСтруктуруДокумент("СчетЗакупка_ШапкаДокумента", "СчетНаОплатуПоставщика", Массив, ИмяФайла);
				Если СтруктураОшибок.Свойство("ТипОшибки") Тогда
					Возврат Ложь;
				КонецЕсли;
				ОбработатьШапкуДокумента("СчетНаОплатуПоставщика", Структура);
				
			ИначеЕсли Массив[0] = "СчетЗакупка_ТЧ_Документа" Тогда
				Структура = МассивВСтруктуруДокумент("СчетЗакупка_ТЧ_Документа", "СчетНаОплатуПоставщика", Массив, ИмяФайла);
				ОбработатьТЧ_Документа("СчетНаОплатуПоставщика", "Товары", Структура);
				
			ИначеЕсли Массив[0] = "Возврат_Продажа_ШапкаДокумента" Тогда
				Структура = МассивВСтруктуруДокумент("Возврат_Продажа_ШапкаДокумента", "ВозвратТоваровОтПокупателя", Массив, ИмяФайла);
				Если СтруктураОшибок.Свойство("ТипОшибки") Тогда
					Возврат Ложь;
				КонецЕсли;
				ОбработатьШапкуДокумента("ВозвратТоваровОтПокупателя", Структура);

			ИначеЕсли Массив[0] = "Возврат_Продажа_ТЧ_Документа" Тогда
				Структура = МассивВСтруктуруДокумент("Возврат_Продажа_ТЧ_Документа", "ВозвратТоваровОтПокупателя", Массив, ИмяФайла);
				ОбработатьТЧ_Документа("ВозвратТоваровОтПокупателя", "Товары", Структура);
				
			ИначеЕсли Массив[0] = "ВозвратСчетФактураВыданный_ШапкаДокумента" Тогда
				Если НЕ (ЗначениеЗаполнено(ДокВозвратТоваровОтПокупателя.ДоговорКонтрагента)
						И ДокВозвратТоваровОтПокупателя.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
					Структура = МассивВСтруктуруДокумент("ВозвратСчетФактураВыданный_ШапкаДокумента", "СчетФактураВыданный", Массив, ИмяФайла);
					ОбработатьШапкуДокумента("СчетФактураВыданный", Структура);
				КонецЕсли;
			ИначеЕсли Массив[0] = "ТребованиеНакладная_ШапкаДокумента" Тогда
				Структура = МассивВСтруктуруДокумент("ТребованиеНакладная_ШапкаДокумента", "ТребованиеНакладная", Массив, ИмяФайла);
				Если СтруктураОшибок.Свойство("ТипОшибки") Тогда
					Возврат Ложь;
				КонецЕсли;
				ОбработатьШапкуДокумента("ТребованиеНакладная", Структура);

			ИначеЕсли Массив[0] = "ТребованиеНакладная_ТЧ_Документа" Тогда
				Структура = МассивВСтруктуруДокумент("ТребованиеНакладная_ТЧ_Документа", "ТребованиеНакладная", Массив, ИмяФайла);
				ОбработатьТЧ_Документа("ТребованиеНакладная", "Материалы", Структура);
				
			ИначеЕсли Массив[0] = "ПеремещениеТоваров_ШапкаДокумента" Тогда
				Прервать;
				Структура = МассивВСтруктуруДокумент("ПеремещениеТоваров_ШапкаДокумента", "ПеремещениеТоваров", Массив, ИмяФайла);
				Если СтруктураОшибок.Свойство("ТипОшибки") Тогда
					Возврат Ложь;
				КонецЕсли;
				ОбработатьШапкуДокумента("ПеремещениеТоваров", Структура);

			ИначеЕсли Массив[0] = "ПеремещениеТоваров_ТЧ_Документа" Тогда
				Структура = МассивВСтруктуруДокумент("ПеремещениеТоваров_ТЧ_Документа", "ПеремещениеТоваров", Массив, ИмяФайла);
				ОбработатьТЧ_Документа("ПеремещениеТоваров", "Товары", Структура);
				
			ИначеЕсли Массив[0] = "ОтчетПроизводстваЗаСмену_ШапкаДокумента" Тогда
				Структура = МассивВСтруктуруДокумент("ОтчетПроизводстваЗаСмену_ШапкаДокумента", "ОтчетПроизводстваЗаСмену", Массив, ИмяФайла);
				Если СтруктураОшибок.Свойство("ТипОшибки") Тогда
					Возврат Ложь;
				КонецЕсли;
				ОбработатьШапкуДокумента("ОтчетПроизводстваЗаСмену", Структура);

			ИначеЕсли Массив[0] = "ОтчетПроизводстваЗаСмену_ТЧ_Документа" Тогда
				Структура = МассивВСтруктуруДокумент("ОтчетПроизводстваЗаСмену_ТЧ_Документа", "ОтчетПроизводстваЗаСмену", Массив, ИмяФайла);
				ОбработатьТЧ_Документа("ОтчетПроизводстваЗаСмену", "Продукция", Структура);
				
			ИначеЕсли Массив[0] = "ГТДИмпорт_ШапкаДокумента" Тогда
				СтруктураГТДИмпорт = МассивВСтруктуруДокумент("ГТДИмпорт_ШапкаДокумента", "ГТДИмпорт", Массив, ИмяФайла);
				Если СтруктураОшибок.Свойство("ТипОшибки") Тогда
					Возврат Ложь;
				КонецЕсли;

			ИначеЕсли Массив[0] = "ГТДИмпорт_ТЧ_Документа" Тогда
				Структура = МассивВСтруктуруДокумент("ГТДИмпорт_ТЧ_Документа", "ГТДИмпорт", Массив, ИмяФайла);
				ОбработатьТЧ_Документа("ГТДИмпорт", "Товары", Структура);
				
				СтруктураГТДИмпорт.Номер = Сред(ТЗ_ГТД[0].НомерГТД, 17, 7);
				
				СтруктураГТДИмпорт.КонтрагентНаименование = СокрЛП(ТЗ_ГТД[0].Поставщик);
				СтруктураГТДИмпорт.Контрагент = НайтиЭлементСправочника("Контрагенты", "Наименование", Истина, , СтруктураГТДИмпорт.КонтрагентНаименование, "");
				
				СтруктураГТДИмпорт.НомерГТДКод = Сред(ТЗ_ГТД[0].НомерГТД, 1, 23);
				СтруктураГТДИмпорт.НомерГТД = НайтиЭлементСправочника("НомераГТД", "Код", Истина, , СтруктураГТДИмпорт.НомерГТДКод, "");
				ОбработатьШапкуДокумента("ГТДИмпорт", СтруктураГТДИмпорт);
				
				ДокПоступлениеТоваровУслугСсылка = Документы.ПоступлениеТоваровУслуг.НайтиПоНомеру(СокрЛП(СтруктураГТДИмпорт.Номер), СтруктураГТДИмпорт.Дата);
				Если ДокПоступлениеТоваровУслугСсылка.Пустая() Тогда
					ДокПоступлениеТоваровУслуг = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
				Иначе
					ДокПоступлениеТоваровУслуг = ДокПоступлениеТоваровУслугСсылка.ПолучитьОбъект();
					ДокПоступлениеТоваровУслуг.Товары.Очистить();
				КонецЕсли;
				ДокПоступлениеТоваровУслуг.ВидОперации			= Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
				ДокПоступлениеТоваровУслуг.Организация			= СтруктураГТДИмпорт.Организация;
				ДокПоступлениеТоваровУслуг.Дата					= СтруктураГТДИмпорт.Дата;
				ДокПоступлениеТоваровУслуг.Номер				= СтруктураГТДИмпорт.Номер;
				ДокПоступлениеТоваровУслуг.НомерВходящегоДокумента	= СтруктураГТДИмпорт.Номер;
				ДокПоступлениеТоваровУслуг.Склад				= НайтиЭлементСправочника("Склады", "КодРС", Ложь, , 12,);
				ДокПоступлениеТоваровУслуг.Контрагент			= СтруктураГТДИмпорт.Контрагент;
				ДокПоступлениеТоваровУслуг.ДоговорКонтрагента	= Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				ДокПоступлениеТоваровУслуг.СуммаВключаетНДС 	= Ложь;
				ДокПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом=ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ;
				ДокПоступлениеТоваровУслуг.СпособЗачетаАвансов	= Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
				ДокПоступлениеТоваровУслуг.ВалютаДокумента		= ВалютаДоллар;
				СтруктураВалюта = ПолучитьКурсВалюты(ТекущаяДата(), ВалютаДоллар);
				ДокПоступлениеТоваровУслуг.КратностьВзаиморасчетов	= СтруктураВалюта.КратностьВзаиморасчетов;
				ДокПоступлениеТоваровУслуг.КурсВзаиморасчетов	= СтруктураВалюта.КурсВзаиморасчетов;
				
				ДокПоступлениеТоваровУслуг.Товары.Загрузить(ТЗ_Поступление);
				ДокПоступлениеТоваровУслуг.Записать(РежимЗаписиДокумента.Запись);
				
				ТЗ_ГТД.ЗаполнитьЗначения(ДокПоступлениеТоваровУслуг.Ссылка, "ДокументПартии");
				
				//ДокГТДИмпорт.Товары.Очистить();
				ДокГТДИмпорт.Разделы.Очистить();
				
				ДокГТДИмпорт.Товары.Загрузить(ТЗ_ГТД);
				ТЗ_ГТД_Копия = ТЗ_ГТД.Скопировать();
				ТЗ_ГТД_Копия.Свернуть("НомерРаздела");
				КоличествоРазделов = ТЗ_ГТД_Копия.Количество();
				Количество = 0;
				Пока Количество < КоличествоРазделов Цикл
					Стр = ДокГТДИмпорт.Разделы.Добавить();
					Стр.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
					Количество = Количество + 1;
				КонецЦикла;
				
			Иначе	// что-то новенькое
				
			КонецЕсли;
		КонецЕсли;

		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;

	//ТД.ДобавитьСтроку("Обработано строк: " + НомерТекущейСтроки);
	Возврат ДокументЗагружен;

КонецФункции

&НаСервере
Функция ЗагрузитьСправочникиНаСервере(ТД, ИмяФайла, ИмяСправочника)

	//НайденоПоНаименованию=0;НайденоПоДате=0;НайденоПоНомеру=0;НеНайденоКонтрагентов=0;НайденоКонтрагентов=0;
	ТекстДок  = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(ИмяФайла, "UTF8");
	
	КоличествоСтрокВФайле = ТекстДок.КоличествоСтрок();
	Если КоличествоСтрокВФайле = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Пустой файл!";
		Сообщение.Сообщить();
		Возврат ТД;
	КонецЕсли;

	ТД.ДобавитьСтроку("Всего строк: " + КоличествоСтрокВФайле);
	НомерТекущейСтроки = 1;
	Пока НомерТекущейСтроки <= КоличествоСтрокВФайле Цикл
		ТекущаяСтрока = ТекстДок.ПолучитьСтроку(НомерТекущейСтроки);
		Если ТекущаяСтрока = "#" ИЛИ ТекущаяСтрока = """#""" Тогда	// конец текущего элемента
		Иначе
			Массив = РазложитьСтрокуВМассив(ТекущаяСтрока, ";");
			Если ИмяСправочника = "Контрагенты" Тогда
				Структура = МассивВСтруктуруСправочникОбработать("ллл_КонтрагентыРС", Массив);
			ИначеЕсли ИмяСправочника = "ДоговорыКонтрагенты" Тогда
				Структура = МассивВСтруктуруСправочникОбработать("ДоговорыКонтрагенты", Массив);
				СпрЭлемент.Записать();
			ИначеЕсли ИмяСправочника = "ВидыНоменклатуры" Тогда
				Структура = МассивВСтруктуруСправочникОбработать("ВидыНоменклатуры", Массив);
				СпрЭлемент.Записать();
			ИначеЕсли ИмяСправочника = "НоменклатураРС" Тогда
				Структура = МассивВСтруктуруСправочникОбработать("ллл_НоменклатураРС", Массив);
			ИначеЕсли ИмяСправочника = "Бренд" Тогда
				Сообщить("Бренд");
				Структура = МассивВСтруктуруСправочникОбработать("ллл_Бренды", Массив);
			КонецЕсли;
			СпрЭлемент = Неопределено;
		КонецЕсли;

		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;

	ТД.ДобавитьСтроку("Обработано строк: " + НомерТекущейСтроки);

	Возврат ТД;

КонецФункции

&НаСервере
Функция ЗагрузитьРегистрыСведенийНаСервере(ТД, ИмяФайла, ИмяРегистра)
	
	ТекстДок  = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(ИмяФайла, "UTF8");
	
	КоличествоСтрокВФайле = ТекстДок.КоличествоСтрок();
	Если КоличествоСтрокВФайле = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Пустой файл!";
		Сообщение.Сообщить();
		Возврат ТД;
	КонецЕсли;

	ТД.ДобавитьСтроку("Всего строк: " + КоличествоСтрокВФайле);
	НомерТекущейСтроки = 1;
	Пока НомерТекущейСтроки <= КоличествоСтрокВФайле Цикл
		ТекущаяСтрока = ТекстДок.ПолучитьСтроку(НомерТекущейСтроки);
		Если НЕ ТекущаяСтрока = "#" Тогда	// не конец файла
			Массив = РазложитьСтрокуВМассив(ТекущаяСтрока, ";");
			Если ИмяРегистра = "НоменклатураКонтрагентовБЭД" Тогда
				Структура = МассивВСтруктуруРегистрСведенийОбработать("НоменклатураКонтрагентовБЭД", Массив);
			КонецЕсли;
			СпрЭлемент = Неопределено;
		КонецЕсли;

		НомерТекущейСтроки = НомерТекущейСтроки + 1;
	КонецЦикла;

	ТД.ДобавитьСтроку("Обработано строк: " + НомерТекущейСтроки);
	Возврат ТД;

КонецФункции	// ЗагрузитьРегистрыСведенийНаСервере()

#КонецОбласти

Функция РазложитьСтрокуВМассив(Знач Стр, Разделитель = ";")
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1 = 1 Цикл
			Поз = СтрНайти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз - 1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 Цикл
			Поз = СтрНайти(Стр,Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз - 1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

#Область ОбработкаДокументов

Функция МассивВСтруктуруДокумент(ЧастьДокумента, ВидДокумента, Массив, ИмяФайла = "")

	Время = " 10:00:00";
	Структура = Новый Структура();
	
	КомментарийШаблон = СтрШаблон("Сформирован автоматически, загрузкой из РС (вер. %1). %2.", Формат(ДатаПоследнегоИзменения, "ДФ=гггг"), ТекущаяДата());
	х = 0;
	Если ВидДокумента = "РеализацияТоваровУслуг" Тогда
	#Область РеализацияТоваровУслуг
		Если ЧастьДокумента = "Продажа_ШапкаДокумента" Тогда
						Структура.Вставить("ВидОперации",					Перечисления.ВидыОперацийРеализацияТоваров.Товары);
			х = х + 1;	Структура.Вставить("ОрганизацияИНН",				Массив[х]);
			х = х + 1;	Структура.Вставить("ОбменПоЭДО",					Массив[х]);
						Структура.Вставить("ВидДокумента",					"РеализацияТоваровУслуг");
			Если Структура.ОбменПоЭДО = "удаление" Тогда
				х = х + 1;	Структура.Вставить("Номер", 					Массив[х]);
				х = х + 1;	Структура.Вставить("КодРСДокумент",				Число(Массив[х]));
				х = х + 1;	Структура.Вставить("Дата", 						КонецДня(ТекущаяДата()) ); // время 09.00, Карпова Наталья 18.07.2022
							Структура.Вставить("Статус",					"удаление");
							
				ДокРеализацияТоваровУслугСсылка = НайтиДокументПоКодуРС(Структура);
				Если ДокРеализацияТоваровУслугСсылка = Неопределено Тогда
					//ЗарегистрироватьИзменение("Док реализация: " + СокрЛП(Структура.Номер) + "-" + СокрЛП(Структура.КодРСДокумент) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.Удален, ТекущаяДата(), , "Документ.РеализацияТоваровУслуг");
					ЗарегистрироватьИзменение("Док реализация: " + СокрЛП(Структура.Номер) + "-" + СокрЛП(Структура.КодРСДокумент) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), , "Документ.РеализацияТоваровУслуг");
				Иначе
					// проверим на дату запрета редактирования
					Если ДокРеализацияТоваровУслугСсылка.Дата <= ДатаЗапретаРедактированияДляПользователя Тогда
						СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПоДатеЗапрета");
						ЗарегистрироватьИзменение(ДокРеализацияТоваровУслугСсылка, Перечисления.СобытияЗагрузки.ДатаЗапретаУдаление, ТекущаяДата(), ДокРеализацияТоваровУслугСсылка.Дата, "Документ.РеализацияТоваровУслуг");
						ТекстОшибки = "Документ в закрытом периоде. Перемещен в ошибки по дате.";
						ЭлементыПути = СтрРазделить(ИмяФайла, "\", Ложь);
						ЗарегистрироватьОшибку( Новый Структура("ТекОб, ИмяФайла, ТекущаяДата, ОписаниеОшибки, ID_Документа, Номер", ДокРеализацияТоваровУслугСсылка, ЭлементыПути[ЭлементыПути.ВГраница()], ТекущаяДата(), ТекстОшибки, Структура.КодРС, "") );
						Возврат Неопределено;
					Иначе
						ЗарегистрироватьИзменение(ДокРеализацияТоваровУслугСсылка, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), ДокРеализацияТоваровУслугСсылка.Дата, "Документ.РеализацияТоваровУслуг");
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				х = х + 1;	Структура.Вставить("ПризнакТорговойПлощадки",		?(СокрЛП(Массив[х]) = "ИСТИНА", ИСТИНА, ЛОЖЬ));
				х = х + 1;	Структура.Вставить("НомерСчетаТорговойПлощадки",	Массив[х]);
				х = х + 1;	Структура.Вставить("Дата",							КонецДня(СтрокаВДату(Массив[х])) - (15*3600) + 1 ); // время 09.00, Карпова Наталья 18.07.2022	
				х = х + 1;	Структура.Вставить("Номер", 						Массив[х]);
				х = х + 1;	Структура.Вставить("КодРСДокумент",					Число(Массив[х]));
				х = х + 1;	Структура.Вставить("СкладКод",						Число(Массив[х]));
				х = х + 1;	Структура.Вставить("КонтрагентИНН",					СокрЛП(Массив[х]));
				х = х + 1;	Структура.Вставить("КонтрагентКПП",					СокрЛП(Массив[х]));
				х = х + 1;	Структура.Вставить("КонтрагентКодРС",				Число(Массив[х]));
				х = х + 1;	Структура.Вставить("ДоговорКонтрагента",			Массив[х]);
				х = х + 1;	Структура.Вставить("ДоговорКонтрагентаНомер",		Массив[х]);
				х = х + 1;	Структура.Вставить("ДоговорКонтрагентаДата",		Массив[х]);
				х = х + 1;	Структура.Вставить("СуммаВключаетНДС",				Истина);
				х = х + 1;	Структура.Вставить("ВалютаДокументаКод",			Массив[х]);
				х = х + 1;	Структура.Вставить("КурсВзаиморасчетов",			Массив[х]);
				х = х + 1;	Структура.Вставить("ID_СчетаПокупателя",			Массив[х]);
				х = х + 1;	Структура.Вставить("ГрузополучательИНН",			СокрЛП(Массив[х]));
				х = х + 1;	Структура.Вставить("ГрузополучательКПП",			СокрЛП(Массив[х]));
				х = х + 1;	Структура.Вставить("ГрузополучательКодРС",			Число(Массив[х]));
				х = х + 1;	Структура.Вставить("ОтветственныйМенеджер",			СокрЛП(Массив[х]));
				х = х + 1;	Структура.Вставить("ГрузополучательКодРС",			Число(Массив[х]));
				х = х + 1;	Структура.Вставить("АдресДоставки",					СокрЛП(Массив[х]));
							Структура.Вставить("Статус",						"НовыйИзменение");
							Структура.Вставить("ллл_КурсВалютыРС",				Структура.КурсВзаиморасчетов);
							Структура.Вставить("ллл_НомерОтправления",			?( ЗначениеЗаполнено(Структура.НомерСчетаТорговойПлощадки), НайтиДобавитьНомерОтправления( Структура.НомерСчетаТорговойПлощадки ), "" ) );
							
				// (Лопатин. Заполнение счета на оплату, по его КодРС:
				Если ЗначениеЗаполнено(Структура.ID_СчетаПокупателя) Тогда
					СтруктураПоиска = Новый Структура("КодРСДокумент, ВидДокумента", Число(Структура.ID_СчетаПокупателя), "СчетНаОплатуПокупателю");
					Структура.Вставить("СчетНаОплатуПокупателю", НайтиДокументПоКодуРС( СтруктураПоиска ) );
				КонецЕсли;
				//).
				
				// проверим на дату запрета редактирования
				Если Структура.Дата <= ДатаЗапретаРедактированияДляПользователя Тогда
					СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПоДатеЗапрета");
					ДокРеализацияТоваровУслугСсылка = НайтиДокументПоКодуРС(Структура);
					Если ДокРеализацияТоваровУслугСсылка = Неопределено Тогда
						ЗарегистрироватьИзменение("Док реализация: " + СокрЛП(Структура.Номер) + "-" + СокрЛП(Структура.КодРСДокумент) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), , "Документ.РеализацияТоваровУслуг");
					Иначе
						ЗарегистрироватьИзменение(ДокРеализацияТоваровУслугСсылка, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), ДокРеализацияТоваровУслугСсылка.Дата, "Документ.РеализацияТоваровУслуг");
					КонецЕсли;
					ТекстОшибки = "Документ в закрытом периоде. Перемещен в ошибки по дате.";
					ЭлементыПути = СтрРазделить(ИмяФайла, "\", Ложь);
					ЗарегистрироватьОшибку( Новый Структура("ТекОб, ИмяФайла, ТекущаяДата, ОписаниеОшибки, ID_Документа, Номер", ДокРеализацияТоваровУслугСсылка, ЭлементыПути[ЭлементыПути.ВГраница()], ТекущаяДата(), ТекстОшибки, Структура.КодРСДокумент, Структура.Номер ) );
					Возврат Неопределено;
				КонецЕсли;
				Если глПериодОбработки <> Неопределено И НЕ (Структура.Дата >= глПериодОбработки.ДатаНачала И Структура.Дата <= глПериодОбработки.ДатаОкончания) Тогда
					СтруктураОшибок.Вставить("ТипОшибки", "ОграничениеПоПериоду");
					ТекстОшибки = "Документ не попал в выбранный период. Перемещен в ошибки по дате.";
					ЭлементыПути = СтрРазделить(ИмяФайла, "\", Ложь);
					ЗарегистрироватьОшибку( Новый Структура("ТекОб, ИмяФайла, ТекущаяДата, ОписаниеОшибки, ID_Документа, Номер", ДокРеализацияТоваровУслугСсылка, ЭлементыПути[ЭлементыПути.ВГраница()], ТекущаяДата(), ТекстОшибки, Структура.КодРСДокумент, Структура.Номер ) );
					Возврат Неопределено;
				КонецЕсли;
				
				// все реализации офорляем с основного склада, код склада = 12
				Если НЕ (Структура.СкладКод = 12 ИЛИ Структура.СкладКод = 26 ИЛИ Структура.СкладКод = 59) Тогда
					Структура.СкладКод = 12;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Структура.ДоговорКонтрагентаДата) Тогда
					Структура.Вставить("ДоговорКонтрагентаДата",		СтрокаВДату(Структура.ДоговорКонтрагентаДата));
				КонецЕсли;
				
				Если НЕ Структура.КонтрагентКодРС = Структура.ГрузополучательКодРС Тогда
				
					Если ЗначениеЗаполнено(Структура.ГрузополучательКодРС) Тогда
						Структура.Вставить("Грузополучатель",				НайтиЭлементСправочника("Контрагенты", "КодРС", Ложь, , Структура.ГрузополучательКодРС, ""));
						Если Структура.Грузополучатель = Неопределено Тогда
							Структура.Вставить("Грузополучатель",	НайтиЭлементСправочника("ллл_КонтрагентыРС", "КодРС", Ложь, , Структура.ГрузополучательКодРС, ""));
							Если НЕ Структура.Грузополучатель = Неопределено Тогда
								СтруктураНовая = Новый Структура();
								СтруктураНовая.Вставить("ВидДоговораСКонтрагентом",	Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
								СтруктураНовая.Вставить("НаименованиеДоговора",		"Договор с покупателем");
								СтруктураНовая.Вставить("КонтрагентКодРС",			Структура.ГрузополучательКодРС);
								СтруктураНовая.Вставить("Контрагент",				Структура.Грузополучатель);
								
								// создадим контрагента
								Грузополучатель = СоздатьКонтрагента(СтруктураНовая);
								Структура.Вставить("Грузополучатель",	Грузополучатель);
								
								//// создадим договор с контрагентом
								//Договор = СоздатьДоговорКонтрагента(Структура);
								//Структура.Вставить("Договор",		Договор);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;

				Структура.Вставить("Организация",				НайтиЭлементСправочника("Организации", "ИНН", Ложь, , Структура.ОрганизацияИНН, ""));
				Структура.Вставить("Склад",						НайтиЭлементСправочника("Склады", "КодРС", Ложь, , Структура.СкладКод,));
				Структура.Вставить("ВалютаДокумента",			НайтиЭлементСправочника("Валюты", "Код", Ложь, , Структура.ВалютаДокументаКод,));
				Структура.Вставить("БанковскийСчетОрганизации",	Организация.ОсновнойБанковскийСчет);
				Структура.Вставить("СпособЗачетаАвансов",		Перечисления.СпособыЗачетаАвансов.Автоматически);
				Если НЕ ЗначениеЗаполнено(Структура.Склад) Тогда
					Структура.Склад = л3_СерверПовтИсп.ЗначениеНетиповойКонстанты("СкладПоУмолчаниюРТУ_ОбменРС");
				КонецЕсли;
				// Лопатин. Признак торговой площадки не приходит из РС. Решили всегда искать по РС Торговые площадки, в случае отсутствия записей - ищём Контрагента по коду РС и наименованию договора.
				СтруктураПоиска = Новый Структура("КодРС, НаименованиеДоговораВРС", Структура.КонтрагентКодРС, Структура.ДоговорКонтрагента);
				Стр = НайтиЭлементСправочника("ТорговыеПлощадки", "КодРС", Ложь, СтруктураПоиска, "", "");
				ЭтоТорговаяПлощадка = Ложь;
				СчетаУчетаЗаполнены = Ложь;
				Если Стр.Контрагент <> Неопределено Тогда
					ЭтоТорговаяПлощадка = Истина;
					Структура.Вставить("Контрагент",				Стр.Контрагент);
					Структура.Вставить("ДоговорКонтрагента",		Стр.ДоговорКонтрагента);
					Структура.Вставить("Грузополучатель",			Стр.Контрагент);
					Если ЗначениеЗаполнено(Стр.ДоговорКонтрагента)
						И Стр.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
						Структура.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
					КонецЕсли;
				Иначе
					Структура.Вставить("Контрагент",		НайтиЭлементСправочника("Контрагенты", "КодРС", Ложь, , Структура.КонтрагентКодРС, ""));

					Если Структура.Контрагент = Неопределено Тогда
						//Структура.Вставить("Контрагент",		НайтиЭлементСправочника("ллл_КонтрагентыРС", "ИНН-КПП", Ложь, , Структура, ""));
						Структура.Вставить("Контрагент",	НайтиЭлементСправочника("ллл_КонтрагентыРС", "КодРС", Ложь, , Структура.КонтрагентКодРС, ""));
						Если НЕ Структура.Контрагент = Неопределено Тогда
							Структура.Вставить("ВидДоговораСКонтрагентом",	Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
							Структура.Вставить("НаименованиеДоговора",		"Договор с покупателем");
							
							// создадим контрагента
							Контрагент = СоздатьКонтрагента(Структура);
							Структура.Вставить("Контрагент",	Контрагент);
						КонецЕсли;
					КонецЕсли;
					
					Если Структура.Контрагент <> Неопределено Тогда
						// На текущий момент РасчетыВУсловныхЕдиницах - только в валютных договорах,
						// остальные договры - рублёвые.
						НаименованиеДоговора = "Договор в %1" + ?(Структура.ВалютаДокументаКод <> "643", " (оплата в %1)", "");
						НаименованиеДоговора = СтрШаблон(НаименованиеДоговора, Структура.ВалютаДокумента);
						Структура.Вставить("ВидДоговораСКонтрагентом",	Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
						Структура.Вставить("НаименованиеДоговора",		НаименованиеДоговора);
						Если глЭтоПрогрессивныйФормат = Истина Тогда
							Если Структура.Контрагент.СтранаРегистрации = Справочники.СтраныМира.Россия
								И Структура.ВалютаДокументаКод <> "643" Тогда
								Структура.Вставить("РасчетыВУсловныхЕдиницах", Истина);
							КонецЕсли;
							Структура.Вставить("ВидДоговора",				Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
							Структура.Вставить("ДоговорКонтрагента",		НайтиЭлементСправочника("ДоговорыКонтрагентов", "НаименованиеВладельца", Ложь, Структура, ,));
							Если НЕ ЗначениеЗаполнено(Структура.ДоговорКонтрагента) Тогда
								Структура.Вставить("ДатаДоговора",				Дата(2022, 1, 1));
								Структура.Вставить("НомерДоговора",				"1");
								Договор = СоздатьДоговорКонтрагента(Структура);
								Структура.Вставить("ДоговорКонтрагента", Договор);
							КонецЕсли;
						Иначе
							Структура.Вставить("ВидДоговора",				Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
							Структура.Вставить("ДоговорКонтрагента",		НайтиЭлементСправочника("ДоговорыКонтрагентов", "НаименованиеВладельца", Ложь, Структура, ,));
							Если НЕ ЗначениеЗаполнено(Структура.ДоговорКонтрагента) Тогда
								// создадим договор с контрагентом
								Договор = СоздатьДоговорКонтрагента(Структура);
								Структура.Вставить("Договор",            Договор);
								Структура.Вставить("ДоговорКонтрагента", Договор);
							КонецЕсли;
						КонецЕсли;
					Иначе
						Структура.Контрагент = л3_СерверПовтИсп.ЗначениеНетиповойКонстанты("КонтрагентПоУмолчаниюРТУ_ОбменРС");
						КомментарийШаблон = СтрШаблон("ИНН %1. %2", Структура.КонтрагентИНН, КомментарийШаблон);
					КонецЕсли;
				КонецЕсли;
				
				Структура.Вставить("ЭтоУниверсальныйДокумент",	Ложь);
				Структура.Вставить("ДатаВходящегоДокумента",	Структура.Дата);
				Структура.Вставить("НомерВходящегоДокумента",	Структура.Номер);
				
				Если НЕ СчетаУчетаЗаполнены И ЗначениеЗаполнено(Структура.ДоговорКонтрагента) Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = 
						"ВЫБРАТЬ
						|	Т.СчетУчетаРасчетовСПокупателем КАК СчетУчетаРасчетовСПокупателем,
						|	Т.СчетУчетаАвансовПолученных КАК СчетУчетаАвансовПолученных
						|ИЗ
						|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК Т
						|ГДЕ
						|	Т.Договор = &Договор";
					
					Запрос.УстановитьПараметр("Договор", Структура.ДоговорКонтрагента);
					
					Выборка = Запрос.Выполнить().Выбрать();
					
					Если Выборка.Следующий() Тогда
						Структура.Вставить("СчетУчетаРасчетовСКонтрагентом",	Выборка.СчетУчетаРасчетовСПокупателем);
						Структура.Вставить("СчетУчетаРасчетовПоАвансам",		Выборка.СчетУчетаАвансовПолученных);
						СчетаУчетаЗаполнены = Истина;
					КонецЕсли;
				КонецЕсли;
				Если Структура.ВалютаДокумента = ВалютаДоллар ИЛИ Структура.ВалютаДокумента = ВалютаЕвро Тогда
					Если НЕ СчетаУчетаЗаполнены Тогда
						Структура.Вставить("СчетУчетаРасчетовСКонтрагентом",	ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал);
						Структура.Вставить("СчетУчетаРасчетовПоАвансам",		ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал);
					КонецЕсли;
					Структура.Вставить("ДокументБезНДС",					ЛОЖЬ);
					
					//СтрВалюта = ПолучитьКурсВалюты(Структура.Дата, Структура.ВалютаДокумента);
					//Структура.Вставить("КурсВзаиморасчетов",				СтрВалюта.КурсВзаиморасчетов);	// КурсВалюты;
					//Структура.Вставить("КратностьВзаиморасчетов",			СтрВалюта.КратностьВзаиморасчетов);
					
					// надо брать курс из РС ???? Галина, говорит что так верно
					СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Структура.ВалютаДокумента, Структура.Дата);
					Структура.Вставить("КурсВзаиморасчетов",				СтруктураКурса.Курс);
					Структура.Вставить("КратностьВзаиморасчетов",			СтруктураКурса.Кратность);
				Иначе	// 643 - Российский рубль
					Если НЕ СчетаУчетаЗаполнены Тогда
						Структура.Вставить("СчетУчетаРасчетовСКонтрагентом",	ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
						Структура.Вставить("СчетУчетаРасчетовПоАвансам",		ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
					КонецЕсли;
					Структура.Вставить("КурсВзаиморасчетов",				0);
					Структура.Вставить("КратностьВзаиморасчетов",			0);
				КонецЕсли;
				Структура.Вставить("Ответственный",		Ответственный);
				Структура.Вставить("Комментарий",		СтрШаблон("## Склад №: %1. Контрагент: %2. %3.#",
					Структура.СкладКод, СтрЗаменить(Структура.КонтрагентКодРС, Символы.НПП, ""), КомментарийШаблон));
			КонецЕсли;
			
		ИначеЕсли ЧастьДокумента = "Продажа_НестандартныеТеги" Тогда
						Структура.Вставить("НестандартныеТеги",			"НестандартныеТеги");
			х = х + 1;	Структура.Вставить("ДоговорНомер",				СокрЛП(Массив[х]));
			х = х + 1;	Структура.Вставить("ДоговорДата",				СокрЛП(Массив[х]));
			х = х + 1;	Структура.Вставить("ДоговорПримечание",			СокрЛП(Массив[х]));
			х = х + 1;	Структура.Вставить("НомерЗаказаКлиента",		СокрЛП(Массив[х]));
			х = х + 1;	Структура.Вставить("ГородПолучателя",			СокрЛП(Массив[х]));
			
		ИначеЕсли ЧастьДокумента = "Продажа_ТЧ_Документа" Тогда
			х = х + 1;	Структура.Вставить("Артикул",					СокрЛП(Массив[х]));
			х = х + 1;	Структура.Вставить("СчетУчетаКод",				СокрЛП(Массив[х]));
			х = х + 1;	Структура.Вставить("Количество",				Число(Массив[х]));
			х = х + 1;	Структура.Вставить("Цена",						Число(Массив[х]));
			х = х + 1;	Структура.Вставить("Сумма",						Число(Массив[х]));
			х = х + 1;	Структура.Вставить("СтавкаНДС",					Массив[х]);
			х = х + 1;	Структура.Вставить("СуммаНДС",					Число(Массив[х]));
			х = х + 1;	Структура.Вставить("Всего",						Число(Массив[х]));
			х = х + 1;	Структура.Вставить("НомерГТД",					СокрЛП(Массив[х]));
			х = х + 1;	Структура.Вставить("СтранаПроисхожденияКод",	СокрЛП(Массив[х]));
			х = х + 1;	Структура.Вставить("КодТНВЭД",					СокрЛП(Массив[х]));
			
			Структура.Вставить("Номенклатура",				НайтиЭлементСправочника("Номенклатура", "Артикул", Ложь, , Структура.Артикул, ""));
			Если Структура.Номенклатура = Неопределено Тогда	// не найдена номенклатура
				ПеремещатьФайлыПослеУспешнойОбработки = Ложь;
				ТекстОшибки = СтрШаблон("Не найдена номенклатура с артикулом %1. Файл переименован, префикс Ошибка_", Структура.Артикул);
				ЭлементыПути = СтрРазделить(ИмяФайла, "\", Ложь);
				ЗарегистрироватьОшибку( Новый Структура("ТекОб, ИмяФайла, ТекущаяДата, ОписаниеОшибки, ID_Документа, Номер", ДокРеализацияТоваровУслугСсылка, ЭлементыПути[ЭлементыПути.ВГраница()], ТекущаяДата(), ТекстОшибки, Структура.Артикул, Структура.Артикул ) );
			Иначе
				Если ДокРеализацияТоваровУслуг = Неопределено Тогда
					//ОшибкаВСтруктуре, проверьте структуру выгруженных файлов
					СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаВСтруктуре");
					ТекстОшибки = "Не найден документ РТУ. Файл перемещён в ошибки по структуре.";
					ЭлементыПути = СтрРазделить(ИмяФайла, "\", Ложь);
					ЗарегистрироватьОшибку( Новый Структура("ТекОб, ИмяФайла, ТекущаяДата, ОписаниеОшибки, ID_Документа, Номер", ДокРеализацияТоваровУслугСсылка, ЭлементыПути[ЭлементыПути.ВГраница()], ТекущаяДата(), ТекстОшибки, "", "" ) );
					Возврат Неопределено;
				Иначе
					Если НЕ Структура.КодТНВЭД = Структура.Номенклатура.КодТНВЭД И НЕ ЗначениеЗаполнено(Структура.Номенклатура.КодТНВЭД) Тогда
						Структура.Вставить("КодТНВЭД",				НайтиЭлементСправочника("КлассификаторТНВЭД", "Код", Истина, , Структура.КодТНВЭД, ""));
					Иначе
						Структура.Вставить("КодТНВЭД",				Структура.Номенклатура.КодТНВЭД);
					КонецЕсли;
					Если ЗначениеЗаполнено(Структура.НомерГТД) Тогда
						Структура.Вставить("НомерГТД",				НайтиЭлементСправочника("НомераГТД", "Код", Истина, , Структура.НомерГТД, ""));
					КонецЕсли;
					Структура.Вставить("СтранаПроисхождения",		НайтиЭлементСправочника("СтраныМира", "Код", Ложь, , Структура.СтранаПроисхожденияКод, ""));
					
					Если Структура.СчетУчетаКод = "41.1" Тогда
						Структура.Вставить("СчетУчета",				ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
					ИначеЕсли Структура.СчетУчетаКод = "43" Тогда
						Структура.Вставить("СчетУчета",				ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
						Структура.Вставить("Субконто",				НайтиЭлементСправочника("НоменклатурныеГруппы", "Наименование", Ложь, , "Производство продукции", ""));
					КонецЕсли;
					
					// Павлов BUH1C-202
					Если ДокРеализацияТоваровУслуг.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
						Структура.Вставить("ПереданныеСчетУчета",	ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные);
						Структура.Вставить("Субконто",				НайтиЭлементСправочника("НоменклатурныеГруппы", "Наименование", Ложь, , "Торговля розничная, осуществляемая непосредственно при помощи сети Интернет", ""));
					КонецЕсли;
						
					Структура.Вставить("СчетУчетаНДСПоРеализации",	ПланыСчетов.Хозрасчетный.Продажи_НДС);
					Структура.Вставить("СчетДоходов",				ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
					Структура.Вставить("СчетРасходов",				ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);
					Если ДокРеализацияТоваровУслуг.Контрагент.СтранаРегистрации <> Справочники.СтраныМира.Россия
						И (ДокРеализацияТоваровУслуг.ВалютаДокумента = ВалютаДоллар ИЛИ ДокРеализацияТоваровУслуг.ВалютаДокумента = ВалютаЕвро) Тогда
						Структура.Вставить("СтавкаНДС",				Перечисления.СтавкиНДС.НДС0);
						Структура.Вставить("Субконто",				НайтиЭлементСправочника("НоменклатурныеГруппы", "Наименование", Ложь, , "Экспортные операции", ""));
						//Структура.Вставить("Цена",				Окр(Структура.Цена / ДокРеализацияТоваровУслуг.КурсВзаиморасчетов, 2, 1));
						//Структура.Вставить("Сумма",				Окр(Структура.Сумма / ДокРеализацияТоваровУслуг.КурсВзаиморасчетов, 2, 1));
						//Структура.Вставить("СуммаНДС",			0);
						//Структура.Вставить("Всего",				Окр(Структура.Всего / ДокРеализацияТоваровУслуг.КурсВзаиморасчетов, 2, 1));
					Иначе	// 643 - Российский рубль
						Структура.Вставить("СтавкаНДС",				?(Структура.СтавкаНДС <> "0"
																		ИЛИ ДокРеализацияТоваровУслуг.Контрагент.СтранаРегистрации = Справочники.СтраныМира.Россия,
																		Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС0));
						Если ЭтоТорговаяПлощадка Тогда
							Структура.Вставить("Субконто",			НоменклатурнаяГруппаТорговойПлощадки);
						Иначе
							Если НЕ Структура.Свойство("Субконто") Тогда
								Если Структура.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
									Структура.Вставить("Субконто",			НайтиЭлементСправочника("НоменклатурныеГруппы", "Наименование", Ложь, , "Экспортные операции", ""));
								Иначе
									Структура.Вставить("Субконто",			НайтиЭлементСправочника("НоменклатурныеГруппы", "Наименование", Ложь, , "Основная номенклатурная группа", ""));
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					// (Лопатин. 16.06.2022. BUH1C-153.
					Если ДокРеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
						Структура.Вставить("ПереданныеСчетУчета", ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные);
					КонецЕсли;
					//).
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	#КонецОбласти
	
	ИначеЕсли ВидДокумента = "СчетФактураВыданный" Тогда
	#Область ПродажаСчетФактураВыданный
		Если ЧастьДокумента = "ПродажаСчетФактура_ШапкаДокумента" Тогда
			х = х + 1;	Структура.Вставить("Номер", 		Массив[х]);
			х = х + 1;	Структура.Вставить("Дата",			СтрокаВДату(Массив[х]) - 3600);
			х = х + 1;	Структура.Вставить("Сумма", 		Массив[х]);
			х = х + 1;	Структура.Вставить("СуммаНДС",		Массив[х]);
			
			Структура.Вставить("ДатаВыставления",			Структура.Дата);
			Структура.Вставить("СуммаДокумента",			Структура.Сумма);
			Структура.Вставить("СуммаНДСДокумента",			Структура.СуммаНДС);
			
			Структура.Вставить("Организация",				ДокРеализацияТоваровУслуг.Организация);
			Структура.Вставить("ОрганизацияПолучатель",		ДокРеализацияТоваровУслуг.Организация);
			Структура.Вставить("ВалютаДокумента",			ДокРеализацияТоваровУслуг.ВалютаДокумента);
			Структура.Вставить("ВидСчетаФактуры",			Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
			Структура.Вставить("Выставлен",					Истина);
			Структура.Вставить("Контрагент",				ДокРеализацияТоваровУслуг.Контрагент);
			Структура.Вставить("ДоговорКонтрагента",		ДокРеализацияТоваровУслуг.ДоговорКонтрагента);
			Структура.Вставить("ДокументОснование",			ДокРеализацияТоваровУслуг);
			Структура.Вставить("ЕстьПрослеживаемыеТовары",	Ложь); // прослеживаемый
			Структура.Вставить("КодВидаОперации",			"01");
			Структура.Вставить("КодСпособаВыставления",		1);
			Структура.Вставить("КППКонтрагента",			ДокРеализацияТоваровУслуг.Контрагент.КПП);
			Структура.Вставить("ПредставлениеНомера",		Структура.Номер);
			
			Структура.Вставить("Комментарий",				КомментарийШаблон);
			Структура.Вставить("Ответственный",				Ответственный);
			
		ИначеЕсли ЧастьДокумента = "ВозвратСчетФактураВыданный_ШапкаДокумента" Тогда
			х = х + 1;	Структура.Вставить("Номер", 			Массив[х]);
			х = х + 1;	Структура.Вставить("Дата",				СтрокаВДату(Массив[х]) - 3600);
			х = х + 1;	Структура.Вставить("Сумма", 			Массив[х]);
			х = х + 1;	Структура.Вставить("СуммаНДС",			Массив[х]);
			
			Структура.Вставить("ДатаВыставления",				Структура.Дата);
			Структура.Вставить("СуммаДокумента",				Структура.Сумма);
			Структура.Вставить("СуммаНДСДокумента",				Структура.СуммаНДС);
			Структура.Вставить("Организация",					ДокВозвратТоваровОтПокупателя.Организация);
			Структура.Вставить("ОрганизацияПолучатель",			ДокВозвратТоваровОтПокупателя.Организация);
			Структура.Вставить("ВалютаДокумента",				ДокВозвратТоваровОтПокупателя.ВалютаДокумента);
			Структура.Вставить("ВидСчетаФактуры",				Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
			Структура.Вставить("Выставлен",						Истина);
			Структура.Вставить("Контрагент",					ДокВозвратТоваровОтПокупателя.Контрагент);
			Структура.Вставить("ДоговорКонтрагента",			ДокВозвратТоваровОтПокупателя.ДоговорКонтрагента);
			Структура.Вставить("ДокументОснование",				ДокВозвратТоваровОтПокупателя);
			Структура.Вставить("ЕстьПрослеживаемыеТовары",		Ложь); // прослеживаемый
			Структура.Вставить("КодВидаОперации",				"01");
			Структура.Вставить("КодВидаОперацииНаУменьшение",	"18");
			Структура.Вставить("КодСпособаВыставления",			1);
			Структура.Вставить("КППКонтрагента",				ДокВозвратТоваровОтПокупателя.Контрагент.КПП);
			Структура.Вставить("ПредставлениеНомера",			Структура.Номер);
			
			Структура.Вставить("Ответственный",					Ответственный);
			Структура.Вставить("Комментарий",					КомментарийШаблон);
			
		КонецЕсли;
	#КонецОбласти
		
	ИначеЕсли ВидДокумента = "СчетНаОплатуПокупателю" Тогда
	#Область СчетНаОплатуПокупателю
		Если ЧастьДокумента = "ПродажаСчетПокупателя_ШапкаДокумента" Тогда
						Структура.Вставить("ВидДокумента",					"СчетНаОплатуПокупателю");
			х = х + 1;	Структура.Вставить("ОрганизацияИНН",			Массив[х]);
			х = х + 1;	Структура.Вставить("ПризнакТорговойПлощадки",	СокрЛП(Массив[х]));
			Если Структура.ПризнакТорговойПлощадки = "удаление" Тогда
				х = х + 1;	Структура.Вставить("Номер", 					Массив[х]);
				х = х + 1;	Структура.Вставить("КодРСДокумент",				Число(Массив[х]));
				х = х + 1;	Структура.Вставить("Дата", 						КонецДня(ТекущаяДата()));
							Структура.Вставить("Статус",					"удаление");
							
				Док = НайтиДокументПоКодуРС(Структура);
				Если Док = Неопределено Тогда
					//ЗарегистрироватьИзменение("Док реализация: " + СокрЛП(Структура.Номер) + "-" + СокрЛП(Структура.КодРСДокумент) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.Удален, ТекущаяДата(), , "Документ.РеализацияТоваровУслуг");
					ЗарегистрироватьИзменение("Док счет на оплату: " + СокрЛП(Структура.Номер) + "-" + СокрЛП(Структура.КодРСДокумент) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), , "Документ.СчетНаОплатуПокупателю");
				Иначе
					// проверим на дату запрета редактирования
					Если Док.Дата <= ДатаЗапретаРедактированияДляПользователя Тогда
						СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПоДатеЗапрета");
						ЗарегистрироватьИзменение(Док, Перечисления.СобытияЗагрузки.ДатаЗапретаУдаление, ТекущаяДата(), Док.Дата, "Документ.СчетНаОплатуПокупателю");
						ТекстОшибки = "Документ в закрытом периоде. Перемещен в ошибки по дате.";
						ЭлементыПути = СтрРазделить(ИмяФайла, "\", Ложь);
						ЗарегистрироватьОшибку( Новый Структура("ТекОб, ИмяФайла, ТекущаяДата, ОписаниеОшибки, ID_Документа, Номер", Док, ЭлементыПути[ЭлементыПути.ВГраница()], ТекущаяДата(), ТекстОшибки, Структура.КодРСДокумент, "" ) );
						Возврат Неопределено;
					Иначе
						//ЗарегистрироватьИзменение(ДокРеализацияТоваровУслугСсылка, Перечисления.СобытияЗагрузки.Удален, ТекущаяДата(), ДокРеализацияТоваровУслугСсылка.Дата, "Документ.РеализацияТоваровУслуг");
						ЗарегистрироватьИзменение(Док, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), Док.Дата, "Документ.СчетНаОплатуПокупателю");
					КонецЕсли;
				КонецЕсли;
				
			Иначе
							Структура.ПризнакТорговойПлощадки = ?(Структура.ПризнакТорговойПлощадки = "1", ИСТИНА, ЛОЖЬ);
				х = х + 1;	Структура.Вставить("ллл_Номер", 				Массив[х]);
				х = х + 1;	Структура.Вставить("КодРСДокумент",				Число(Массив[х]));
				х = х + 1;	Структура.Вставить("Дата",						СтрокаВДату(Массив[х]) - 3600);

				х = х + 1;	Структура.Вставить("КонтрагентКодРС",			Число(Массив[х]));
				х = х + 1;	Структура.Вставить("КонтрагентИНН",				СокрЛП(Массив[х]));
				х = х + 1;	Структура.Вставить("КонтрагентКПП",				СокрЛП(Массив[х]));
				
				х = х + 1;	Структура.Вставить("ДоговорКонтрагента",		Массив[х]);
				//х = х + 1;	Структура.Вставить("ДоговорКонтрагентаКодРС",	Массив[х]);
				х = х + 1;	Структура.Вставить("ДоговорКонтрагентаНомер",	Массив[х]);
				х = х + 1;	Структура.Вставить("ДоговорКонтрагентаДата",	Массив[х]);
				
				х = х + 1;	Структура.Вставить("ВалютаДокументаКод",		Массив[х]);
				х = х + 1;	Структура.Вставить("КурсВзаиморасчетов",		Массив[х]);
			
				х = х + 1;	Структура.Вставить("СуммаДокумента",			Число(Массив[х]));
				//х = х + 1;	Структура.Вставить("СуммаНДС",		Массив[х]);
							Структура.Вставить("Статус",					"НовыйИзменение");
				
				// проверим на дату запрета редактирования
				Если Структура.Дата <= ДатаЗапретаРедактированияДляПользователя Тогда
					СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПоДатеЗапрета");
					Док = НайтиДокументПоКодуРС(Структура);
					Если Док= Неопределено Тогда
						ЗарегистрироватьИзменение("Док счет на оплату: " + СокрЛП(Структура.ллл_Номер) + "-" + СокрЛП(Структура.КодРСДокумент) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), , "Документ.СчетНаОплатуПокупателю");
					Иначе
						ЗарегистрироватьИзменение(Док, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), Док.Дата, "Документ.СчетНаОплатуПокупателю");
					КонецЕсли;
					ТекстОшибки = "Документ в закрытом периоде. Перемещен в ошибки по дате.";
					ЭлементыПути = СтрРазделить(ИмяФайла, "\", Ложь);
					ЗарегистрироватьОшибку( Новый Структура("ТекОб, ИмяФайла, ТекущаяДата, ОписаниеОшибки, ID_Документа, Номер", Док, ЭлементыПути[ЭлементыПути.ВГраница()], ТекущаяДата(), ТекстОшибки, Структура.КодРСДокумент, Структура.ллл_Номер ) );
					Возврат Неопределено;
				КонецЕсли;
				Если глПериодОбработки <> Неопределено И НЕ (Структура.Дата >= глПериодОбработки.ДатаНачала И Структура.Дата <= глПериодОбработки.ДатаОкончания) Тогда
					СтруктураОшибок.Вставить("ТипОшибки", "ОграничениеПоПериоду");
					Возврат Неопределено;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Структура.ДоговорКонтрагентаДата) Тогда
					Структура.Вставить("ДоговорКонтрагентаДата",		СтрокаВДату(Структура.ДоговорКонтрагентаДата));
				КонецЕсли;
				
				// Лопатин. Признак торговой площадки не приходит из РС. Решили всегда искать по РС Торговые площадки, в случае отсутствия записей - ищём Контрагента по коду РС и наименованию договора.
				СтруктураПоиска = Новый Структура("КодРС, НаименованиеДоговораВРС", Структура.КонтрагентКодРС, Структура.ДоговорКонтрагента);
				Стр = НайтиЭлементСправочника("ТорговыеПлощадки", "КодРС", Ложь, СтруктураПоиска, "", "");
				Если Стр.Контрагент <> Неопределено И Стр.ДоговорКонтрагента <> Неопределено
					И Стр.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
					//не надо формировать счета по торговым площадкам
					СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаТорговаяПлощадкаСчетНаОплату");
					Возврат Неопределено;
				Иначе
					Структура.Вставить("ВалютаДокумента",			НайтиЭлементСправочника("Валюты", "Код", Ложь, , Структура.ВалютаДокументаКод,));
					Структура.Вставить("Контрагент",				НайтиЭлементСправочника("Контрагенты", "КодРС", Ложь, , Структура.КонтрагентКодРС, ""));

					Если Структура.Контрагент = Неопределено Тогда
						//Структура.Вставить("Контрагент",		НайтиЭлементСправочника("ллл_КонтрагентыРС", "ИНН-КПП", Ложь, , Структура, ""));
						Структура.Вставить("Контрагент",	НайтиЭлементСправочника("ллл_КонтрагентыРС", "КодРС", Ложь, , Структура.КонтрагентКодРС, ""));
						Если НЕ Структура.Контрагент = Неопределено Тогда
							Структура.Вставить("ВидДоговораСКонтрагентом",	Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
							Структура.Вставить("НаименованиеДоговора",		"Договор с покупателем");
							
							// создадим контрагента
							Контрагент = СоздатьКонтрагента(Структура);
							Структура.Вставить("Контрагент",	Контрагент);
							
							// создадим договор с контрагентом
							//Договор = СоздатьДоговорКонтрагента(Структура);
							//Структура.Вставить("Договор",		Договор);
						КонецЕсли;
					КонецЕсли;
					
					Если Структура.Контрагент <> Неопределено Тогда
						Если Структура.Контрагент.СтранаРегистрации = Справочники.СтраныМира.Россия
							И Структура.ВалютаДокументаКод <> "643" Тогда
							Структура.Вставить("РасчетыВУсловныхЕдиницах", Истина);
						КонецЕсли;
						Структура.Вставить("ВидДоговора",				Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
						Структура.Вставить("ДоговорКонтрагента",		НайтиЭлементСправочника("ДоговорыКонтрагентов", "НаименованиеВладельца", Ложь, Структура, ,));
						Если НЕ ЗначениеЗаполнено(Структура.ДоговорКонтрагента) Тогда
							// На текущий момент РасчетыВУсловныхЕдиницах - только в валютных договорах,
							// остальные договры - рублёвые.
							НаименованиеДоговора = "Договор в %1" + ?(Структура.ВалютаДокументаКод <> "643", " (оплата в %1)", "");
							НаименованиеДоговора = СтрШаблон(НаименованиеДоговора, Структура.ВалютаДокумента);
							Структура.Вставить("ВидДоговораСКонтрагентом",	Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
							Структура.Вставить("НаименованиеДоговора",		НаименованиеДоговора);
							Структура.Вставить("ДатаДоговора",				Дата(2022, 1, 1));
							Структура.Вставить("НомерДоговора",				"1");
							Договор = СоздатьДоговорКонтрагента(Структура);
							Структура.Вставить("ДоговорКонтрагента", Договор);
						КонецЕсли;
					Иначе
						Структура.Вставить("Контрагент",				Справочники.Контрагенты.ПустаяСсылка());
					КонецЕсли;
					
					Если Структура.ВалютаДокумента = ВалютаДоллар ИЛИ Структура.ВалютаДокумента = ВалютаЕвро Тогда
						Структура.Вставить("КурсВзаиморасчетов",				Структура.КурсВзаиморасчетов);	// КурсВалюты;
						Структура.Вставить("КратностьВзаиморасчетов",			1);
					Иначе	// 643 - Российский рубль
						Структура.Вставить("КурсВзаиморасчетов",				0);
						Структура.Вставить("КратностьВзаиморасчетов",			0);
					КонецЕсли;
					Структура.Вставить("Организация",				НайтиЭлементСправочника("Организации", "ИНН", Ложь, , Структура.ОрганизацияИНН, ""));
					Структура.Вставить("ОрганизацияПолучатель",		Структура.Организация);
					Структура.Вставить("ГлавныйБухгалтер",			ГлавныйБухгалтер);	// Справочник.ФизическиеЛица (Абрамова Галина Анатольевна)
					Структура.Вставить("ДокументБезНДС",			Ложь);
					Структура.Вставить("ДополнительныеУсловия",		НайтиЭлементСправочника("ДополнительныеУсловия", "Наименование", Ложь, , "Типовые условия",)); // Справочник.ДополнительныеУсловия (Типовые условия)
					Структура.Вставить("Руководитель",				Руководитель);
					Структура.Вставить("СтруктурнаяЕдиница",		Организация.ОсновнойБанковскийСчет);	// Справочник.БанковскиеСчета (40702810538000107993, ПАО СБЕРБАНК)
					Структура.Вставить("СуммаВключаетНДС",			Истина);
					Структура.Вставить("Ответственный",				Ответственный);
					Структура.Вставить("Комментарий",				КомментарийШаблон);
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ЧастьДокумента = "СчетПокупателяПродажа_ТЧ_Документа" Тогда
			х = х + 1;	Структура.Вставить("Артикул",		Массив[х]);
			х = х + 1;	Структура.Вставить("Количество",	Число(Массив[х]));
			х = х + 1;	Структура.Вставить("Цена",			Число(Массив[х]));
			х = х + 1;	Структура.Вставить("Сумма",			Число(Массив[х]));
			х = х + 1;	Структура.Вставить("СтавкаНДС",		?(Массив[х] = "20",Перечисления.СтавкиНДС.НДС20, ""));
			х = х + 1;	Структура.Вставить("СуммаНДС",		Число(Массив[х]));
			х = х + 1;	Структура.Вставить("Номенклатура",	НайтиЭлементСправочника("Номенклатура", "Артикул", Ложь, , Структура.Артикул, ""));
			
			Если Структура.Номенклатура = Неопределено Тогда	// не найдена номенклатура
				ПеремещатьФайлыПослеУспешнойОбработки = Ложь;
			Иначе
				Если ДокСчетНаОплатуПокупателю = Неопределено Тогда
					//ОшибкаВСтруктуре, проверьте структуру выгруженных файлов
					СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаВСтруктуре");
					Возврат Неопределено;
				Иначе
					Если ДокСчетНаОплатуПокупателю.ВалютаДокумента = ВалютаДоллар ИЛИ ДокСчетНаОплатуПокупателю.ВалютаДокумента = ВалютаЕвро Тогда
						Структура.Вставить("СтавкаНДС",				Перечисления.СтавкиНДС.НДС0);
						//Структура.Вставить("Цена",				Окр(Структура.Цена / ДокРеализацияТоваровУслуг.КурсВзаиморасчетов, 2, 1));
						//Структура.Вставить("Сумма",				Окр(Структура.Сумма / ДокРеализацияТоваровУслуг.КурсВзаиморасчетов, 2, 1));
						//Структура.Вставить("СуммаНДС",			0);
						//Структура.Вставить("Всего",				Окр(Структура.Всего / ДокРеализацияТоваровУслуг.КурсВзаиморасчетов, 2, 1));
					Иначе	// 643 - Российский рубль
						Структура.Вставить("СтавкаНДС",				?(Структура.СтавкаНДС="0", Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.НДС20));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	#КонецОбласти
		
	ИначеЕсли ВидДокумента = "ПоступлениеТоваровУслуг" Тогда
	#Область ПоступлениеТоваровУслуг
		Если ЧастьДокумента = "Поступление_ШапкаДокумента" Тогда
			Структура.Вставить("ВидОперации",				Перечисления.ВидыОперацийРеализацияТоваров.Товары);
			х = х + 1;	Структура.Вставить("ОрганизацияИНН",			Массив[х]);
			х = х + 1;	Структура.Вставить("ОбменПоЭДО",				Массив[х]);
			х = х + 1;	Структура.Вставить("Дата",						СтрокаВДату(Массив[х]) - 3600);
			х = х + 1;	Структура.Вставить("НомерВходящегоДокумента", 					Массив[х]);
			х = х + 1;	//Структура.Вставить("НомерВходящегоДокумента", 	Массив[х]);
			х = х + 1;	Структура.Вставить("СкладКод",					Число(Массив[х]));
			х = х + 1;	Структура.Вставить("КонтрагентИНН",				Массив[х]);
			х = х + 1;	Структура.Вставить("КонтрагентКПП",				Массив[х]);
			х = х + 1;	Структура.Вставить("КонтрагентКодРС",			Число(Массив[х]));
			х = х + 1;	Структура.Вставить("ДоговорКонтрагента",		Массив[х]);
			х = х + 1;	Структура.Вставить("ДоговорКонтрагентаНомер",	Массив[х]);
			х = х + 1;	Структура.Вставить("ДоговорКонтрагентаДата",	Массив[х]);
			х = х + 1;	Структура.Вставить("СуммаВключаетНДС",			Массив[х]);
			х = х + 1;	Структура.Вставить("ВалютаДокументаКод",		Массив[х]);
			х = х + 1;	Структура.Вставить("КурсВзаиморасчетов",		Число(Массив[х]));
			х = х + 1;	Структура.Вставить("ГрузополучательИНН",		Массив[х]);
			х = х + 1;	Структура.Вставить("ГрузополучательКПП",		Массив[х]);
			х = х + 1;	Структура.Вставить("ГрузополучательКодРС",		Число(Массив[х]));
			//х = х + 1;	Структура.Вставить("НомерВходящегоДокумента",	Массив[х]);

			// проверим на дату запрета редактирования
			Если Структура.Дата <= ДатаЗапретаРедактированияДляПользователя Тогда
				СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПоДатеЗапрета");
				Результат = НайтиДокумент(ВидДокумента, Структура);
				Если Результат = Неопределено Тогда
					ЗарегистрироватьИзменение("Док поступление: " + СокрЛП(Структура.НомерВходящегоДокумента) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), ДокПоступлениеТоваровУслуг.Дата, "Документ.ПоступлениеТоваровУслуг");
				Иначе
					ЗарегистрироватьИзменение(Результат.Ссылка, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), Результат.Дата, "Документ.ПоступлениеТоваровУслуг");
				КонецЕсли;
				Возврат Неопределено;
			КонецЕсли;
			Если глПериодОбработки <> Неопределено И НЕ (Структура.Дата >= глПериодОбработки.ДатаНачала И Структура.Дата <= глПериодОбработки.ДатаОкончания) Тогда
				СтруктураОшибок.Вставить("ТипОшибки", "ОграничениеПоПериоду");
				Возврат Неопределено;
			КонецЕсли;
			
			// проверим грузополучателя. 16069 - это новый ИТ проект(московская поставка), остальные не обрабатываем
			Если НЕ Число(Структура.ГрузополучательКодРС) = 16069 Тогда
				СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаНеМосковскаяПоставка");
				Возврат Неопределено;
			КонецЕсли;
			
			Структура.Вставить("Организация",				НайтиЭлементСправочника("Организации", "ИНН", Ложь, , Структура.ОрганизацияИНН, ""));
			Структура.Вставить("Склад",						НайтиЭлементСправочника("Склады", "КодРС", Ложь, , Структура.СкладКод,));
			Структура.Вставить("ВалютаДокумента",			НайтиЭлементСправочника("Валюты", "Код", Ложь, , Структура.ВалютаДокументаКод,));
			
			Структура.Вставить("Контрагент",				НайтиЭлементСправочника("Контрагенты", "КодРС", Ложь, , Структура.КонтрагентКодРС, ""));
			
			Если Структура.Контрагент = Неопределено Тогда
				// создадим контрагента
				Структура.Вставить("Контрагент",	НайтиЭлементСправочника("ллл_КонтрагентыРС", "КодРС", Ложь, , Структура.КонтрагентКодРС, ""));
				Контрагент = СоздатьКонтрагента(Структура);
				Структура.Вставить("Контрагент",	Контрагент);
				
				Структура.Вставить("ВидДоговораСКонтрагентом",	Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
				Структура.Вставить("НаименованиеДоговора",		"Договор с поставщиком");
				// создадим договор с контрагентом
				Договор = СоздатьДоговорКонтрагента(Структура);
				Структура.Вставить("Договор",		Договор);
			КонецЕсли;
			
			Если НЕ Структура.Контрагент = Неопределено Тогда
				Структура.Вставить("ВидДоговора",				Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
				Структура.Вставить("ДоговорКонтрагента",		НайтиЭлементСправочника("ДоговорыКонтрагентов", "НаименованиеВладельца", Ложь, Структура, ,));
			КонецЕсли;
			
			Структура.Вставить("Грузополучатель",				НайтиЭлементСправочника("Контрагенты", "КодРС", Ложь, , Структура.ГрузополучательКодРС, ""));
			
			Структура.Вставить("БанковскийСчетОрганизации",	Организация.ОсновнойБанковскийСчет);
			Структура.Вставить("СпособЗачетаАвансов",		Перечисления.СпособыЗачетаАвансов.Автоматически);

			Структура.Вставить("ЭтоУниверсальныйДокумент",	Ложь);
			Структура.Вставить("НомерВходящегоДокумента",	Структура.НомерВходящегоДокумента);
			Структура.Вставить("ДатаВходящегоДокумента",	КонецДня(Структура.Дата - 50400));
			Структура.Вставить("Ответственный",				Ответственный);
			Структура.Вставить("Комментарий",				СтрШаблон("Контрагент: %1, склад: %2. %3", Структура.КонтрагентКодРС, Структура.СкладКод, КомментарийШаблон));
			
			Если Структура.ВалютаДокумента = ВалютаДоллар ИЛИ Структура.ВалютаДокумента = ВалютаЕвро Тогда
				Структура.Вставить("СчетУчетаРасчетовСКонтрагентом",	ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ);
				Структура.Вставить("СчетУчетаРасчетовПоАвансам",		ПланыСчетов.Хозрасчетный.ПустаяСсылка());
				СтрВалюта = ПолучитьКурсВалюты(Структура.Дата, Структура.ВалютаДокумента);
				Структура.Вставить("КурсВзаиморасчетов",				СтрВалюта.КурсВзаиморасчетов);
				Структура.Вставить("КратностьВзаиморасчетов",			СтрВалюта.КратностьВзаиморасчетов);
			Иначе	// 643 - Российский рубль
				Структура.Вставить("СпособЗачетаАвансов",				Перечисления.СпособыЗачетаАвансов.Автоматически);
				Структура.Вставить("СчетУчетаРасчетовСКонтрагентом",	ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
				Структура.Вставить("СчетУчетаРасчетовПоАвансам",		ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
				Структура.Вставить("КурсВзаиморасчетов",		1);
				Структура.Вставить("КратностьВзаиморасчетов",	1);
			КонецЕсли;
			
		ИначеЕсли ЧастьДокумента = "Поступление_ТЧ_Документа" Тогда
			х = х + 1;	Структура.Вставить("Артикул",					Массив[х]);
			х = х + 1;	Структура.Вставить("Количество",				Массив[х]);
			х = х + 1;	Структура.Вставить("Цена",						Массив[х]);
			х = х + 1;	Структура.Вставить("Сумма",						Массив[х]);
			х = х + 1;	Структура.Вставить("СтавкаНДС",					?(Массив[х] = "20",Перечисления.СтавкиНДС.НДС20, ""));
			х = х + 1;	Структура.Вставить("СуммаНДС",					Массив[х]);
			х = х + 1;	Структура.Вставить("Всего",						Массив[х]);
			х = х + 1;	Структура.Вставить("НомерГТД",					НайтиЭлементСправочника("НомераГТД", "Код", Истина, , Массив[х], ""));
			х = х + 1;	Структура.Вставить("СтранаПроисхожденияКод",	Массив[х]);
			
			Структура.Вставить("Номенклатура",				НайтиЭлементСправочника("Номенклатура", "Артикул", Ложь, , Структура.Артикул, ""));
			Если Структура.Номенклатура = Неопределено Тогда	// не найдена номенклатура
				ПеремещатьФайлыПослеУспешнойОбработки = Ложь;
			Иначе
				Структура.Вставить("СтранаПроисхождения",		НайтиЭлементСправочника("СтраныМира", "Код", Ложь, , Структура.СтранаПроисхожденияКод, ""));
				Структура.Вставить("СчетУчета",					ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
				Структура.Вставить("СчетУчетаНДС",				ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ);
				Структура.Вставить("ПрослеживаемыйТовар",		?(Структура.Номенклатура.ПрослеживаемыйТовар, Истина, Ложь));
			КонецЕсли;

		КонецЕсли;
	#КонецОбласти
			
	ИначеЕсли ВидДокумента = "СчетФактураПолученный" Тогда
	#Область СчетФактураПолученный
		Если ЧастьДокумента = "Поступление_СчетФактураПолученный" Тогда
			Структура.Вставить("Организация",							ДокПоступлениеТоваровУслуг.Организация);
			Структура.Вставить("ОрганизацияПолучатель",					ДокПоступлениеТоваровУслуг.Организация);
			Структура.Вставить("ВидСчетаФактуры",						Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
			х = х + 1;	Структура.Вставить("Номер", 					СокрЛП(Массив[х]));
			х = х + 1;	Структура.Вставить("Дата",						СтрокаВДату(Массив[х]) - 3600);
			х = х + 1;	Структура.Вставить("НомерВходящегоДокумента",	Массив[х]);
			х = х + 1;	Структура.Вставить("ДатаВходящегоДокумента",	Массив[х]);
			х = х + 1;	Структура.Вставить("КодВидаОперации",			Массив[х]);
			х = х + 1;	Структура.Вставить("КодСпособаПолучения",		Число(Массив[х]));
			х = х + 1;	Структура.Вставить("СуммаДокумента",			Число(Массив[х]));
			х = х + 1;	Структура.Вставить("СуммаУвеличение",			Число(Массив[х]));
			х = х + 1;	Структура.Вставить("СуммаУменьшение",			Число(Массив[х]));
			х = х + 1;	Структура.Вставить("СуммаНДСДокумента",			Число(Массив[х]));
			х = х + 1;	Структура.Вставить("СуммаНДСУвеличение",		Число(Массив[х]));
			х = х + 1;	Структура.Вставить("СуммаНДСУменьшение",		Число(Массив[х]));
			х = х + 1;	Структура.Вставить("СчетФактураБезНДС",			?(Массив[х] = "Истина", Истина, Ложь));
			х = х + 1;	Структура.Вставить("ВидСчетаФактуры",			Массив[х]);
			х = х + 1;	Структура.Вставить("НДСПредъявленКВычету",		Истина);	// ?(Массив[х]="Истина", Истина, Ложь));

						Структура.Вставить("ВалютаДокумента",			ДокПоступлениеТоваровУслуг.ВалютаДокумента);
						Структура.Вставить("ГлавныйБухгалтер",			ГлавныйБухгалтер);
						Структура.Вставить("Контрагент",				ДокПоступлениеТоваровУслуг.Контрагент);
						Структура.Вставить("ДоговорКонтрагента",		ДокПоступлениеТоваровУслуг.ДоговорКонтрагента);
						Структура.Вставить("Руководитель",				Руководитель);
						Структура.Вставить("СтруктурнаяЕдиница",		Организация.ОсновнойБанковскийСчет);
						Структура.Вставить("СуммаВключаетНДС",			ДокПоступлениеТоваровУслуг.СуммаВключаетНДС);
						Структура.Вставить("Ответственный",				Ответственный);
						Структура.Вставить("Комментарий",				КомментарийШаблон);
		КонецЕсли;
	#КонецОбласти
		
	ИначеЕсли ВидДокумента = "СчетНаОплатуПоставщика" Тогда
	#Область СчетНаОплатуПоставщика
		Если ЧастьДокумента = "СчетЗакупка_ШапкаДокумента" Тогда
						Структура.Вставить("ВидДокумента",				"СчетНаОплатуПоставщика");
			х = х + 1;	Структура.Вставить("ОрганизацияИНН",			Массив[х]);
			Если Структура.ОрганизацияИНН = "удаление" Тогда
				х = х + 1;	Структура.Вставить("Номер", 					Массив[х]);
				х = х + 1;	Структура.Вставить("КодРСДокумент",				Число(Массив[х]));
				х = х + 1;	Структура.Вставить("Дата", 						КонецДня(ТекущаяДата()));
							Структура.Вставить("Статус",					"удаление");
							
				Док = НайтиДокументПоКодуРС(Структура);
				Если Док = Неопределено Тогда
					ЗарегистрироватьИзменение("Док счет на оплату поставщика: " + СокрЛП(Структура.Номер) + "-" + СокрЛП(Структура.КодРСДокумент) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), , "Документ.СчетНаОплатуПоставщика");
				Иначе
					// проверим на дату запрета редактирования
					Если Док.Дата <= ДатаЗапретаРедактированияДляПользователя Тогда
						СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПоДатеЗапрета");
						ЗарегистрироватьИзменение(Док, Перечисления.СобытияЗагрузки.ДатаЗапретаУдаление, ТекущаяДата(), Док.Дата, "Документ.СчетНаОплатуПоставщика");
						Возврат Неопределено;
					Иначе
						ЗарегистрироватьИзменение(Док, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), Док.Дата, "Документ.СчетНаОплатуПоставщика");
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				х = х + 1;	Структура.Вставить("НомерВходящегоДокумента", 	Массив[х]);
				х = х + 1;	Структура.Вставить("КодРСДокумент",				Число(Массив[х]));
				х = х + 1;	Структура.Вставить("Дата",						СтрокаВДату(Массив[х]) - 3600);
							Структура.Вставить("ДатаВходящегоДокумента",	Структура.Дата);

				х = х + 1;	Структура.Вставить("КонтрагентКодРС",			Число(Массив[х]));
				х = х + 1;	Структура.Вставить("КонтрагентИНН",				СокрЛП(Массив[х]));
				х = х + 1;	Структура.Вставить("КонтрагентКПП",				СокрЛП(Массив[х]));
				
				х = х + 1;	Структура.Вставить("ДоговорКонтрагента",		Массив[х]);
				х = х + 1;	Структура.Вставить("ДоговорКонтрагентаИД",		Массив[х]);
				х = х + 1;	Структура.Вставить("ДоговорКонтрагентаНомер",	Массив[х]);
				х = х + 1;	Структура.Вставить("ДоговорКонтрагентаДата",	Массив[х]);
				
				х = х + 1;	Структура.Вставить("ВалютаДокументаКод",		Массив[х]);
				х = х + 1;	Структура.Вставить("КурсВзаиморасчетов",		Массив[х]);
			
				х = х + 1;	Структура.Вставить("СуммаДокумента",			Число(Массив[х]));
								Структура.Вставить("Статус",				"НовыйИзменение");
				
				// проверим на дату запрета редактирования
				Если Структура.Дата <= ДатаЗапретаРедактированияДляПользователя Тогда
					СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПоДатеЗапрета");
					Док = НайтиДокументПоКодуРС(Структура);
					Если Док= Неопределено Тогда
						ЗарегистрироватьИзменение("Док счет на оплату поставщика: " + СокрЛП(Структура.НомерВходящегоДокумента) + "-" + СокрЛП(Структура.КодРСДокумент) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), , "Документ.СчетНаОплатуПоставщика");
					Иначе
						ЗарегистрироватьИзменение(Док, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), Док.Дата, "Документ.СчетНаОплатуПоставщика");
					КонецЕсли;
					Возврат Неопределено;
				КонецЕсли;
				Если глПериодОбработки <> Неопределено И НЕ (Структура.Дата >= глПериодОбработки.ДатаНачала И Структура.Дата <= глПериодОбработки.ДатаОкончания) Тогда
					СтруктураОшибок.Вставить("ТипОшибки", "ОграничениеПоПериоду");
					Возврат Неопределено;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Структура.ДоговорКонтрагентаДата) Тогда
					Структура.Вставить("ДоговорКонтрагентаДата",		СтрокаВДату(Структура.ДоговорКонтрагентаДата));
				КонецЕсли;
				
				// Лопатин. Признак торговой площадки не приходит из РС. Решили всегда искать по РС Торговые площадки, в случае отсутствия записей - ищём Контрагента по коду РС и наименованию договора.
				СтруктураПоиска = Новый Структура("КодРС, НаименованиеДоговораВРС", Структура.КонтрагентКодРС, Структура.ДоговорКонтрагента);
				Стр = НайтиЭлементСправочника("ТорговыеПлощадки", "КодРС", Ложь, СтруктураПоиска, "", "");
				Если Стр.Контрагент <> Неопределено Тогда
					Структура.Вставить("Контрагент",				Стр.Контрагент);
					Структура.Вставить("ДоговорКонтрагента",		Стр.ДоговорКонтрагента);
				Иначе
					Структура.Вставить("ВалютаДокумента",			НайтиЭлементСправочника("Валюты", "Код", Ложь, , Структура.ВалютаДокументаКод,));
					Структура.Вставить("Контрагент",				НайтиЭлементСправочника("Контрагенты", "КодРС", Ложь, , Структура.КонтрагентКодРС, ""));

					Если Структура.Контрагент = Неопределено Тогда
						Структура.Вставить("Контрагент",	НайтиЭлементСправочника("ллл_КонтрагентыРС", "КодРС", Ложь, , Структура.КонтрагентКодРС, ""));
						Если НЕ Структура.Контрагент = Неопределено Тогда
							Структура.Вставить("ВидДоговораСКонтрагентом",	Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
							Структура.Вставить("НаименованиеДоговора",		"Договор с покупателем");
							
							// создадим контрагента
							Контрагент = СоздатьКонтрагента(Структура);
							Структура.Вставить("Контрагент",	Контрагент);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
					
				Если Структура.Контрагент <> Неопределено Тогда
					Если Структура.Контрагент.СтранаРегистрации = Справочники.СтраныМира.Россия
						И Структура.ВалютаДокументаКод <> "643" Тогда
						Структура.Вставить("РасчетыВУсловныхЕдиницах", Истина);
					КонецЕсли;
					Если НЕ (Структура.Свойство("ДоговорКонтрагента") И ЗначениеЗаполнено(Структура.ДоговорКонтрагента)) Тогда
						Структура.Вставить("ВидДоговора",				Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
						Структура.Вставить("ДоговорКонтрагента",		НайтиЭлементСправочника("ДоговорыКонтрагентов", "НаименованиеВладельца", Ложь, Структура, ,));
						Если НЕ ЗначениеЗаполнено(Структура.ДоговорКонтрагента) Тогда
							// На текущий момент РасчетыВУсловныхЕдиницах - только в валютных договорах,
							// остальные договры - рублёвые.
							НаименованиеДоговора = "Договор в %1" + ?(Структура.Свойство("РасчетыВУсловныхЕдиницах")
																		И Структура.РасчетыВУсловныхЕдиницах <> Истина, " (оплата в %1)", "");
							НаименованиеДоговора = СтрШаблон(НаименованиеДоговора, Структура.ВалютаДокумента);
							Структура.Вставить("ВидДоговораСКонтрагентом",	Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
							Структура.Вставить("НаименованиеДоговора",		НаименованиеДоговора);
							Структура.Вставить("ДатаДоговора",				Дата(2022, 1, 1));
							Структура.Вставить("НомерДоговора",				"1");
							Договор = СоздатьДоговорКонтрагента(Структура);
							Структура.Вставить("ДоговорКонтрагента", Договор);
						КонецЕсли;
					КонецЕсли;
				Иначе
					Структура.Вставить("Контрагент",				Справочники.Контрагенты.ПустаяСсылка());
				КонецЕсли;
				
				Если Структура.ВалютаДокумента = ВалютаДоллар ИЛИ Структура.ВалютаДокумента = ВалютаЕвро Тогда
					Структура.Вставить("КурсВзаиморасчетов",				Структура.КурсВзаиморасчетов);	// КурсВалюты;
					Структура.Вставить("КратностьВзаиморасчетов",			1);
				Иначе	// 643 - Российский рубль
					Структура.Вставить("КурсВзаиморасчетов",				0);
					Структура.Вставить("КратностьВзаиморасчетов",			0);
				КонецЕсли;
				Структура.Вставить("Организация",				НайтиЭлементСправочника("Организации", "ИНН", Ложь, , Структура.ОрганизацияИНН, ""));
				Структура.Вставить("ОрганизацияПолучатель",		Структура.Организация);
				Структура.Вставить("ГлавныйБухгалтер",			ГлавныйБухгалтер);	// Справочник.ФизическиеЛица (Абрамова Галина Анатольевна)
				Структура.Вставить("ДокументБезНДС",			Ложь);
				Структура.Вставить("ДополнительныеУсловия",		НайтиЭлементСправочника("ДополнительныеУсловия", "Наименование", Ложь, , "Типовые условия",)); // Справочник.ДополнительныеУсловия (Типовые условия)
				Структура.Вставить("Руководитель",				Руководитель);
				Структура.Вставить("СтруктурнаяЕдиница",		Организация.ОсновнойБанковскийСчет);	// Справочник.БанковскиеСчета (40702810538000107993, ПАО СБЕРБАНК)
				Структура.Вставить("СуммаВключаетНДС",			Истина);
				Структура.Вставить("Ответственный",				Ответственный);
				Структура.Вставить("Комментарий",				КомментарийШаблон);
			КонецЕсли;

		ИначеЕсли ЧастьДокумента = "СчетЗакупка_ТЧ_Документа" Тогда
			х = х + 1;	Структура.Вставить("Артикул",		Массив[х]);
			х = х + 1;	Структура.Вставить("Количество",	Число(Массив[х]));
			х = х + 1;	Структура.Вставить("Цена",			Число(Массив[х]));
			х = х + 1;	Структура.Вставить("Сумма",			Число(Массив[х]));
			х = х + 1;	Структура.Вставить("СтавкаНДС",		?(Массив[х] = "20",Перечисления.СтавкиНДС.НДС20, ""));
			х = х + 1;	Структура.Вставить("СуммаНДС",		Число(Массив[х]));
			х = х + 1;	Структура.Вставить("Номенклатура",	НайтиЭлементСправочника("Номенклатура", "Артикул", Ложь, , Структура.Артикул, ""));
			
			Если Структура.Номенклатура = Неопределено Тогда	// не найдена номенклатура
				ПеремещатьФайлыПослеУспешнойОбработки = Ложь;
			Иначе
				Если ДокСчетНаОплатуПокупателю = Неопределено Тогда
					//ОшибкаВСтруктуре, проверьте структуру выгруженных файлов
					СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаВСтруктуре");
					Возврат Неопределено;
				Иначе
					Если ДокСчетНаОплатуПокупателю.ВалютаДокумента = ВалютаДоллар ИЛИ ДокСчетНаОплатуПокупателю.ВалютаДокумента = ВалютаЕвро Тогда
						Структура.Вставить("СтавкаНДС",				Перечисления.СтавкиНДС.НДС0);
					Иначе	// 643 - Российский рубль
						Структура.Вставить("СтавкаНДС",				?(Структура.СтавкаНДС="0", Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.НДС20));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	#КонецОбласти
		
	ИначеЕсли ВидДокумента = "ВозвратТоваровОтПокупателя" Тогда
	#Область ВозвратТоваровОтПокупателя
		Если ЧастьДокумента = "Возврат_Продажа_ШапкаДокумента" Тогда
						Структура.Вставить("ВидОперации",				Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Товары);
			х = х + 1;	Структура.Вставить("ОрганизацияИНН",			Массив[х]);
			х = х + 1;	Структура.Вставить("ОбменПоЭДО",				Массив[х]);
						Структура.Вставить("ВидДокумента",				"ВозвратТоваровОтПокупателя");
			Если Структура.ОбменПоЭДО = "удаление" Тогда
				х = х + 1;	Структура.Вставить("Номер", 					Массив[х]);
				х = х + 1;	Структура.Вставить("КодРСДокумент",				Число(Массив[х]));
				х = х + 1;	Структура.Вставить("Дата", 						КонецДня(ТекущаяДата()));
							Структура.Вставить("Статус",					"удаление");
							
				Док = НайтиДокументПоКодуРС(Структура);
				Если Док = Неопределено Тогда
					//ЗарегистрироватьИзменение("Док реализация: " + СокрЛП(Структура.Номер) + "-" + СокрЛП(Структура.КодРСДокумент) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.Удален, ТекущаяДата(), , "Документ.РеализацияТоваровУслуг");
					ЗарегистрироватьИзменение("Док возврат товаров от покупателя: " + СокрЛП(Структура.Номер) + "-" + СокрЛП(Структура.КодРСДокумент) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), , "Документ.ВозвратТоваровОтПокупателя");
				Иначе
					// проверим на дату запрета редактирования
					Если Док.Дата <= ДатаЗапретаРедактированияДляПользователя Тогда
						СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПоДатеЗапрета");
						ЗарегистрироватьИзменение(Док, Перечисления.СобытияЗагрузки.ДатаЗапретаУдаление, ТекущаяДата(), Док.Дата, "Документ.ВозвратТоваровОтПокупателя");
						Возврат Неопределено;
					Иначе
						//ЗарегистрироватьИзменение(ДокРеализацияТоваровУслугСсылка, Перечисления.СобытияЗагрузки.Удален, ТекущаяДата(), ДокРеализацияТоваровУслугСсылка.Дата, "Документ.РеализацияТоваровУслуг");
						ЗарегистрироватьИзменение(Док, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), Док.Дата, "Документ.ВозвратТоваровОтПокупателя");
					КонецЕсли;
				КонецЕсли;
			Иначе
				х = х + 1;	Структура.Вставить("ПризнакТорговойПлощадки",	?(СокрЛП(Массив[х]) = "ИСТИНА", ИСТИНА, ЛОЖЬ));
				х = х + 1;	Структура.Вставить("НомерЗаказаТорговойПлощадки",Массив[х]);
				х = х + 1;	Структура.Вставить("Дата",						СтрокаВДату(Массив[х]) - 61199);	// 07.00
				х = х + 1;	Структура.Вставить("ллл_Номер", 				Массив[х]);
				х = х + 1;	Структура.Вставить("КодРСДокумент",				Число( Массив[х] ) );
				х = х + 1;	Структура.Вставить("СкладКод",					Число(Массив[х]));
				х = х + 1;	Структура.Вставить("КонтрагентИНН",				Массив[х]);
				х = х + 1;	Структура.Вставить("КонтрагентКПП",				Массив[х]);
				х = х + 1;	Структура.Вставить("КонтрагентКодРС",			Число(Массив[х]));
				х = х + 1;	Структура.Вставить("ДоговорКонтрагента",		Массив[х]);
				х = х + 1;	Структура.Вставить("ДоговорКонтрагентаНомер",	Массив[х]);
				х = х + 1;	Структура.Вставить("ДоговорКонтрагентаДата",	Массив[х]);
				х = х + 1;	Структура.Вставить("СуммаВключаетНДС",			Истина);
				х = х + 1;	Структура.Вставить("СуммаДокумента",			Массив[х]);
				х = х + 1;	Структура.Вставить("ВалютаДокументаКод",		Массив[х]);
				х = х + 1;	Структура.Вставить("КурсВзаиморасчетов",		Число(Массив[х]));
				х = х + 1;	Структура.Вставить("КратностьВзаиморасчетов",	1);
				х = х + 1;	Структура.Вставить("ОтразитьВКнигеПокупок",		Массив[х]);
				х = х + 1;	Структура.Вставить("ПокупателюВыставляетсяКорректировочныйСчетФактура",	Массив[х]);
				х = х + 1;	Структура.Вставить("ПодразделениеОрганизацииКод",						Массив[х]);
				х = х + 1;	Структура.Вставить("ТипЦен",					Массив[х]);
				х = х + 1;	Структура.Вставить("НакладнаяНомерРТУ",			Массив[х]);
				х = х + 1;	Структура.Вставить("НакладнаяДатаРТУ",			СтрокаВДату(Массив[х]) - 3600);
							Структура.Вставить("Статус",					"НовыйИзменение");
							Структура.Вставить("ллл_НомерОтправления",		?( ЗначениеЗаполнено(Структура.НомерЗаказаТорговойПлощадки), НайтиДобавитьНомерОтправления( Структура.НомерЗаказаТорговойПлощадки ), "" ) );

				// проверим на дату запрета редактирования
				Если Структура.Дата <= ДатаЗапретаРедактированияДляПользователя Тогда
					СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПоДатеЗапрета");
					Результат = НайтиДокумент(ВидДокумента, Структура);
					Если Результат = Неопределено Тогда
						ЗарегистрироватьИзменение("Док возврат: " + СокрЛП(Структура.ллл_Номер) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), ДокРеализацияТоваровУслуг.Дата, "Документ.ВозвратТоваровОтПокупателя");
					Иначе
						ЗарегистрироватьИзменение(Результат.Ссылка, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), Результат.Дата, "Документ.ВозвратТоваровОтПокупателя");
					КонецЕсли;
					
					СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПоДатеЗапрета");
					ЗарегистрироватьИзменение(ДокРеализацияТоваровУслугСсылка, Перечисления.СобытияЗагрузки.ДатаЗапретаУдаление, ТекущаяДата(), Результат.Дата, "Документ.ВозвратТоваровОтПокупателя");
					ТекстОшибки = "Документ в закрытом периоде. Перемещен в ошибки по дате.";
					ЭлементыПути = СтрРазделить(ИмяФайла, "\", Ложь);
					ЗарегистрироватьОшибку( Новый Структура("ТекОб, ИмяФайла, ТекущаяДата, ОписаниеОшибки, ID_Документа, Номер", Результат, ЭлементыПути[ЭлементыПути.ВГраница()], ТекущаяДата(), ТекстОшибки, Структура.КодРСДокумент, Структура.ллл_Номер ) );
					
					Возврат Неопределено;
				КонецЕсли;
				Если глПериодОбработки <> Неопределено И НЕ (Структура.Дата >= глПериодОбработки.ДатаНачала И Структура.Дата <= глПериодОбработки.ДатаОкончания) Тогда
					СтруктураОшибок.Вставить("ТипОшибки", "ОграничениеПоПериоду");
					Возврат Неопределено;
				КонецЕсли;
				
				Структура.Вставить("Сделка",			Документы.РеализацияТоваровУслуг.НайтиПоНомеру(Структура.НакладнаяНомерРТУ, Структура.НакладнаяДатаРТУ));
				Если НЕ Структура.Сделка = Неопределено Тогда
					Структура.Вставить("Контрагент",			Структура.Сделка.Контрагент);
					Структура.Вставить("ДоговорКонтрагента",	Структура.Сделка.ДоговорКонтрагента);
					Если ЗначениеЗаполнено(Структура.ДоговорКонтрагента)
						И Структура.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
						Структура.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ОтгруженныеТовары;
					КонецЕсли;
				КонецЕсли;
				
				Структура.Вставить("СчетУчетаРасчетовСКонтрагентом",	ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
				Структура.Вставить("СчетУчетаРасчетовПоТаре",			ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками);
				Структура.Вставить("СчетУчетаРасчетовПоАвансам",		ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
				Структура.Вставить("СчетУчетаНДС",						ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ);

				Структура.Вставить("ОтразитьВКнигеПокупок",									Истина);
				Структура.Вставить("ПокупателюВыставляетсяКорректировочныйСчетФактура",		Истина);
				Структура.Вставить("Организация",				НайтиЭлементСправочника("Организации", "ИНН", Ложь, , Структура.ОрганизацияИНН, ""));
				//Структура.Вставить("Склад",						НайтиЭлементСправочника("Склады", "КодРС", Ложь, , Структура.СкладКод,));
				Структура.Вставить("Склад",						Структура.Сделка.Склад);
				Структура.Вставить("ВалютаДокумента",			НайтиЭлементСправочника("Валюты", "Код", Ложь, , Структура.ВалютаДокументаКод,));
				
				Структура.Вставить("Ответственный",		Ответственный);
				Структура.Вставить("Комментарий",		СтрШаблон("## Склад №: %1, РТУ: %2, от %3. %4.#",
				Структура.СкладКод, Структура.НакладнаяНомерРТУ, Структура.НакладнаяДатаРТУ, КомментарийШаблон));
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ДС.Объект КАК Ссылка,
					|	ВЫРАЗИТЬ(ДС.Объект КАК Документ.ВозвратТоваровОтПокупателя).Номер КАК Номер,
					|	ИСТИНА КАК ЕстьВИБ,
					|	ВЫРАЗИТЬ(ДС.Объект КАК Документ.ВозвратТоваровОтПокупателя).Номер КАК НомерПоследнего
					|ИЗ
					|	РегистрСведений.ДополнительныеСведения КАК ДС
					|ГДЕ
					|	ДС.Объект ССЫЛКА Документ.ВозвратТоваровОтПокупателя
					|	И ДС.Свойство.Имя = ""КодРСДокументы""
					|	И ДС.Значение = &КодРС
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ЕСТЬNULL(ТТ.Ссылка, Т.Ссылка),
					|	НЕОПРЕДЕЛЕНО,
					|	ЛОЖЬ,
					|	ЕСТЬNULL(ТТ.Номер, Т.Номер)
					|ИЗ
					|	Документ.ВозвратТоваровОтПокупателя КАК Т
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДС
					|		ПО Т.Ссылка = ДС.Объект
					|			И (ДС.Свойство.Имя = ""КодРСДокументы"")
					|			И (ДС.Значение = &КодРС)
					|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя КАК ТТ
					|		ПО Т.Ссылка <> ТТ.Ссылка
					|			И (Т.ллл_Номер <> """")
					|			И Т.ллл_Номер = ТТ.ллл_Номер
					|ГДЕ
					|	Т.Номер = &ллл_Номер
					|	И ГОД(Т.Дата) = ГОД(&Дата)
					|	И ДС.Объект ЕСТЬ NULL
					|
					|УПОРЯДОЧИТЬ ПО
					|	ЕстьВИБ УБЫВ,
					|	НомерПоследнего УБЫВ";
				
				Запрос.УстановитьПараметр("Дата", Структура.Дата);
				Запрос.УстановитьПараметр("КодРС", Структура.КодРСДокумент);
				Запрос.УстановитьПараметр("ллл_Номер", Структура.ллл_Номер);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Структура.Вставить("Номер", Структура.ллл_Номер);
				Если Выборка.Следующий() Тогда
					Если Выборка.ЕстьВИБ Тогда
						Структура.Вставить("Ссылка", Выборка.Ссылка);
						Структура.Номер = Выборка.Номер;
					ИначеЕсли ЗначениеЗаполнено(Выборка.НомерПоследнего) Тогда
						Номер = Выборка.НомерПоследнего;
						Суффикс = 1;
						Если СтрНайти(Номер, ".") > 0 Тогда
							СтарСуф = СокрЛП(Сред(Номер, СтрНайти(Номер, ".")+1));
							Если ОбщегоНазначенияКлиентСервер.ЭтоЧисло(СтарСуф) Тогда
								Суффикс = Число(СтарСуф) + 1;
							КонецЕсли;
						КонецЕсли;
						Структура.Номер = СтрШаблон("%1.%2", Структура.ллл_Номер, Суффикс);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЧастьДокумента = "Возврат_Продажа_ТЧ_Документа" Тогда
			х = х + 1;	Структура.Вставить("Артикул",					Массив[х]);
			х = х + 1;	Структура.Вставить("Количество",				Число(Массив[х]));
			х = х + 1;	Структура.Вставить("Цена",						Число(Массив[х]));
			//х = х + 1;	Структура.Вставить("Сумма",						Число(Массив[х]));
			х = х + 1;	Структура.Вставить("Сумма",						Структура.Количество * Структура.Цена);
			х = х + 1;	Структура.Вставить("СтавкаНДС",					?(Массив[х] = "20",Перечисления.СтавкиНДС.НДС20, ""));
						Структура.Вставить("СуммаНДС",					?(ОбщегоНазначенияКлиентСервер.ЭтоЧисло(Массив[х]), Число(Массив[х])/100, 0));
			//х = х + 1;	Структура.Вставить("СуммаНДС",					Число(Массив[х]));
			х = х + 1;	
			х = х + 1;	Структура.Вставить("Себестоимость",				Число(Массив[х]));
			х = х + 1;	Структура.Вставить("НомерГТД",					НайтиЭлементСправочника("НомераГТД", "Код", Ложь, , Массив[х], ""));
			х = х + 1;	Структура.Вставить("СтранаПроисхожденияКод",	Массив[х]);
			х = х + 1;	Структура.Вставить("КодТНВЭД",					НайтиЭлементСправочника("КлассификаторТНВЭД", "Код", Ложь, , Массив[х], ""));

			Структура.Вставить("Номенклатура",				НайтиЭлементСправочника("Номенклатура", "Артикул", Ложь, , Структура.Артикул, ""));
			Если Структура.Номенклатура = Неопределено Тогда	// не найдена номенклатура
				ПеремещатьФайлыПослеУспешнойОбработки = Ложь;
			Иначе
				Структура.Вставить("КодТНВЭД",					Структура.Номенклатура.КодТНВЭД);
				Структура.Вставить("ИсправляемыйДокумент",		ДокВозвратТоваровОтПокупателя.Сделка);
				Структура.Вставить("СчетУчета",					ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);				// 41.01
				Структура.Вставить("ПереданныеСчетУчета",		ПланыСчетов.Хозрасчетный.ПустаяСсылка());
				Структура.Вставить("СчетДоходов",				ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);				// 90.01.1
				Структура.Вставить("СчетРасходов",				ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);	// 90.02.1
				Структура.Вставить("СчетУчетаНДСПоРеализации",	ПланыСчетов.Хозрасчетный.Продажи_НДС);					// 90.03
				Структура.Вставить("СпособУчетаНДС",			Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
				Структура.Вставить("СтранаПроисхождения",		НайтиЭлементСправочника("СтраныМира", "Код", Ложь, , Структура.СтранаПроисхожденияКод, ""));
	
				Структура.Вставить("Субконто",					НайтиЭлементСправочника("НоменклатурныеГруппы", "Наименование", Ложь, , "Торговля розничная, осуществляемая непосредственно при помощи сети Интернет", ""));
				Структура.Вставить("КоличествоПослеИзменения",	0);	// рассчитать исходя из накладной
				Структура.Вставить("СуммаПослеИзменения",		0);	// рассчитать исходя из накладной
				Структура.Вставить("СуммаНДСПослеИзменения",	0);	// рассчитать исходя из накладной
				
				Структура.Вставить("ПрослеживаемыйТовар",		Структура.Номенклатура.ПрослеживаемыйТовар);
				
				Если НЕ ДокВозвратТоваровОтПокупателя.Сделка = Неопределено Тогда
					// всю информацию берем из документа реализация
					Отбор = Новый Структура();
					Отбор.Вставить("Номенклатура", Структура.Номенклатура);
					МассивНайденныхТоваров = ДокВозвратТоваровОтПокупателя.Сделка.Товары.НайтиСтроки(Отбор);
					Для каждого Стр Из МассивНайденныхТоваров Цикл
						Структура.Цена = Стр.Цена;
						Структура.Сумма = Окр( Стр.Цена * Структура.Количество, 2, 1 );
						Структура.Себестоимость = Окр(Стр.Себестоимость / Стр.Количество * Структура.Количество, 2, 1);
						Структура.СтавкаНДС = Стр.СтавкаНДС;
						Структура.СуммаНДС = Окр(Стр.СуммаНДС / Стр.Количество * Структура.Количество, 2, 1);
						Структура.Субконто = Стр.Субконто;
						Структура.НомерГТД = Стр.НомерГТД;
						Структура.СтранаПроисхождения = Стр.СтранаПроисхождения;
						Структура.КодТНВЭД = Стр.КодТНВЭД;
						Структура.СчетУчета = Стр.СчетУчета;
						Структура.ПереданныеСчетУчета = Стр.ПереданныеСчетУчета;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	#КонецОбласти
	
	ИначеЕсли ВидДокумента = "ТребованиеНакладная" Тогда
	#Область ТребованиеНакладная
		Если ЧастьДокумента = "ТребованиеНакладная_ШапкаДокумента" Тогда
						Структура.Вставить("Статус",					"НовыйИзменение");
						Структура.Вставить("ВидОперации",				Перечисления.ВидыОперацийРасходМатериалов.ИспользованиеМатериалов);
			х = х + 1;	Структура.Вставить("ОрганизацияИНН",			Массив[х]);
			х = х + 1;	Структура.Вставить("ОбменПоЭДО",				Массив[х]);
						Структура.Вставить("ВидДокумента",				"ТребованиеНакладная");
			Если Структура.ОбменПоЭДО = "удаление" Тогда
				х = х + 1;	Структура.Вставить("Номер", 					Массив[х]);
				х = х + 1;	Структура.Вставить("КодРСДокумент",				Число(Массив[х]));
				х = х + 1;	Структура.Вставить("Дата", 						КонецДня(ТекущаяДата()));
							Структура.Вставить("Статус",					"удаление");
							
				Док = НайтиДокументПоКодуРС(Структура);
				Если Док = Неопределено Тогда
					//ЗарегистрироватьИзменение("Док реализация: " + СокрЛП(Структура.Номер) + "-" + СокрЛП(Структура.КодРСДокумент) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.Удален, ТекущаяДата(), , "Документ.РеализацияТоваровУслуг");
					ЗарегистрироватьИзменение("Док требование-накладная: " + СокрЛП(Структура.Номер) + "-" + СокрЛП(Структура.КодРСДокумент) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), , "Документ.ТребованиеНакладная");
				Иначе
					// проверим на дату запрета редактирования
					Если Док.Дата <= ДатаЗапретаРедактированияДляПользователя Тогда
						СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПоДатеЗапрета");
						ЗарегистрироватьИзменение(Док, Перечисления.СобытияЗагрузки.ДатаЗапретаУдаление, ТекущаяДата(), Док.Дата, "Документ.ТребованиеНакладная");
						Возврат Неопределено;
					Иначе
						//ЗарегистрироватьИзменение(ДокРеализацияТоваровУслугСсылка, Перечисления.СобытияЗагрузки.Удален, ТекущаяДата(), ДокРеализацияТоваровУслугСсылка.Дата, "Документ.РеализацияТоваровУслуг");
						ЗарегистрироватьИзменение(Док, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), Док.Дата, "Документ.ТребованиеНакладная");
					КонецЕсли;
				КонецЕсли;
			Иначе
				х = х + 1;	Структура.Вставить("Дата",						КонецДня( СтрокаВДату(Массив[х]) ) - (16*3600) + 1);	// 08:00 - задача BUH1C-205
				х = х + 1;	Структура.Вставить("Номер", 					Массив[х]);
				//х = х + 1;	Структура.Вставить("КодРСДокумент",				Число(Массив[х]));
				х = х + 1;	Структура.Вставить("СкладКод",					Массив[х]);
				х = х + 1;	Структура.Вставить("СчетЗатрат",				ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
				х = х + 1;	Структура.Вставить("Субконто1",					НайтиЭлементСправочника("НоменклатурныеГруппы", "Наименование", Ложь, , "Производство продукции", ""));
				х = х + 1;	Структура.Вставить("Субконто2",					НайтиЭлементСправочника("СтатьиЗатрат", "Наименование", Ложь, , "Списание материалов", ""));
				х = х + 1;	Структура.Вставить("Субконто3",					НайтиЭлементСправочника("Номенклатура", "Артикул", Ложь, , Массив[х], ""));
				х = х + 1;	Структура.Вставить("СделкаНаименование",		СокрЛП(Массив[х]));
				х = х + 1;	Структура.Вставить("СтатусДокумента",			СокрЛП(Массив[х]));
				
				Если Структура.СкладКод = Число(71) Тогда
					Структура.СкладКод = 78;
				КонецЕсли;

							Структура.Вставить("Организация",				НайтиЭлементСправочника("Организации", "ИНН", Ложь, , Структура.ОрганизацияИНН, ""));
							Структура.Вставить("Склад",						НайтиЭлементСправочника("Склады", "КодРС", Ложь, , Структура.СкладКод,));
							Структура.Вставить("Сделка",					НайтиЭлементСправочника("Сделки", "Наименование", Ложь, , Структура.СделкаНаименование,));
							Структура.Вставить("НДСвСтоимостиТоваров",		Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять);
							Структура.Вставить("СпособУчетаНДС",			Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
							Структура.Вставить("ЦельРасхода",				НайтиЭлементСправочника("ЦелиРасходаМатериалов", "Наименование", Ложь, , "Комплектация готового изделия", ""));
							Структура.Вставить("Ответственный",				Ответственный);
							Структура.Вставить("Комментарий",				СтрШаблон("Склад №: %1, %2. %3", Структура.СкладКод, Структура.СтатусДокумента, КомментарийШаблон));
				
				// проверим на дату запрета редактирования
				Если Структура.Дата <= ДатаЗапретаРедактированияДляПользователя Тогда
					СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПоДатеЗапрета");
					Если Результат = Неопределено Тогда
						ЗарегистрироватьИзменение("Док ТребованиеНакладная: " + СокрЛП(Структура.Номер) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), Структура.Дата, "Документ.ТребованиеНакладная");
					Иначе
						ЗарегистрироватьИзменение(Результат.Ссылка, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), Результат.Дата, "Документ.ТребованиеНакладная");
					КонецЕсли;
					Возврат Неопределено;
				КонецЕсли;
				Если глПериодОбработки <> Неопределено И НЕ (Структура.Дата >= глПериодОбработки.ДатаНачала И Структура.Дата <= глПериодОбработки.ДатаОкончания) Тогда
					СтруктураОшибок.Вставить("ТипОшибки", "ОграничениеПоПериоду");
					Возврат Неопределено;
				КонецЕсли;
				
				// проверим статус документа
				Если СокрЛП(Структура.СтатусДокумента) = "нет" Тогда
					СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПоСтатусуДокумента");
					Если Результат = Неопределено Тогда
						ЗарегистрироватьИзменение("Док ТребованиеНакладная: " + СокрЛП(Структура.Номер) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), Структура.Дата, "Документ.ТребованиеНакладная");
					Иначе
						//ЗарегистрироватьИзменение(Результат.Ссылка, Перечисления.СобытияЗагрузки.СтатусДокумента, ТекущаяДата(), Результат.Дата, "Документ.ТребованиеНакладная");
					КонецЕсли;
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЧастьДокумента = "ТребованиеНакладная_ТЧ_Документа" Тогда
			х = х + 1;	Структура.Вставить("Артикул",				Массив[х]);
			х = х + 1;	Структура.Вставить("Количество",			Число(Массив[х]));
			х = х + 1;	Структура.Вставить("ОтражениеВУСН",			Перечисления.ОтражениеВУСН.Принимаются);
			х = х + 1;	Структура.Вставить("СтранаПроисхожденияКод",Массив[х]);

						Структура.Вставить("Номенклатура",			НайтиЭлементСправочника("Номенклатура", "Артикул", Ложь, , Структура.Артикул, ""));
						Если Структура.Номенклатура = Неопределено Тогда	// не найдена номенклатура
							ПеремещатьФайлыПослеУспешнойОбработки = Ложь;
						Иначе
							Структура.Вставить("ЕдиницаИзмерения",		Структура.Номенклатура.ЕдиницаИзмерения);
							Структура.Вставить("Счет",					ОпределитьСчетУчетаНоменклатуры(Структура.Номенклатура.ВидНоменклатуры, ДокТребованиеНакладная.Склад).СчетУчета);
							Структура.Вставить("СтранаПроисхождения",	НайтиЭлементСправочника("СтраныМира", "Код", Ложь, , Структура.СтранаПроисхожденияКод, ""));
							Структура.Вставить("Коэффициент",			1);
							Структура.Вставить("СчетЗатрат",			ДокТребованиеНакладная.СчетЗатрат);
							Структура.Вставить("СпособУчетаНДС",		Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету);
							Структура.Вставить("ПрослеживаемыйТовар",	Структура.Номенклатура.ПрослеживаемыйТовар);
						КонецЕсли;						
			
		КонецЕсли;
	#КонецОбласти
	
	ИначеЕсли ВидДокумента = "ПеремещениеТоваров" Тогда
	#Область ПеремещениеТоваров
		Если ЧастьДокумента = "ПеремещениеТоваров_ШапкаДокумента" Тогда
						Структура.Вставить("ВидОперации",					Перечисления.ВидыОперацийРасходМатериалов.ИспользованиеМатериалов);
			х = х + 1;	Структура.Вставить("ОрганизацияИНН",				Массив[х]);
			х = х + 1;	Структура.Вставить("ОбменПоЭДО",					Массив[х]);
						Структура.Вставить("ВидДокумента",					"ПеремещениеТоваров");
			Если Структура.ОбменПоЭДО = "удаление" Тогда
				х = х + 1;	Структура.Вставить("Номер", 					Массив[х]);
				х = х + 1;	Структура.Вставить("КодРСДокумент",				Число(Массив[х]));
				х = х + 1;	Структура.Вставить("Дата", 						КонецДня(ТекущаяДата()));
							Структура.Вставить("Статус",					"удаление");
							
				Док = НайтиДокументПоКодуРС(Структура);
				Если Док = Неопределено Тогда
					//ЗарегистрироватьИзменение("Док реализация: " + СокрЛП(Структура.Номер) + "-" + СокрЛП(Структура.КодРСДокумент) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.Удален, ТекущаяДата(), , "Документ.РеализацияТоваровУслуг");
					ЗарегистрироватьИзменение("Док перемещения товаров: " + СокрЛП(Структура.Номер) + "-" + СокрЛП(Структура.КодРСДокумент) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), , "Документ.ПеремещениеТоваров");
				Иначе
					// проверим на дату запрета редактирования
					Если Док.Дата <= ДатаЗапретаРедактированияДляПользователя Тогда
						СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПоДатеЗапрета");
						ЗарегистрироватьИзменение(Док, Перечисления.СобытияЗагрузки.ДатаЗапретаУдаление, ТекущаяДата(), Док.Дата, "Документ.ПеремещениеТоваров");
						Возврат Неопределено;
					Иначе
						//ЗарегистрироватьИзменение(ДокРеализацияТоваровУслугСсылка, Перечисления.СобытияЗагрузки.Удален, ТекущаяДата(), ДокРеализацияТоваровУслугСсылка.Дата, "Документ.РеализацияТоваровУслуг");
						ЗарегистрироватьИзменение(Док, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), Док.Дата, "Документ.ПеремещениеТоваров");
					КонецЕсли;
				КонецЕсли;
			Иначе
				х = х + 1;	Структура.Вставить("Дата",							КонецДня( СтрокаВДату(Массив[х]) ) - (16*3600) + 1 + 2700);	// 08:45 - задача BUH1C-205
				х = х + 1;	Структура.Вставить("Номер", 						Массив[х]);
				х = х + 1;	Структура.Вставить("СкладОтправительКод",			Массив[х]);
				х = х + 1;	Структура.Вставить("СкладПолучательКод",			Массив[х]);
				х = х + 1;	Структура.Вставить("ПодразделениеОтправительКод",	Массив[х]);
				х = х + 1;	Структура.Вставить("ПодразделениеПолучательКод",	Массив[х]);
				х = х + 1;	Структура.Вставить("НДСвСтоимостиТоваров",			Массив[х]);
				х = х + 1;	Структура.Вставить("СчетСписанияНДС",				Массив[х]);
				х = х + 1;	Структура.Вставить("СубконтоСписанияНДС1",			Массив[х]);
				х = х + 1;	Структура.Вставить("СубконтоСписанияНДС2",			Массив[х]);
				х = х + 1;	Структура.Вставить("СубконтоСписанияНДС3",			Массив[х]);
				х = х + 1;	Структура.Вставить("СделкаНаименование",			СокрЛП(Массив[х]));
				х = х + 1;	Структура.Вставить("Комментарий",					СтрШаблон("%1. %2.", Массив[х], КомментарийШаблон));
				
							Структура.Вставить("Организация",					НайтиЭлементСправочника("Организации", "ИНН", Ложь, , Структура.ОрганизацияИНН, ""));
							Структура.Вставить("СкладОтправитель",				НайтиЭлементСправочника("Склады", "КодРС", Ложь, , Структура.СкладОтправительКод,));
							Структура.Вставить("СкладПолучатель",				НайтиЭлементСправочника("Склады", "КодРС", Ложь, , Структура.СкладПолучательКод,));
							Структура.Вставить("Сделка",						НайтиЭлементСправочника("Сделки", "Наименование", Ложь, , Структура.СделкаНаименование,));
							// подразделение пока не сопоставляли, нет необходимости
							//Структура.Вставить("ПодразделениеОтправитель",	НайтиЭлементСправочника("Подразделения", "КодРС", Ложь, , Структура.ПодразделениеОтправительКод,));
							//Структура.Вставить("ПодразделениеПолучатель",		НайтиЭлементСправочника("Подразделения", "КодРС", Ложь, , Структура.ПодразделениеПолучательКод,));
							////////////////////////////////////////////////////////
							Структура.Вставить("СчетСписанияНДС",				ПланыСчетов.Хозрасчетный.ПустаяСсылка());
							Структура.Вставить("НДСвСтоимостиТоваров",			Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять);
							Структура.Вставить("Ответственный",					Ответственный);
				
				// проверим на дату запрета редактирования
				Если Структура.Дата <= ДатаЗапретаРедактированияДляПользователя Тогда
					СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПоДатеЗапрета");
					Если Результат = Неопределено Тогда
						ЗарегистрироватьИзменение("Док ПеремещениеТоваров: " + СокрЛП(Структура.Номер) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), ДокРеализацияТоваровУслуг.Дата, "Документ.ПеремещениеТоваров");
					Иначе
						ЗарегистрироватьИзменение(Результат.Ссылка, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), Результат.Дата, "Документ.ПеремещениеТоваров");
					КонецЕсли;
					Возврат Неопределено;
				КонецЕсли;
				Если глПериодОбработки <> Неопределено И НЕ (Структура.Дата >= глПериодОбработки.ДатаНачала И Структура.Дата <= глПериодОбработки.ДатаОкончания) Тогда
					СтруктураОшибок.Вставить("ТипОшибки", "ОграничениеПоПериоду");
					Возврат Неопределено;
				КонецЕсли;
				
				// загружаем только документы когда идет перемещение только между 1 и 3 складом и наоброт
				Если НЕ (Число(Структура.СкладОтправительКод) = 1 И Число(Структура.СкладПолучательКод) = 3) ИЛИ 
						(Число(Структура.СкладОтправительКод) = 3 И Число(Структура.СкладПолучательКод) = 1) Тогда
					СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПеремещениеТоваров");
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЧастьДокумента = "ПеремещениеТоваров_ТЧ_Документа" Тогда
			х = х + 1;	Структура.Вставить("НоменклатураАртикул",	Массив[х]);
			х = х + 1;	Структура.Вставить("КоличествоМест", 		1);
			х = х + 1;	Структура.Вставить("ЕдиницаИзмеренияКод",	Массив[х]);
			х = х + 1;	Структура.Вставить("Коэффициент", 			1);
			х = х + 1;	Структура.Вставить("СчетУчетаГП", 			Массив[х]);	// счет учета готовой продукции, если значение равно 43 - значит ГП
			х = х + 1;	Структура.Вставить("Количество",			Число(Массив[х]));
			х = х + 1;	Структура.Вставить("Цена", 					?(ЗначениеЗаполнено(Массив[х]) ,Число(Массив[х]), 0));
			х = х + 1;	Структура.Вставить("ЦенаВРознице", 			?(ЗначениеЗаполнено(Массив[х]) ,Число(Массив[х]), 0));
			х = х + 1;	Структура.Вставить("СуммаВРознице", 		?(ЗначениеЗаполнено(Массив[х]) ,Число(Массив[х]), 0));
			х = х + 1;	Структура.Вставить("СтавкаНДСВРознице", 	Массив[х]);
			х = х + 1;	Структура.Вставить("ДокументОприходования",	"");
			х = х + 1;	Структура.Вставить("Себестоимость",			?(ЗначениеЗаполнено(Массив[х]) ,Число(Массив[х]), 0));
			//х = х + 1;	Структура.Вставить("СпособУчетаНДС",		Массив[х]);

						Структура.Вставить("Номенклатура",			НайтиЭлементСправочника("Номенклатура", "Артикул", Ложь, , Структура.НоменклатураАртикул, ""));
						Структура.Вставить("СчетУчета",				ОпределитьСчетУчетаНоменклатуры(Структура.Номенклатура.ВидНоменклатуры, Справочники.Склады.ПустаяСсылка()).СчетУчета);
						Если Структура.СчетУчетаГП = "43" Тогда
							Структура.Вставить("НовыйСчетУчета",	ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
							//в случае перемещения ГП, документ перемещения должен быть позже 
							//документа "Отчет производства за смену", но не позже документа "РТУ"
							ДокПеремещениеТоваров.Дата = ДокПеремещениеТоваров.Дата + 10;
						Иначе
							Структура.Вставить("НовыйСчетУчета", 	ОпределитьСчетУчетаНоменклатуры(Структура.Номенклатура.ВидНоменклатуры, ДокПеремещениеТоваров.СкладПолучатель).СчетУчета);
						КонецЕсли;
		КонецЕсли;
	#КонецОбласти
	
	ИначеЕсли ВидДокумента = "ОтчетПроизводстваЗаСмену" Тогда
	#Область ОтчетПроизводстваЗаСмену
		Если ЧастьДокумента = "ОтчетПроизводстваЗаСмену_ШапкаДокумента" Тогда
						Структура.Вставить("Статус",					"НовыйИзменение");
						Структура.Вставить("ВидОперации",				Перечисления.ВидыОперацийОтчетПроизводстваЗаСмену.ОтчетПроизводстваЗаСмену);
			х = х + 1;	Структура.Вставить("ОрганизацияИНН",			Массив[х]);
			х = х + 1;	Структура.Вставить("ОбменПоЭДО",				Массив[х]);
						Структура.Вставить("ВидДокумента",				"ОтчетПроизводстваЗаСмену");
			Если Структура.ОбменПоЭДО = "удаление" Тогда
				х = х + 1;	Структура.Вставить("Номер", 					Массив[х]);
				х = х + 1;	Структура.Вставить("КодРСДокумент",				Число(Массив[х]));
				х = х + 1;	Структура.Вставить("Дата", 						КонецДня(ТекущаяДата()));
							Структура.Вставить("Статус",					"удаление");
							
				Док = НайтиДокументПоКодуРС(Структура);
				Если Док = Неопределено Тогда
					//ЗарегистрироватьИзменение("Док реализация: " + СокрЛП(Структура.Номер) + "-" + СокрЛП(Структура.КодРСДокумент) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.Удален, ТекущаяДата(), , "Документ.РеализацияТоваровУслуг");
					ЗарегистрироватьИзменение("Док отчет производства за смену: " + СокрЛП(Структура.Номер) + "-" + СокрЛП(Структура.КодРСДокумент) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), , "Документ.ОтчетПроизводстваЗаСмену");
				Иначе
					// проверим на дату запрета редактирования
					Если Док.Дата <= ДатаЗапретаРедактированияДляПользователя Тогда
						СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПоДатеЗапрета");
						ЗарегистрироватьИзменение(Док, Перечисления.СобытияЗагрузки.ДатаЗапретаУдаление, ТекущаяДата(), Док.Дата, "Документ.ОтчетПроизводстваЗаСмену");
						Возврат Неопределено;
					Иначе
						//ЗарегистрироватьИзменение(ДокРеализацияТоваровУслугСсылка, Перечисления.СобытияЗагрузки.Удален, ТекущаяДата(), ДокРеализацияТоваровУслугСсылка.Дата, "Документ.РеализацияТоваровУслуг");
						ЗарегистрироватьИзменение(Док, Перечисления.СобытияЗагрузки.Изменен, ТекущаяДата(), Док.Дата, "Документ.ОтчетПроизводстваЗаСмену");
					КонецЕсли;
				КонецЕсли;
			Иначе
				х = х + 1;	Структура.Вставить("Дата",						КонецДня( СтрокаВДату(Массив[х]) ) - (16*3600) + 1 + 1800);	// 08:30 - задача BUH1C-205
				х = х + 1;	Структура.Вставить("Номер", 					Массив[х]);
				//х = х + 1;	Структура.Вставить("КодРСДокумент",				Число(Массив[х]));
				х = х + 1;	Структура.Вставить("СкладКод",					Массив[х]);
				х = х + 1;	Структура.Вставить("СчетЗатрат",				ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
				х = х + 1;	Структура.Вставить("СделкаНаименование",		СокрЛП(Массив[х]));
				х = х + 1;	Структура.Вставить("СтатусДокумента",			СокрЛП(Массив[х]));
				Если Структура.СкладКод = Число(71) Тогда
					Структура.СкладКод = 78;
				КонецЕсли;

							Структура.Вставить("Организация",				НайтиЭлементСправочника("Организации", "ИНН", Ложь, , Структура.ОрганизацияИНН, ""));
							Структура.Вставить("Склад",						НайтиЭлементСправочника("Склады", "КодРС", Ложь, , Структура.СкладКод,));
							Структура.Вставить("Сделка",					НайтиЭлементСправочника("Сделки", "Наименование", Ложь, , Структура.СделкаНаименование,));
							Структура.Вставить("НДСвСтоимостиТоваров",		Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять);
							Структура.Вставить("ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат",	Истина);
							Структура.Вставить("Комментарий",				СтрШаблон("Сделка: %1, склад: %2, %3. %4.",
								Структура.СделкаНаименование, Структура.СкладКод, Структура.СтатусДокумента, КомментарийШаблон));
							Структура.Вставить("Ответственный",				Ответственный);
				
				// проверим на дату запрета редактирования
				Если Структура.Дата <= ДатаЗапретаРедактированияДляПользователя Тогда
					СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПоДатеЗапрета");
					Если Результат = Неопределено Тогда
						ЗарегистрироватьИзменение("Док ОтчетПроизводстваЗаСмену: " + СокрЛП(Структура.Номер) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), Структура.Дата, "Документ.ОтчетПроизводстваЗаСмену");
					Иначе
						ЗарегистрироватьИзменение(Результат.Ссылка, Перечисления.СобытияЗагрузки.СтатусДокумента, ТекущаяДата(), Результат.Дата, "Документ.ОтчетПроизводстваЗаСмену");
					КонецЕсли;
					Возврат Неопределено;
				КонецЕсли;
				Если глПериодОбработки <> Неопределено И НЕ (Структура.Дата >= глПериодОбработки.ДатаНачала И Структура.Дата <= глПериодОбработки.ДатаОкончания) Тогда
					СтруктураОшибок.Вставить("ТипОшибки", "ОграничениеПоПериоду");
					Возврат Неопределено;
				КонецЕсли;
				
				// проверим статус документа
				Если СокрЛП(Структура.СтатусДокумента) = "нет" Тогда
					СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПоСтатусуДокумента");
					Если Результат = Неопределено Тогда
						ЗарегистрироватьИзменение("Док ОтчетПроизводстваЗаСмену: " + СокрЛП(Структура.Номер) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), Структура.Дата, "Документ.ОтчетПроизводстваЗаСмену");
					Иначе
						//ЗарегистрироватьИзменение(Результат.Ссылка, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), Результат.Дата, "Документ.ОтчетПроизводстваЗаСмену");
					КонецЕсли;
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЧастьДокумента = "ОтчетПроизводстваЗаСмену_ТЧ_Документа" Тогда
			х = х + 1;	Структура.Вставить("Артикул",				Массив[х]);
			х = х + 1;	Структура.Вставить("Количество",			Число(Массив[х]));

						Структура.Вставить("Номенклатура",			НайтиЭлементСправочника("Номенклатура", "Артикул", Ложь, , Структура.Артикул, ""));
						Если Структура.Номенклатура = Неопределено Тогда	// не найдена номенклатура
							ПеремещатьФайлыПослеУспешнойОбработки = Ложь;
						Иначе
							Структура.Вставить("ЕдиницаИзмеренения",	Структура.Номенклатура.ЕдиницаИзмерения);
							Структура.Вставить("Коэффициент",			1);
							Структура.Вставить("Счет",					ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
							Структура.Вставить("НоменклатурнаяГруппа",	НайтиЭлементСправочника("НоменклатурныеГруппы", "Наименование", Ложь, , "Производство продукции", ""));
						КонецЕсли;
			
		КонецЕсли;
	#КонецОбласти
	
	ИначеЕсли ВидДокумента = "ГТДИмпорт" Тогда
	#Область ГТДИмпорт
		Если ЧастьДокумента = "ГТДИмпорт_ШапкаДокумента" Тогда
			х = х + 1;	Структура.Вставить("ОрганизацияИНН",				Массив[х]);
			
			//х = х + 1;	Структура.Вставить("ОбменПоЭДО",					Массив[х]);
						Структура.Вставить("Дата",							ТекущаяДата());
						Структура.Вставить("Номер", 						"");
			
			//х = х + 1;	Структура.Вставить("НомерГТДКод",						"");
			//х = х + 1;	Структура.Вставить("ТаможенныйСбор",				Массив[х]);
			
						Структура.Вставить("СпособЗачетаАвансов",			Перечисления.СпособыЗачетаАвансов.НеЗачитывать);
						Структура.Вставить("НДСПредъявленКВычету",			Истина);
						Структура.Вставить("ВалютаДокумента",				ВалютаРубль);
						Структура.Вставить("КратностьВзаиморасчетов",		1);
						Структура.Вставить("КратностьДокумента",			1);
						Структура.Вставить("КурсВзаиморасчетов",			1);
						Структура.Вставить("КурсДокумента",					1);
			
						Структура.Вставить("Комментарий",					КомментарийШаблон);
			
						Структура.Вставить("Ответственный",					Ответственный);
			
						Структура.Вставить("Контрагент",					Справочники.Контрагенты.ПустаяСсылка());
						Структура.Вставить("КонтрагентНаименование",		"");
						Структура.Вставить("НомерГТД",						Справочники.НомераГТД.ПустаяСсылка());
						Структура.Вставить("НомерГТДКод",					"");
			
			// проверим на дату запрета редактирования
			Если Структура.Дата <= ДатаЗапретаРедактированияДляПользователя Тогда
				СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаПоДатеЗапрета");
				Если Результат = Неопределено Тогда
					ЗарегистрироватьИзменение("Док ГТДИмпорт: " + СокрЛП(Структура.Номер) + ", от " + Структура.Дата, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), ДокРеализацияТоваровУслуг.Дата, "Документ.ГТДИмпорт");
				Иначе
					ЗарегистрироватьИзменение(Результат.Ссылка, Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), Результат.Дата, "Документ.ГТДИмпорт");
				КонецЕсли;
				Возврат Неопределено;
			КонецЕсли;
			Если глПериодОбработки <> Неопределено И НЕ (Структура.Дата >= глПериодОбработки.ДатаНачала И Структура.Дата <= глПериодОбработки.ДатаОкончания) Тогда
				СтруктураОшибок.Вставить("ТипОшибки", "ОграничениеПоПериоду");
				Возврат Неопределено;
			КонецЕсли;
			
			Структура.Вставить("Организация",				НайтиЭлементСправочника("Организации", "ИНН", Ложь, , Структура.ОрганизацияИНН, ""));
			//Структура.Вставить("ВалютаДокумента",			НайтиЭлементСправочника("Валюты", "Код", Ложь, , Структура.ВалютаДокументаКод,));

		ИначеЕсли ЧастьДокумента = "ГТДИмпорт_ТЧ_Документа" Тогда
			х = х + 1;	Структура.Вставить("Артикул",					СокрЛП(Массив[х]));
			х = х + 1;	Структура.Вставить("Описание",					СокрЛП(Массив[х]));
			х = х + 1;	Структура.Вставить("Цена",						Число(Массив[х]));
			х = х + 1;	Структура.Вставить("Модель",					СокрЛП(Массив[х]));
			х = х + 1;	Структура.Вставить("РусскоеНаименование",		СокрЛП(Массив[х]));
			х = х + 1;	Структура.Вставить("Количество",				Число(Массив[х]));
			х = х + 1;	Структура.Вставить("НомерГТД",					СокрЛП(Массив[х]));
			х = х + 1;	Структура.Вставить("СтранаПроисхожденияНаименование",		СокрЛП(Массив[х]));
			//х = х + 1;	Структура.Вставить("Бренд",						СокрЛП(Массив[х]));
			//х = х + 1;	Структура.Вставить("Производитель",				СокрЛП(Массив[х]));
			х = х + 1;	Структура.Вставить("Инвойс",					СокрЛП(Массив[х]));
			х = х + 1;	Структура.Вставить("КоличествоПоИнвойсу",		Число(Массив[х]));
			х = х + 1;	Структура.Вставить("Поставщик",					СокрЛП(Массив[х]));
			
						Структура.Вставить("Номенклатура",				НайтиЭлементСправочника("Номенклатура", "Артикул", Ложь, , Структура.Артикул, ""));
						Структура.Вставить("ФактурнаяСтоимость",		Окр(Структура.Цена * Структура.Количество * ПолучитьКурсВалюты(ТекущаяДата(), ВалютаДоллар).КурсВзаиморасчетов, 2, 1));
						Структура.Вставить("СуммаПошлины",				0);
						Структура.Вставить("СуммаНДС",					Окр(Структура.ФактурнаяСтоимость / 100 * 20, 2, 1));
						Структура.Вставить("ДокументПартии",			Документы.ПоступлениеТоваровУслуг.ПустаяСсылка());
						Структура.Вставить("НомерРаздела",				Число(Сред(Структура.НомерГТД, 25, 2)));
						Структура.Вставить("СчетУчета",					ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);						// 41.01
						Структура.Вставить("СчетУчетаНДС",				ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам);	// 19.05
						Структура.Вставить("СчетУчетаНУ",				ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);						// 41.01
						Структура.Вставить("СтранаПроисхождения",		НайтиЭлементСправочника("СтраныМира", "Наименование", Ложь, , Структура.СтранаПроисхожденияНаименование, ""));
						Структура.Вставить("ДокументПартия",			Документы.ПоступлениеТоваровУслуг.ПустаяСсылка());
			
			Структура.Вставить("Номенклатура",				НайтиЭлементСправочника("Номенклатура", "Артикул", Ложь, , Структура.Артикул, ""));
			Если Структура.Номенклатура = Неопределено Тогда	// не найдена номенклатура
				ЗаписьЖурналаРегистрации("НеНайденаНоменклатура", УровеньЖурналаРегистрации.Предупреждение, , , "Не найдена номенклатура: " + Структура.Артикул);
				ПеремещатьФайлыПослеУспешнойОбработки = Ложь;
			Иначе
				Структура.Вставить("СтранаПроисхождения",		НайтиЭлементСправочника("СтраныМира", "Наименование", Ложь, , Структура.СтранаПроисхожденияНаименование, ""));
				Структура.Вставить("СчетУчета",					ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
				Структура.Вставить("СчетУчетаНДС",				ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам);
				Структура.Вставить("ПрослеживаемыйТовар",		?(Структура.Номенклатура.ПрослеживаемыйТовар, Истина, Ложь));
			КонецЕсли;
			
			СтруктураПоступление = Новый Структура();
			СтруктураПоступление.Вставить("Номенклатура",			Структура.Номенклатура);
			СтруктураПоступление.Вставить("Количество",				Структура.Количество);
			СтруктураПоступление.Вставить("Цена",					Структура.Цена);
			СтруктураПоступление.Вставить("Сумма",					Окр(СтруктураПоступление.Количество * СтруктураПоступление.Цена, 2, 1));
			СтруктураПоступление.Вставить("СтавкаНДС",				Перечисления.СтавкиНДС.НДС0);
			СтруктураПоступление.Вставить("СуммаНДС",				0);
			СтруктураПоступление.Вставить("Всего",					СтруктураПоступление.Сумма);
			СтруктураПоступление.Вставить("НомерГТД",				НайтиЭлементСправочника("НомераГТД", "Код", Истина, , Сред(Структура.НомерГТД, 1, 23), ""));
			СтруктураПоступление.Вставить("СчетУчета",				Структура.СчетУчета);
			СтруктураПоступление.Вставить("СтранаПроисхождения",	Структура.СтранаПроисхождения);
			
			СтрГТДИмпорт = ТЗ_ГТД.Добавить();
			ЗаполнитьЗначенияСвойств(СтрГТДИмпорт, Структура);
			
			СтрПоступлениеТоваров = ТЗ_Поступление.Добавить();
			ЗаполнитьЗначенияСвойств(СтрПоступлениеТоваров, СтруктураПоступление);
			
			//Структура.Вставить("Номенклатура",				НайтиЭлементСправочника("Номенклатура", "Артикул", Ложь, , Структура.Артикул, ""));
			//Если Структура.Номенклатура = Неопределено Тогда	// не найдена номенклатура
			//	ПеремещатьФайлыПослеУспешнойОбработки = Ложь;
			//Иначе
			//	Если НЕ Структура.КодТНВЭД = Структура.Номенклатура.КодТНВЭД И НЕ ЗначениеЗаполнено(Структура.Номенклатура.КодТНВЭД) Тогда
			//		Структура.Вставить("КодТНВЭД",				НайтиЭлементСправочника("КлассификаторТНВЭД", "Код", Истина, , Структура.КодТНВЭД, ""));
			//	Иначе
			//		Структура.Вставить("КодТНВЭД",				Структура.Номенклатура.КодТНВЭД);
			//	КонецЕсли;
			//	Если ЗначениеЗаполнено(Структура.НомерГТД) Тогда
			//		Структура.Вставить("НомерГТД",				НайтиЭлементСправочника("НомераГТД", "Код", Истина, , Структура.НомерГТД, ""));
			//	КонецЕсли;
			//	Структура.Вставить("СтранаПроисхождения",		НайтиЭлементСправочника("СтраныМира", "Код", Ложь, , Структура.СтранаПроисхожденияКод, ""));
			//	Если Структура.СчетУчетаКод = "41.1" Тогда
			//		Структура.Вставить("СчетУчета",				ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
			//	ИначеЕсли Структура.СчетУчетаКод = "43" Тогда
			//		Структура.Вставить("СчетУчета",				ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
			//	КонецЕсли;
			//	Структура.Вставить("СчетУчетаНДСПоРеализации",	ПланыСчетов.Хозрасчетный.Продажи_НДС);
			//	Структура.Вставить("СчетДоходов",				ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
			//	Структура.Вставить("СчетРасходов",				ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);
			//	Если ДокРеализацияТоваровУслуг = Неопределено Тогда
			//		//ОшибкаМихаил, проверьте структуру выгруженных файлов
			//		СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаВСтруктуре");
			//		Возврат Неопределено;
			//	Иначе
			//		Если ДокРеализацияТоваровУслуг.ВалютаДокумента = ВалютаДоллар ИЛИ ДокРеализацияТоваровУслуг.ВалютаДокумента = ВалютаЕвро Тогда
			//			Структура.Вставить("СтавкаНДС",				Перечисления.СтавкиНДС.НДС0);
			//			Структура.Вставить("Субконто",				НайтиЭлементСправочника("НоменклатурныеГруппы", "Наименование", Ложь, , "Экспортные операции", ""));
			//			//Структура.Вставить("Цена",					Окр(Структура.Цена / ДокРеализацияТоваровУслуг.КурсВзаиморасчетов, 2, 1));
			//			//Структура.Вставить("Сумма",					Окр(Структура.Сумма / ДокРеализацияТоваровУслуг.КурсВзаиморасчетов, 2, 1));
			//			//Структура.Вставить("СуммаНДС",				0);
			//			//Структура.Вставить("Всего",					Окр(Структура.Всего / ДокРеализацияТоваровУслуг.КурсВзаиморасчетов, 2, 1));
			//		Иначе	// 643 - Российский рубль
			//			Структура.Вставить("СтавкаНДС",				?(Структура.СтавкаНДС="0", Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.НДС20));
			//			Если ЭтоТорговаяПлощадка Тогда
			//				Структура.Вставить("Субконто",			НоменклатурнаяГруппаТорговойПлощадки);
			//			Иначе
			//				Если Структура.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			//					Структура.Вставить("Субконто",			НайтиЭлементСправочника("НоменклатурныеГруппы", "Наименование", Ложь, , "Экспортные операции", ""));
			//				Иначе
			//					Структура.Вставить("Субконто",			НайтиЭлементСправочника("НоменклатурныеГруппы", "Наименование", Ложь, , "Основная номенклатурная группа", ""));
			//				КонецЕсли;
			//			КонецЕсли;
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЕсли;
			
		КонецЕсли;
	#КонецОбласти
	
	КонецЕсли;
	
	Возврат Структура;

КонецФункции	// МассивВСтруктуру

Функция НайтиЭлементСправочника(ВидСправочника, ПоискПо, СоздаватьЭлемент, Структура, ИскомоеЗначение, Владелец)

	Если ПоискПо = "НаименованиеВладельца" Тогда
		//// поиск договор правильный вариант
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//				|	" + ВидСправочника + ".Ссылка КАК Ссылка
		//				|ИЗ
		//				|	Справочник." + ВидСправочника + " КАК " + ВидСправочника + "
		//				|ГДЕ
		//				|	  " + ВидСправочника + ".Владелец = &Владелец
		//				|	И " + ВидСправочника + ".ВидДоговора = &ВидДоговора
		//				//|	И " + ВидСправочника + ".Номер = &НомерДоговора
		//				|	И " + ВидСправочника + ".Дата = &ДатаДоговора
		//				|	И " + ВидСправочника + ".ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов";
		//
		//Запрос.УстановитьПараметр("Владелец", Структура.Контрагент);
		//Запрос.УстановитьПараметр("ВидДоговора", Структура.ВидДоговора);
		//Запрос.УстановитьПараметр("НомерДоговора", Структура.ДоговорКонтрагентаНомер);
		//Запрос.УстановитьПараметр("ДатаДоговора", Структура.ДоговорКонтрагентаДата);
		//Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", Структура.ВалютаДокумента);
		
		// у нас пока все это не работает, своя система)))
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
						|	" + ВидСправочника + ".Ссылка КАК Ссылка
						|ИЗ
						|	Справочник." + ВидСправочника + " КАК " + ВидСправочника + "
						|ГДЕ
						|	  " + ВидСправочника + ".Владелец = &Владелец
						|	И " + ВидСправочника + ".ВидДоговора = &ВидДоговора
						|	И " + ВидСправочника + ".ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов";
		
		Запрос.УстановитьПараметр("Владелец", Структура.Контрагент);
		Запрос.УстановитьПараметр("ВидДоговора", Структура.ВидДоговора);
		//Запрос.УстановитьПараметр("НомерДоговора", Структура.ДоговорКонтрагентаНомер);
		//Запрос.УстановитьПараметр("ДатаДоговора", Структура.ДоговорКонтрагентаДата);
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", Структура.ВалютаДокумента);
		РасчетыВУсловныхЕдиницах = Истина;
		Если Структура.Свойство("РасчетыВУсловныхЕдиницах") Тогда
			Запрос.Текст = Запрос.Текст + "
						|	И " + ВидСправочника + ".РасчетыВУсловныхЕдиницах = &РасчетыВУсловныхЕдиницах";
			Запрос.УстановитьПараметр("РасчетыВУсловныхЕдиницах", Структура.РасчетыВУсловныхЕдиницах = Истина);
		КонецЕсли;
		Результат = Запрос.Выполнить();

		Выборка = Результат.Выбрать();
		Если Выборка.Количество() > 0 Тогда
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Справочники[ВидСправочника].ПустаяСсылка();
		КонецЕсли;
	Иначе
		Если ПоискПо = "КодРС" И ВидСправочника = "ВидыНоменклатуры" Тогда
			// пробуем найти по номеру русского стиля
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
							|	" + ВидСправочника + ".Ссылка КАК Ссылка
							|ИЗ
							|	Справочник." + ВидСправочника + " КАК " + ВидСправочника + "
							|ГДЕ
							|	" + ВидСправочника + ".КодРС = &КодРС";

			Запрос.УстановитьПараметр("КодРС", Число(ИскомоеЗначение));
			Результат = Запрос.Выполнить();

			Выборка = Результат.Выбрать();
			Если Выборка.Количество() > 0 Тогда
				Выборка.Следующий();
				Возврат Выборка.Ссылка;
			КонецЕсли;
			
		ИначеЕсли ВидСправочника = "ллл_КонтрагентыРС" Тогда
			Если ПоискПо = "КодРС" Тогда
				// пробуем найти по номеру русского стиля
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
								|	" + ВидСправочника + ".Ссылка КАК Ссылка
								|ИЗ
								|	Справочник." + ВидСправочника + " КАК " + ВидСправочника + "
								|ГДЕ
								|	" + ВидСправочника + ".КодРС = &ИскомоеЗначение";

				Если ПоискПо = "КодРС" Тогда
					Запрос.УстановитьПараметр("ИскомоеЗначение", Число(ИскомоеЗначение));
				КонецЕсли;
				Результат = Запрос.Выполнить();

				Выборка = Результат.Выбрать();
				Если Выборка.Количество() > 0 Тогда
					Выборка.Следующий();
					Возврат Выборка.Ссылка;
				КонецЕсли;
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
								|	" + ВидСправочника + ".Ссылка КАК Ссылка
								|ИЗ
								|	Справочник." + ВидСправочника + " КАК " + ВидСправочника + "
								|ГДЕ";
					Запрос.Текст = Запрос.Текст + "
								|	" + ВидСправочника + ".ИНН = &ИНН
								|	И " + ВидСправочника + ".КПП = &КПП";
					Запрос.УстановитьПараметр("ИНН", ИскомоеЗначение.КонтрагентИНН);
					Запрос.УстановитьПараметр("КПП", ИскомоеЗначение.КонтрагентКПП);
				
				Результат = Запрос.Выполнить();

				Выборка = Результат.Выбрать();
				Если Выборка.Количество() > 0 Тогда
					ВозвратСсылка = Выборка.Следующий();
					Возврат Выборка.Ссылка;
				КонецЕсли;			
				
			КонецЕсли;			
			
		ИначеЕсли ПоискПо = "КодРС" И ВидСправочника = "ТорговыеПлощадки" Тогда
			Запрос1 = Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
							|	Т.Период КАК Период,
							|	Т.Контрагент КАК Контрагент,
							|	Т.ДоговорКонтрагента КАК ДоговорКонтрагента,
							|	Т.КодРС КАК КодРС
							|ИЗ
							|	РегистрСведений.ТорговыеПлощадки.СрезПоследних(, &Условие) КАК Т";
			Если ТипЗнч(Структура) = Тип("Структура") И Структура.Количество() > 0 Тогда
				ТекстУсловия = "";
				Для Каждого КЗ Из Структура Цикл
					ТекстУсловия = ТекстУсловия + ?(ЗначениеЗаполнено(ТекстУсловия), " И ", "") + СтрШаблон("%1 = &%1", КЗ.Ключ);
					Запрос1.УстановитьПараметр(КЗ.Ключ, КЗ.Значение);
				КонецЦикла;
			Иначе
				ТекстУсловия = "КодРС = &КодРС";
				Запрос1.УстановитьПараметр("КодРС", ИскомоеЗначение);
			КонецЕсли;
			Запрос1.Текст = СтрЗаменить(Запрос1.Текст, "&Условие", ТекстУсловия);
			Результат1 = Запрос1.Выполнить();

			Выборка1 = Результат1.Выбрать();
			Если Выборка1.Количество() > 0 Тогда
				Выборка1.Следующий();
				Возврат Новый Структура("Контрагент,ДоговорКонтрагента", Выборка1.Контрагент, Выборка1.ДоговорКонтрагента);
			Иначе	// результат пустой, с списке торговых площадок не нашли контрагента
			//	СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаТорговаяПлощадкаРегистрСведений");	// + СтрЗаменить(ИскомоеЗначение, Символы.НПП, ""));
			//	ЗаписьЖурналаРегистрации("ЗагрузкаРС", УровеньЖурналаРегистрации.Предупреждение, , , "В регистре сведений ""Торговые площадки"" не найден контрагент с кодом: " + ИскомоеЗначение);
				Возврат Новый Структура("Контрагент,ДоговорКонтрагента");
			КонецЕсли;
			
		ИначеЕсли ПоискПо = "КодРС" ИЛИ ПоискПо = "IDclient" Тогда
			// пробуем найти по номеру русского стиля
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
							|	" + ВидСправочника + ".Ссылка КАК Ссылка,
							|	" + ВидСправочника + "ДополнительныеРеквизиты.Значение КАК Значение
							|ИЗ
							|	Справочник." + ВидСправочника + " КАК " + ВидСправочника + "
							|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ВидСправочника + ".ДополнительныеРеквизиты КАК " + ВидСправочника + "ДополнительныеРеквизиты
							|		ПО (" + ВидСправочника + "ДополнительныеРеквизиты.Ссылка = " + ВидСправочника + ".Ссылка)
							|			И (" + ВидСправочника + "ДополнительныеРеквизиты.Свойство.Имя = &Свойство)
							|			И (" + ВидСправочника + "ДополнительныеРеквизиты.Значение = &ИскомоеЗначение)
							|ГДЕ
							|	НЕ " + ВидСправочника + "ДополнительныеРеквизиты.Значение ЕСТЬ NULL";

			Если ПоискПо = "КодРС" Тогда
				Запрос.УстановитьПараметр("Свойство", "КодРС_" + ВидСправочника);
				Запрос.УстановитьПараметр("ИскомоеЗначение", Число(ИскомоеЗначение));
			ИначеЕсли ПоискПо = "IDclient" Тогда
				Запрос.УстановитьПараметр("Свойство", "IDclient_d2d6ed2cd5ee4699b8a0ff23565f1920");
				Запрос.УстановитьПараметр("ИскомоеЗначение", ИскомоеЗначение);
			КонецЕсли;
			Результат1 = Запрос.Выполнить();

			Выборка1 = Результат1.Выбрать();
			Если Выборка1.Количество() > 0 Тогда
				Выборка1.Следующий();
				Возврат Выборка1.Ссылка;
			КонецЕсли;
		ИначеЕсли ВидСправочника = "Номенклатура" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
							|	" + ВидСправочника + ".Ссылка КАК Ссылка
							|ИЗ
							|	Справочник." + ВидСправочника + " КАК " + ВидСправочника + "
							|ГДЕ";
			Запрос.Текст = Запрос.Текст + "
						|	" + ВидСправочника + "." + ПоискПо + " = &ИскатьПо";
			Запрос.УстановитьПараметр("ИскатьПо", ИскомоеЗначение);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Если Выборка.Количество() > 0 Тогда
				ВозвратСсылка = Выборка.Следующий();
				Возврат Выборка.Ссылка;
			Иначе
				ЗапросРС = Новый Запрос;
				ЗапросРС.Текст = "ВЫБРАТЬ
								|	ллл_НоменклатураРС.Ссылка КАК Ссылка
								|ИЗ
								|	Справочник.ллл_НоменклатураРС КАК ллл_НоменклатураРС
								|ГДЕ";
				ЗапросРС.Текст = ЗапросРС.Текст + "
							|	ллл_НоменклатураРС." + ПоискПо + " = &ИскатьПо";
				ЗапросРС.УстановитьПараметр("ИскатьПо", ИскомоеЗначение);
				РезультатРС = ЗапросРС.Выполнить();
				ВыборкаРС = РезультатРС.Выбрать();
				Если ВыборкаРС.Количество() > 0 Тогда
					СсылкаРС = ВыборкаРС.Следующий();
					ЭлНом = Справочники.Номенклатура.СоздатьЭлемент();
					ЭлНом.Код = ВыборкаРС.Ссылка.Код;
					ЭлНом.Артикул = ВыборкаРС.Ссылка.Артикул;
					ЭлНом.Наименование = ВыборкаРС.Ссылка.Наименование;
					ЭлНом.НаименованиеПолное = ВыборкаРС.Ссылка.НаименованиеПолное;
					
					//ЭлНом.ВидНоменклатуры = НайтиЭлементСправочника("ВидыНоменклатуры", "КодРС", Ложь, , ВыборкаРС.Ссылка.ВидНоменклатурыКод, "");
					ЭлНом.ВидНоменклатуры = НайтиЭлементСправочника("ВидыНоменклатуры", "Наименование", Ложь, , "ТОВАР", "");
					ЭлНом.ЕдиницаИзмерения = НайтиЭлементСправочника("КлассификаторЕдиницИзмерения", "Код", Ложь, , ВыборкаРС.Ссылка.ЕдиницаИзмеренияКод, "");
					ЭлНом.СтранаПроисхождения = НайтиЭлементСправочника("СтраныМира", "Код", Ложь, , ВыборкаРС.Ссылка.СтранаПроисхожденияКод, "");
					ЭлНом.КодТНВЭД = НайтиЭлементСправочника("КлассификаторТНВЭД", "Код", Ложь, , ВыборкаРС.Ссылка.КодТНВЭД, "");
					//ЭлНом.ПрослеживаемыйТовар = СсылкаРС.ПрослеживаемыйТовар;
					ЭлНом.ВесПоСертификатуТовара = ВыборкаРС.Ссылка.ВесПоСертификатуТовара;
					ДобавитьДополнительныйРеквизит(ЭлНом, "Вес,кг", ВыборкаРС.Ссылка.ВесКГ);
					//ЭлНом.ВесКГ = СсылкаРС.ВесКГ;
					ЭлНом.Записать();
					Возврат ЭлНом;
				КонецЕсли;			
				
			КонецЕсли;			
		ИначеЕсли ВидСправочника = "Сделки" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
							|	" + ВидСправочника + ".Ссылка КАК Ссылка
							|ИЗ
							|	Справочник." + ВидСправочника + " КАК " + ВидСправочника + "
							|ГДЕ";
			Запрос.Текст = Запрос.Текст + "
						|	" + ВидСправочника + "." + ПоискПо + " = &ИскатьПо";
			Запрос.УстановитьПараметр("ИскатьПо", ИскомоеЗначение);
			
			Результат = Запрос.Выполнить();

			Выборка = Результат.Выбрать();
			Если Выборка.Количество() > 0 Тогда
				ВозвратСсылка = Выборка.Следующий();
				Возврат Выборка.Ссылка;
			Иначе
				Эл = Справочники.Сделки.СоздатьЭлемент();
				Эл.Наименование = ИскомоеЗначение;
				Эл.Записать();
				Возврат Эл.Ссылка;
			КонецЕсли;			
		ИначеЕсли ПоискПо = "Код" ИЛИ ПоискПо = "Наименование" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
							|	" + ВидСправочника + ".Ссылка КАК Ссылка
							|ИЗ
							|	Справочник." + ВидСправочника + " КАК " + ВидСправочника + "
							|ГДЕ";
			Запрос.Текст = Запрос.Текст + "
						|	" + ВидСправочника + "." + ПоискПо + " = &ИскатьПо";
			Запрос.УстановитьПараметр("ИскатьПо", ИскомоеЗначение);
			
			Результат = Запрос.Выполнить();

			Выборка = Результат.Выбрать();
			Если Выборка.Количество() > 0 Тогда
				ВозвратСсылка = Выборка.Следующий();
				Возврат Выборка.Ссылка;
			Иначе
				Если СоздаватьЭлемент Тогда
					Эл = Справочники[ВидСправочника].СоздатьЭлемент();
					Если ПоискПо = "Код" Тогда
						Эл.Код = ИскомоеЗначение;
					ИначеЕсли ПоискПо = "Наименование" Тогда
						Эл.Наименование = ИскомоеЗначение;
					КонецЕсли;
					Эл.Записать();
					Возврат Эл.Ссылка;
				КонецЕсли;
			КонецЕсли;			
		ИначеЕсли НЕ ПоискПо = "КодРС" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
							|	" + ВидСправочника + ".Ссылка КАК Ссылка
							|ИЗ
							|	Справочник." + ВидСправочника + " КАК " + ВидСправочника + "
							|ГДЕ";
			Если ВидСправочника = "Контрагенты" Тогда
				Запрос.Текст = Запрос.Текст + "
							|	" + ВидСправочника + ".ИНН = &ИНН
							|	И " + ВидСправочника + ".КПП = &КПП";
				Запрос.УстановитьПараметр("ИНН", ИскомоеЗначение.КонтрагентИНН);
				Запрос.УстановитьПараметр("КПП", ИскомоеЗначение.КонтрагентКПП);
			Иначе
				Запрос.Текст = Запрос.Текст + "
							|	" + ВидСправочника + "." 		+ ПоискПо + " = &ИскатьПо";
				Запрос.УстановитьПараметр("ИскатьПо", ИскомоеЗначение);
			КонецЕсли;
			
			//Сообщить("" + ВидСправочника);
			Результат = Запрос.Выполнить();

			Выборка = Результат.Выбрать();
			Если Выборка.Количество() > 0 Тогда
				ВозвратСсылка = Выборка.Следующий();
				Возврат Выборка.Ссылка;
			КонецЕсли;			
		КонецЕсли;
		
	КонецЕсли;

КонецФункции	// НайтиЭлементСправочника()

Функция ОпределитьСчетУчетаНоменклатуры(ВидНоменклатуры, Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетаУчетаНоменклатуры.Организация КАК Организация,
		|	СчетаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	СчетаУчетаНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
		|	СчетаУчетаНоменклатуры.Склад КАК Склад,
		|	СчетаУчетаНоменклатуры.СчетУчета КАК СчетУчета,
		|	СчетаУчетаНоменклатуры.СчетУчетаПередачи КАК СчетУчетаПередачи
		|ИЗ
		|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
		|ГДЕ
		//|	СчетаУчетаНоменклатуры.Организация = &Организация
		|	СчетаУчетаНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
		//|	И СчетаУчетаНоменклатуры.Номенклатура = &Номенклатура
		|	И СчетаУчетаНоменклатуры.Склад = &Склад";
	
		//Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
		//Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Склад", Склад);
		Результат = Запрос.Выполнить();

		Выборка = Результат.Выбрать();
		Если Выборка.Количество() > 0 Тогда
			Выборка.Следующий();
			Возврат Новый Структура("СчетУчета, СчетУчетаПередачи", Выборка.СчетУчета, Выборка.СчетУчетаПередачи);
		Иначе
			Возврат Новый Структура("СчетУчета, СчетУчетаПередачи", ПланыСчетов.Хозрасчетный.ПустаяСсылка(), ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		КонецЕсли;
		
КонецФункции

Процедура ОбработатьШапкуДокумента(ВидДокумента, Структура)
	
	Если ВидДокумента = "РеализацияТоваровУслуг" Тогда
		#Область РеализацияТоваровУслуг
		Если Структура.Свойство("НестандартныеТеги", "НестандартныеТеги") Тогда
			Если ЗначениеЗаполнено(Структура.ДоговорНомер) Тогда
				ДобавитьДополнительноеСвойство(ДокРеализацияТоваровУслуг.Ссылка, "ДоговорНомер", Структура.ДоговорНомер)
			КонецЕсли;
			Если ЗначениеЗаполнено(Структура.ДоговорДата) Тогда
				ДобавитьДополнительноеСвойство(ДокРеализацияТоваровУслуг.Ссылка, "ДоговорДата", Структура.ДоговорДата)
			КонецЕсли;
			Если ЗначениеЗаполнено(Структура.ДоговорПримечание) Тогда
				ДобавитьДополнительноеСвойство(ДокРеализацияТоваровУслуг.Ссылка, "ДоговорПримечание", Структура.ДоговорПримечание)
			КонецЕсли;
			Если ЗначениеЗаполнено(Структура.НомерЗаказаКлиента) Тогда
				ДобавитьДополнительноеСвойство(ДокРеализацияТоваровУслуг.Ссылка, "НомерЗаказаКлиента", Структура.НомерЗаказаКлиента)
			КонецЕсли;
			Если ЗначениеЗаполнено(Структура.ГородПолучателя) Тогда
				ДобавитьДополнительноеСвойство(ДокРеализацияТоваровУслуг.Ссылка, "НазваниеГородаПолучателя", Структура.ГородПолучателя)
			КонецЕсли;
		Иначе
			ДокРеализацияТоваровУслугСсылка = НайтиДокументПоКодуРС(Структура);
			Если ДокРеализацияТоваровУслугСсылка = Неопределено И НЕ Структура.ОбменПоЭДО = "удаление" Тогда
				ДокРеализацияТоваровУслуг = Документы[ВидДокумента].СоздатьДокумент();
			ИначеЕсли НЕ ДокРеализацияТоваровУслугСсылка = Неопределено Тогда
				ДокРеализацияТоваровУслуг = ДокРеализацияТоваровУслугСсылка.ПолучитьОбъект();
				Если Структура.Статус = "удаление" Тогда
					ДокРеализацияТоваровУслуг.ПометкаУдаления = Истина;
				Иначе
					ДокРеализацияТоваровУслуг.Товары.Очистить();
				КонецЕсли;
			КонецЕсли;
			Если НЕ Структура.Статус = "удаление" Тогда
				ЗаполнитьЗначенияСвойств(ДокРеализацияТоваровУслуг, Структура);
				
				ДокРеализацияТоваровУслуг.Записать(РежимЗаписиДокумента.Запись);
				
				Если Структура.ОбменПоЭДО = "1" Тогда
					ДобавитьДополнительноеСвойство(ДокРеализацияТоваровУслуг.Ссылка, "ОтправлятьПоЭДО", Истина)
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Структура.ОтветственныйМенеджер) Тогда
					ДобавитьДополнительноеСвойство(ДокРеализацияТоваровУслуг.Ссылка, "ОтветственныйМенеджер", Структура.ОтветственныйМенеджер)
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Структура.НомерСчетаТорговойПлощадки) Тогда
					ДобавитьДополнительноеСвойство(ДокРеализацияТоваровУслуг.Ссылка, "НомерСчетаТорговойПлощадки", Структура.НомерСчетаТорговойПлощадки)
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Структура.КодРСДокумент) Тогда
					ДобавитьДополнительноеСвойство(ДокРеализацияТоваровУслуг.Ссылка, "КодРСДокумент", Структура.КодРСДокумент)
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		#КонецОбласти
		
	ИначеЕсли ВидДокумента = "СчетФактураВыданный" Тогда
		#Область СчетФактураВыданный
		ДокСчетФактураВыданныйСсылка = Документы[ВидДокумента].НайтиПоНомеру(СокрЛП(Структура.Номер), Структура.Дата);
		Если ДокСчетФактураВыданныйСсылка.Пустая() Тогда
			// надо проверить, могли изменить номер существующей счет-фактуры
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	СчетФактураВыданный.Ссылка КАК Ссылка
			               |ИЗ
			               |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
			               |ГДЕ
			               |	СчетФактураВыданный.ДокументОснование = &ДокументОснование
			               |	И СчетФактураВыданный.Дата МЕЖДУ &ДатаНачало И &ДатаОкончания";
			
			Если НЕ ДокРеализацияТоваровУслуг = Неопределено Тогда
				Запрос.УстановитьПараметр("ДокументОснование", ДокРеализацияТоваровУслуг.Ссылка);
				Запрос.УстановитьПараметр("ДатаНачало", НачалоМесяца(Структура.Дата));
				Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Структура.Дата));
			Иначе
				Запрос.УстановитьПараметр("ДокументОснование", ДокВозвратТоваровОтПокупателя.Ссылка);
				Запрос.УстановитьПараметр("ДатаНачало", НачалоМесяца(Структура.Дата));
				Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Структура.Дата));
			КонецЕсли;
			Результат = Запрос.Выполнить();
			
			Если Результат.Пустой() Тогда
				ДокСчетФактураВыданный = Документы[ВидДокумента].СоздатьДокумент();
			Иначе
				Выборка = Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					ДокСчетФактураВыданныйСсылка = Выборка.Ссылка;
					ДокСчетФактураВыданный = ДокСчетФактураВыданныйСсылка.ПолучитьОбъект();
					ДокСчетФактураВыданный.ДокументыОснования.Очистить();
				КонецЦикла;
			КонецЕсли;
		Иначе
			ДокСчетФактураВыданный = ДокСчетФактураВыданныйСсылка.ПолучитьОбъект();
			ДокСчетФактураВыданный.ДокументыОснования.Очистить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДокСчетФактураВыданный, Структура);
		Если		Структура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
			ДокСчетФактураВыданный.Контрагент = ДокРеализацияТоваровУслуг.Контрагент;
			ДокСчетФактураВыданный.ДоговорКонтрагента = ДокРеализацияТоваровУслуг.ДоговорКонтрагента;
			ДокСчетФактураВыданный.ДокументОснование = ДокРеализацияТоваровУслуг.Ссылка;
			Стр = ДокСчетФактураВыданный.ДокументыОснования.Добавить();
			Стр.ДокументОснование = ДокРеализацияТоваровУслуг.Ссылка;
		ИначеЕсли	Структура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			ДокСчетФактураВыданный.ДокументОснование = ДокВозвратТоваровОтПокупателя.Ссылка;
			Стр = ДокСчетФактураВыданный.ДокументыОснования.Добавить();
			Стр.ДокументОснование = ДокВозвратТоваровОтПокупателя.Ссылка;
		КонецЕсли;
		#КонецОбласти
		
	ИначеЕсли ВидДокумента = "СчетНаОплатуПокупателю" Тогда
		#Область СчетНаОплатуПокупателю
		ДокСчетНаОплатуПокупателюСсылка = НайтиДокументПоКодуРС(Структура);
		Если Структура.Статус = "удаление" Тогда
			Если ЗначениеЗаполнено(ДокСчетНаОплатуПокупателюСсылка) Тогда
				ДокСчетНаОплатуПокупателю = ДокСчетНаОплатуПокупателюСсылка.ПолучитьОбъект();
				ДокСчетНаОплатуПокупателю.ПометкаУдаления = Истина;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ДокСчетНаОплатуПокупателюСсылка) Тогда
				ДокСчетНаОплатуПокупателю = ДокСчетНаОплатуПокупателюСсылка.ПолучитьОбъект();
				ДокСчетНаОплатуПокупателю.Товары.Очистить();
			Иначе
				ДокСчетНаОплатуПокупателю = Документы[ВидДокумента].СоздатьДокумент();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ДокСчетНаОплатуПокупателю, Структура);
			
			ДокСчетНаОплатуПокупателю.Записать(РежимЗаписиДокумента.Запись);
			
			Если ЗначениеЗаполнено(Структура.КодРСДокумент) Тогда
				ДобавитьДополнительноеСвойство(ДокСчетНаОплатуПокупателю.Ссылка, "КодРСДокумент", Структура.КодРСДокумент);
			КонецЕсли;
		КонецЕсли;
		#КонецОбласти
		
	ИначеЕсли ВидДокумента = "ПоступлениеТоваровУслуг" Тогда
		#Область ПоступлениеТоваровУслуг
		ДокПоступлениеТоваровУслугСсылка = Документы[ВидДокумента].НайтиПоРеквизиту("НомерВходящегоДокумента", СокрЛП(Структура.НомерВходящегоДокумента));
		Если ДокПоступлениеТоваровУслугСсылка.Пустая() Тогда
			ДокПоступлениеТоваровУслуг = Документы[ВидДокумента].СоздатьДокумент();
		Иначе
			ДокПоступлениеТоваровУслуг = ДокПоступлениеТоваровУслугСсылка.ПолучитьОбъект();
			ДокПоступлениеТоваровУслуг.Товары.Очистить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ДокПоступлениеТоваровУслуг, Структура);
		
		ДокПоступлениеТоваровУслуг.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
		
		//СчетФактураПолученныйСсылка = Документы.СчетФактураПолученный.НайтиПоНомеру(СокрЛП(Структура.Номер), Структура.Дата);
		//Если СчетФактураПолученныйСсылка.Пустая() Тогда
		//	ДокСчетФактураПолученный = Документы.СчетФактураПолученный.СоздатьДокумент();
		//Иначе
		//	ДокСчетФактураПолученный = СчетФактураПолученныйСсылка.ПолучитьОбъект();
		//КонецЕсли;
		//ЗаполнитьЗначенияСвойств(ДокСчетФактураПолученный, Структура);
		//ДокСчетФактураПолученный.ДокументОснование = ДокПоступлениеТоваровУслуг.Ссылка;
		//ДокСчетФактураПолученный.КППКонтрагента = ДокСчетФактураПолученный.Контрагент.КПП;
		//СтрДокСФП = ДокСчетФактураПолученный.ДокументыОснования.Добавить();
		//СтрДокСФП.ДокументОснование = ДокПоступлениеТоваровУслуг.Ссылка;
		//ДокСчетФактураПолученный.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
		//ДокСчетФактураПолученный.СуммаДокумента = ДокПоступлениеТоваровУслуг.СуммаДокумента;
		//ДокСчетФактураПолученный.СуммаНДСДокумента = Окр(ДокПоступлениеТоваровУслуг.СуммаДокумента / 120 * 20, 2, 1);	// доделать
		//ДокСчетФактураПолученный.КодВидаОперации = "01";
		#КонецОбласти
		
	ИначеЕсли ВидДокумента = "СчетФактураПолученный" Тогда
		#Область СчетФактураПолученный
		ДокСчетФактураПолученныйСсылка = Документы[ВидДокумента].НайтиПоНомеру(СокрЛП(Структура.Номер), Структура.Дата);
		Если ДокСчетФактураПолученныйСсылка.Пустая() Тогда
			ДокСчетФактураПолученный = Документы[ВидДокумента].СоздатьДокумент();
		Иначе
			ДокСчетФактураПолученный = ДокСчетФактураПолученныйСсылка.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ДокСчетФактураПолученный, Структура);
		ДокСчетФактураПолученный.ДокументыОснования.Очистить();
		СтрДокСФП = ДокСчетФактураПолученный.ДокументыОснования.Добавить();
		СтрДокСФП.ДокументОснование = ДокПоступлениеТоваровУслуг.Ссылка;
		#КонецОбласти
		
	ИначеЕсли ВидДокумента = "СчетНаОплатуПоставщика" Тогда
		#Область СчетНаОплатуПоставщика
		ДокСчетНаОплатуПокупателюСсылка = НайтиДокументПоКодуРС(Структура);
		Если Структура.Статус = "удаление" Тогда
			Если ЗначениеЗаполнено(ДокСчетНаОплатуПокупателюСсылка) Тогда
				ДокСчетНаОплатуПокупателю = ДокСчетНаОплатуПокупателюСсылка.ПолучитьОбъект();
				ДокСчетНаОплатуПокупателю.ПометкаУдаления = Истина;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ДокСчетНаОплатуПокупателюСсылка) Тогда
				ДокСчетНаОплатуПокупателю = ДокСчетНаОплатуПокупателюСсылка.ПолучитьОбъект();
				ДокСчетНаОплатуПокупателю.Товары.Очистить();
			Иначе
				ДокСчетНаОплатуПокупателю = Документы[ВидДокумента].СоздатьДокумент();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ДокСчетНаОплатуПокупателю, Структура);
			
			ДокСчетНаОплатуПокупателю.Записать(РежимЗаписиДокумента.Запись);
			
			Если ЗначениеЗаполнено(Структура.КодРСДокумент) Тогда
				ДобавитьДополнительноеСвойство(ДокСчетНаОплатуПокупателю.Ссылка, "КодРСДокумент", Структура.КодРСДокумент);
			КонецЕсли;
		КонецЕсли;
		#КонецОбласти
		
	ИначеЕсли ВидДокумента = "ТребованиеНакладная" Тогда
		#Область ТребованиеНакладная
		ДокТребованиеНакладнаяСсылка = Документы[ВидДокумента].НайтиПоНомеру(СокрЛП(Структура.Номер), Структура.Дата);
		//ДокТребованиеНакладнаяСсылка = НайтиДокументПоКодуРС(Структура);
		Если ДокТребованиеНакладнаяСсылка.Пустая() Тогда
			ДокТребованиеНакладная = Документы[ВидДокумента].СоздатьДокумент();
		Иначе
			ДокТребованиеНакладная = ДокТребованиеНакладнаяСсылка.ПолучитьОбъект();
			ДокТребованиеНакладная.Материалы.Очистить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ДокТребованиеНакладная, Структура);
		#КонецОбласти

	ИначеЕсли ВидДокумента = "ПеремещениеТоваров" Тогда
		#Область ПеремещениеТоваров
		ДокПеремещениеТоваровСсылка = НайтиДокументПоКодуРС(Структура);
		Если Структура.Статус = "удаление" Тогда
			Если ЗначениеЗаполнено(ДокПеремещениеТоваровСсылка) Тогда
				ДокПеремещениеТоваров = ДокПеремещениеТоваровСсылка.ПолучитьОбъект();
				ДокПеремещениеТоваров.ПометкаУдаления = Истина;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ДокПеремещениеТоваровСсылка) Тогда
				ДокПеремещениеТоваров = ДокПеремещениеТоваровСсылка.ПолучитьОбъект();
				ДокПеремещениеТоваров.Товары.Очистить();
			Иначе
				ДокПеремещениеТоваров = Документы[ВидДокумента].СоздатьДокумент();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ДокПеремещениеТоваров, Структура);
			
			ДокПеремещениеТоваров.Записать(РежимЗаписиДокумента.Запись);
			
			Если ЗначениеЗаполнено(Структура.КодРСДокумент) Тогда
				ДобавитьДополнительноеСвойство(ДокРеализацияТоваровУслуг.Ссылка, "КодРСДокумент", Структура.КодРСДокумент)
			КонецЕсли;
		КонецЕсли;
		#КонецОбласти

	ИначеЕсли ВидДокумента = "ВозвратТоваровОтПокупателя" Тогда
		#Область ВозвратТоваровОтПокупателя
		Если Структура.Свойство("Ссылка") Тогда
			ДокВозвратТоваровОтПокупателяСсылка = Структура.Ссылка;
		Иначе
			ДокВозвратТоваровОтПокупателяСсылка = НайтиДокументПоКодуРС(Структура);
		КонецЕсли;
		Если Структура.Статус = "удаление" Тогда
			Если ЗначениеЗаполнено(ДокВозвратТоваровОтПокупателяСсылка) Тогда
				ДокВозвратТоваровОтПокупателя = ДокВозвратТоваровОтПокупателяСсылка.ПолучитьОбъект();
				ДокВозвратТоваровОтПокупателя.ПометкаУдаления = Истина;
				ПометитьНаУдалениеСФ(ДокВозвратТоваровОтПокупателяСсылка);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ДокВозвратТоваровОтПокупателяСсылка) Тогда
				ДокВозвратТоваровОтПокупателя = ДокВозвратТоваровОтПокупателяСсылка.ПолучитьОбъект();
				ДокВозвратТоваровОтПокупателя.Товары.Очистить();
			Иначе
				ДокВозвратТоваровОтПокупателя = Документы[ВидДокумента].СоздатьДокумент();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ДокВозвратТоваровОтПокупателя, Структура);
			
			ДокВозвратТоваровОтПокупателя.Записать(РежимЗаписиДокумента.Запись);
			
			Если ЗначениеЗаполнено(Структура.НомерЗаказаТорговойПлощадки) Тогда
				ДобавитьДополнительноеСвойство(ДокВозвратТоваровОтПокупателя.Ссылка, "НомерОтправленияТорговойПлощадки", Структура.НомерЗаказаТорговойПлощадки)
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Структура.КодРСДокумент) Тогда
				ДобавитьДополнительноеСвойство(ДокВозвратТоваровОтПокупателя.Ссылка, "КодРСДокумент", Структура.КодРСДокумент)
			КонецЕсли;
		КонецЕсли;
		#КонецОбласти
		
	ИначеЕсли ВидДокумента = "ОтчетПроизводстваЗаСмену" Тогда
		#Область ОтчетПроизводстваЗаСмену
		ДокОтчетПроизводстваЗаСменуСсылка = Документы[ВидДокумента].НайтиПоНомеру(СокрЛП(Структура.Номер), Структура.Дата);
		//ДокОтчетПроизводстваЗаСменуСсылка = НайтиДокументПоКодуРС(Структура);
		Если Структура.Статус = "удаление" Тогда
			Если ЗначениеЗаполнено(ДокОтчетПроизводстваЗаСменуСсылка) Тогда
				ДокОтчетПроизводстваЗаСмену = ДокОтчетПроизводстваЗаСменуСсылка.ПолучитьОбъект();
				ДокОтчетПроизводстваЗаСмену.ПометкаУдаления = Истина;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ДокОтчетПроизводстваЗаСменуСсылка) Тогда
				ДокОтчетПроизводстваЗаСмену = ДокОтчетПроизводстваЗаСменуСсылка.ПолучитьОбъект();
				ДокОтчетПроизводстваЗаСмену.Продукция.Очистить();
			Иначе
				ДокОтчетПроизводстваЗаСмену = Документы[ВидДокумента].СоздатьДокумент();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ДокОтчетПроизводстваЗаСмену, Структура);
			
			ДокОтчетПроизводстваЗаСмену.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		#КонецОбласти

	ИначеЕсли ВидДокумента = "ГТДИмпорт" Тогда
		#Область ГТДИмпорт
		ДокГТДИмпортСсылка = Документы[ВидДокумента].НайтиПоНомеру(СокрЛП(Структура.Номер), Структура.Дата);
		Если ДокГТДИмпортСсылка.Пустая() Тогда
			ДокГТДИмпорт = Документы[ВидДокумента].СоздатьДокумент();
		Иначе
			ДокГТДИмпорт = ДокГТДИмпортСсылка.ПолучитьОбъект();
			ДокГТДИмпорт.Товары.Очистить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ДокГТДИмпорт, Структура);
		#КонецОбласти
		
	КонецЕсли;

КонецПроцедуры	// ОбработатьШапкуДокумента(ВидДокумента, Массив)

Процедура ОбработатьТЧ_Документа(ВидДокумента, ТЧ_Документа, Структура)

	Если ВидДокумента = "РеализацияТоваровУслуг" Тогда
		Если ТЧ_Документа = "Товары" Тогда
			СтрТовары = ДокРеализацияТоваровУслуг[ТЧ_Документа].Добавить();
			ЗаполнитьЗначенияСвойств(СтрТовары, Структура);
		КонецЕсли;
		ДокРеализацияТоваровУслуг.СуммаДокумента = ДокРеализацияТоваровУслуг.Товары.Итог("Сумма");
	
	ИначеЕсли ВидДокумента = "СчетНаОплатуПокупателю" Тогда
		Если ТЧ_Документа = "Товары" Тогда
			СтрТовары = ДокСчетНаОплатуПокупателю[ТЧ_Документа].Добавить();
			ЗаполнитьЗначенияСвойств(СтрТовары, Структура);
		КонецЕсли;

	ИначеЕсли ВидДокумента = "ПоступлениеТоваровУслуг" Тогда
		Если ТЧ_Документа = "Товары" Тогда
			СтрТовары = ДокПоступлениеТоваровУслуг[ТЧ_Документа].Добавить();
			ЗаполнитьЗначенияСвойств(СтрТовары, Структура);
			ДокПоступлениеТоваровУслуг.СуммаДокумента = ДокПоступлениеТоваровУслуг.Товары.Итог("Сумма") + ДокПоступлениеТоваровУслуг.Товары.Итог("СуммаНДС");
			
			СтрПрослеживаемость = ДокПоступлениеТоваровУслуг.СведенияПрослеживаемости.Добавить();
			СтрПрослеживаемость.РНПТ = СтрТовары.НомерГТД;
			СтрПрослеживаемость.Количество = СтрТовары.Количество;
			СтрПрослеживаемость.КоличествоПрослеживаемости = СтрТовары.Количество;
		КонецЕсли;
	
	ИначеЕсли ВидДокумента = "СчетНаОплатуПоставщика" Тогда
		Если ТЧ_Документа = "Товары" Тогда
			СтрТовары = ДокСчетНаОплатуПокупателю[ТЧ_Документа].Добавить();
			ЗаполнитьЗначенияСвойств(СтрТовары, Структура);
		КонецЕсли;

	ИначеЕсли ВидДокумента = "ТребованиеНакладная" Тогда
		Если ТЧ_Документа = "Материалы" Тогда
			СтрТовары = ДокТребованиеНакладная[ТЧ_Документа].Добавить();
			ЗаполнитьЗначенияСвойств(СтрТовары, Структура);
		КонецЕсли;
	
	ИначеЕсли ВидДокумента = "ПеремещениеТоваров" Тогда
		Если ТЧ_Документа = "Товары" Тогда
			СтрТовары = ДокПеремещениеТоваров[ТЧ_Документа].Добавить();
			ЗаполнитьЗначенияСвойств(СтрТовары, Структура);
		КонецЕсли;
	
	ИначеЕсли ВидДокумента = "ВозвратТоваровОтПокупателя" Тогда
		Если ТЧ_Документа = "Товары" Тогда
			СтрТовары = ДокВозвратТоваровОтПокупателя[ТЧ_Документа].Добавить();
			ЗаполнитьЗначенияСвойств(СтрТовары, Структура);
		КонецЕсли;
	
	ИначеЕсли ВидДокумента = "ОтчетПроизводстваЗаСмену" Тогда
		Если ТЧ_Документа = "Продукция" Тогда
			СтрТовары = ДокОтчетПроизводстваЗаСмену[ТЧ_Документа].Добавить();
			ЗаполнитьЗначенияСвойств(СтрТовары, Структура);
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ОбработатьТЧ_Документа

// возвращает ответственное лицо (руководитель/главный бухгалтер) по юрлицу
// НаДату - на какую дату получить
// Организация - ссылка на организацию
// ОтветственноеЛицо - ссылка на ОтветственноеЛицо
Функция ПолучитьОтветственноеЛицоЮрЛица(НаДату, Организация, ОтветственноеЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтветственныеЛицаОрганизацийСрезПоследних.Период КАК Период,
	               |	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	               |	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
	               |	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо
	               |ИЗ
	               |	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	               |			&НаДату,
	               |			СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	               |				И ОтветственноеЛицо = &ОтветственноеЛицо) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
	
	Запрос.УстановитьПараметр("НаДату", НаДату);
	Запрос.УстановитьПараметр("ОтветственноеЛицо", ОтветственноеЛицо);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Организация);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.ФизическоеЛицо;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // ПолучитьОтветственноеЛицоЮрЛица()

// Возвращает курс валюты на определенную дату
// Дата - дата
// Валюта - валюта
Функция ПолучитьКурсВалюты(Дата, Валюта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	КурсыВалютСрезПоследних.Период КАК Период,
					|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
					|	КурсыВалютСрезПоследних.Курс КАК Курс,
					|	КурсыВалютСрезПоследних.Кратность КАК Кратность
					|ИЗ
					|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалютСрезПоследних";
	
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		Структура = Новый Структура();
		Структура.Вставить("КурсВзаиморасчетов",		Выборка.Курс);
		Структура.Вставить("КратностьВзаиморасчетов",	Выборка.Кратность);
		Возврат Структура;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//Функция Проверяет наличие каталога на диске и предлагает создать, если каталога не существует.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//
// Возвращаемое значение:
//   Булево – Истина, если каталог существует или создан, Ложь, если каталога нет.
//
Процедура ПроверитьНаличиеСтруктурыКаталогов(МассивПутей)

	Для каждого ТекКат Из МассивПутей Цикл
		Если ЗначениеЗаполнено(ТекКат) Тогда
			КаталогНаДиске = Новый Файл(ТекКат);
			Если НЕ КаталогНаДиске.Существует() Тогда
				СоздатьКаталог(ТекКат);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#Область ОбработкаНСИ

Функция МассивВСтруктуруСправочникОбработать(ВидСправочника, Массив)

	Структура = Новый Структура();
	х = 0;

	Если ВидСправочника = "ллл_НоменклатураРС" Тогда
		#Область Справочник_ллл_НоменклатураРС
		х = х + 1;	Структура.Вставить("Артикул",					Массив[х] );
		х = х + 1;	Структура.Вставить("Наименование",				СокрЛП( Массив[х]) );
		х = х + 1;	Структура.Вставить("НаименованиеПолное",		СокрЛП( Массив[х]) );
		х = х + 1;	Структура.Вставить("Родитель",					Массив[х] );
		х = х + 1;	Структура.Вставить("ЭтоГруппа",					Массив[х] );
		х = х + 1;	Структура.Вставить("Код",						Структура.Артикул);
		х = х + 1;	Структура.Вставить("ВидНоменклатурыКод",		СокрЛП( Массив[х]) );
		х = х + 1;	Структура.Вставить("ЕдиницаИзмеренияКод",		Массив[х]);
		х = х + 1;	Структура.Вставить("Услуга",					Массив[х]);
		х = х + 1;	Структура.Вставить("СтранаПроисхожденияКод",	Массив[х]);
		х = х + 1;	Структура.Вставить("НомерГТД",					НайтиЭлементСправочника("НомераГТД", "Код", Ложь, , Массив[х], ""));
		х = х + 1;	Структура.Вставить("Штрихкод",					СокрЛП( Массив[х]) );
		х = х + 1;	// Структура.Вставить("ИмпортерИНН",				НайтиЭлементСправочника("Контрагенты", "ИНН", Ложь, , Массив[х], ""));
		х = х + 1;	Структура.Вставить("КодБренд",					СокрЛП( Массив[х]) );
		х = х + 1;
		х = х + 1;	Структура.Вставить("КодТНВЭД",					СокрЛП( Массив[х]) );
		х = х + 1;	Структура.Вставить("ПрослеживаемыйТовар",		?( Массив[х] = "Истина", Истина, Ложь) );
		х = х + 1;	Структура.Вставить("ВесПоСертификатуТовара",	Массив[х]);
		х = х + 1;	Структура.Вставить("ВесКГ",						Массив[х]);
		
		Если НЕ ЗначениеЗаполнено(Структура.Наименование) Тогда
			Структура.Наименование = Структура.НаименованиеПолное;
		КонецЕсли;
		ллл_НоменклатураРС = Справочники.ллл_НоменклатураРС;
		СпрСсылка = ллл_НоменклатураРС.НайтиПоРеквизиту("Артикул", Структура.Артикул);
		Если СпрСсылка = ллл_НоменклатураРС.ПустаяСсылка() Тогда
			СпрЭлемент = ллл_НоменклатураРС.СоздатьЭлемент();
			СобытияЗагрузки = Перечисления.СобытияЗагрузки.Создан;
		Иначе
			СпрЭлемент = СпрСсылка.ПолучитьОбъект();
			СобытияЗагрузки = Перечисления.СобытияЗагрузки.Изменен;
		КонецЕсли;

		Структура.Вставить("Номенклатура",		НайтиЭлементСправочника("Номенклатура", "Артикул", Ложь, , Структура.Артикул, ""));
		Если НЕ Структура.Номенклатура = Неопределено Тогда
			Структура.Вставить("ГУИД",		Структура.Номенклатура.Ссылка.УникальныйИдентификатор());
		КонецЕсли;		
		ЗаполнитьЗначенияСвойств(СпрЭлемент, Структура);
		СпрЭлемент.Записать();
		ЗарегистрироватьИзменение(СпрЭлемент.Ссылка, СобытияЗагрузки, ТекущаяДата(), , "Справочник.ллл_НоменклатураРС");
		
		Если НЕ Структура.Номенклатура = Неопределено Тогда
			СпрНоменклатураЭлемент = Структура.Номенклатура.Ссылка.ПолучитьОбъект();

			СтруктураНоменклатура = Новый Структура();
			СтруктураНоменклатура.Вставить("Артикул",					Структура.Артикул );
			СтруктураНоменклатура.Вставить("Наименование",				"" );
			СтруктураНоменклатура.Вставить("НаименованиеПолное",		"" );
			СтруктураНоменклатура.Вставить("Родитель",					НайтиЭлементСправочника( "Номенклатура", "Код", Ложь, , "В" + Структура.ВидНоменклатурыКод, "") );
			//СтруктураНоменклатура.Вставить("ЭтоГруппа",				Массив[х]);
			СтруктураНоменклатура.Вставить("Код",						Структура.Артикул );
			//СтруктураНоменклатура.Вставить("ВидНоменклатурыКод",		НайтиЭлементСправочника( "ВидыНоменклатуры", "Наименование", Ложь, , "Товар", ""));
			СтруктураНоменклатура.Вставить("ВидНоменклатуры",			НайтиЭлементСправочника( "ВидыНоменклатуры", "Наименование", Ложь, , "Товары", "") );
			СтруктураНоменклатура.Вставить("ЕдиницаИзмеренияКод",		НайтиЭлементСправочника( "КлассификаторЕдиницИзмерения", "Код", Ложь, , Структура.ЕдиницаИзмеренияКод, "") );
			СтруктураНоменклатура.Вставить("Услуга",					Структура.Услуга );
			СтруктураНоменклатура.Вставить("СтранаПроисхожденияКод",	НайтиЭлементСправочника( "СтраныМира", "Код", Ложь, , Структура.СтранаПроисхожденияКод, "") );
			СтруктураНоменклатура.Вставить("НомерГТД",					НайтиЭлементСправочника( "НомераГТД", "Код", Ложь, , Структура.НомерГТД, "") );
			// СтруктураНоменклатура.Вставить("ПроизводительИНН",		НайтиЭлементСправочника("Контрагенты", "ИНН", Ложь, , Массив[х], ""));
			СтруктураНоменклатура.Вставить("ллл_Бренд",					НайтиЭлементСправочника( "ллл_Бренды", "Код", Ложь, , Структура.КодБренд, "") );
			СтруктураНоменклатура.Вставить("КодТНВЭД",					НайтиЭлементСправочника( "КлассификаторТНВЭД", "Код", Ложь, , Структура.КодТНВЭД, "") );
			СтруктураНоменклатура.Вставить("Штрихкод",					Структура.Штрихкод );
			СтруктураНоменклатура.Вставить("ПрослеживаемыйТовар",		Структура.ПрослеживаемыйТовар );
			СтруктураНоменклатура.Вставить("ВесПоСертификатуТовара",	Структура.ВесПоСертификатуТовара );
			СтруктураНоменклатура.Вставить("ВесКГ",						Число(Структура.ВесКГ) );
			
			ЗаполнитьЗначенияСвойств(СпрНоменклатураЭлемент, СтруктураНоменклатура, , "Код,Наименование,НаименованиеПолное");
			ДобавитьДополнительныйРеквизит(СпрНоменклатураЭлемент, "Вес,кг", СтруктураНоменклатура.ВесКГ);
			ДобавитьДополнительныйРеквизит(СпрНоменклатураЭлемент, "Предыдущее наименование (номенклатура)", Структура.Наименование);
			Если ЗначениеЗаполнено(СтруктураНоменклатура.Штрихкод) Тогда
				НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
				НаборЗаписей.Штрихкод = СтруктураНоменклатура.Штрихкод;
				НаборЗаписей.Номенклатура = СпрНоменклатураЭлемент.Ссылка;
				НаборЗаписей.Записать(Истина);
			КонецЕсли;
			СпрНоменклатураЭлемент.Записать();
		КонецЕсли;
		#КонецОбласти

	ИначеЕсли ВидСправочника = "ВидыНоменклатуры" Тогда
		#Область СправочникВидыНоменклатуры
		х = х + 1;	Структура.Вставить("КодРС",				СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("Наименование",		СокрЛП(Массив[х]));
		
		ВидыНоменклатуры = Справочники.ВидыНоменклатуры;
		СпрСсылка = ВидыНоменклатуры.НайтиПоРеквизиту("КодРС", Число(Структура.КодРС));
		Если СпрСсылка = ВидыНоменклатуры.ПустаяСсылка() Тогда
			СпрЭлемент = ВидыНоменклатуры.СоздатьЭлемент();
		Иначе
			СпрЭлемент = СпрСсылка.ПолучитьОбъект();
		КонецЕсли;
		СпрЭлемент.Записать();

		ЗаполнитьЗначенияСвойств(СпрЭлемент, Структура);
		
		НаборЗаписей1 = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьМенеджерЗаписи();
		НаборЗаписей1.ВидНоменклатуры = СпрЭлемент.Ссылка;
		НаборЗаписей1.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		НаборЗаписей1.СчетУчетаПередачи = ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные;
		НаборЗаписей1.СчетУчетаНДСПоПриобретеннымЦенностям = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		НаборЗаписей1.СчетУчетаНДСПоРеализации = ПланыСчетов.Хозрасчетный.Продажи_НДС;
		НаборЗаписей1.СчетУчетаНДСУплаченногоНаТаможне = ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам;
		НаборЗаписей1.Записать(Истина);
		
		НаборЗаписей2 = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьМенеджерЗаписи();
		НаборЗаписей2.ВидНоменклатуры = СпрЭлемент.Ссылка;
		НаборЗаписей2.Склад = Справочники.Склады.НайтиПоНаименованию("Склад отдела Производства");
		НаборЗаписей2.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
		НаборЗаписей2.СчетУчета = ПланыСчетов.Хозрасчетный.ПокупныеПолуфабрикатыИКомплектующие;
		НаборЗаписей2.СчетУчетаПередачи = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
		НаборЗаписей2.Записать(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.ЭтоГруппа
			|	И Номенклатура.Родитель = &Родитель
			|	И Номенклатура.Код = &Код";
		
		Запрос.УстановитьПараметр("Родитель", Справочники.Номенклатура.НайтиПоНаименованию("ТОВАРЫ"));
		//Запрос.УстановитьПараметр("Код", "ВН_" + Структура.КодРС);
		Запрос.УстановитьПараметр("Код", Структура.КодРС);
		
		Результат= Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() > 0 Тогда
			Выборка.Следующий();
			Элемент = Выборка.Ссылка.ПолучитьОбъект();
			Элемент.Код = "ВН_" + СокрЛП(Элемент.Код);
			Элемент.Записать();
		Иначе
			Элемент = Справочники.Номенклатура.СоздатьГруппу();
			Элемент.Родитель = Справочники.Номенклатура.НайтиПоНаименованию("ТОВАРЫ");
			Элемент.Наименование = Структура.Наименование;
			Элемент.Код = "ВН_" + СокрЛП(Структура.КодРС);
			Элемент.Записать();
		КонецЕсли;
		#КонецОбласти
	
	ИначеЕсли ВидСправочника = "ллл_КонтрагентыРС" Тогда
		#Область Справочник_ллл_Контрагенты
		х = х + 1;	Структура.Вставить("КонтрагентИНН",						СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("КонтрагентКПП",						СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("КонтрагентКодРС",					Число(Массив[х]));
		х = х + 1;	Структура.Вставить("КодПоОКПО",							СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("ЮридическоеФизическоеЛицо",			Массив[х]);
		х = х + 1;	Структура.Вставить("СтранаРегистрацииКод",				СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("ОсновнойБанковскийСчетНомерСчета",	СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("НалоговыйНомер",					СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("РегистрационныйНомер",				СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("ГосударственныйОрган",				СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("СвидетельствоСерияНомер",			СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("СвидетельствоДатаВыдачи",			СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("Самозанятый",						Массив[х]);
		
		х = х + 1;	Структура.Вставить("Наименование",						СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("НаименованиеПолное",				СокрЛП(Массив[х]));
		
		х = х + 1;	Структура.Вставить("ЮридическийАдрес",					СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("ФактическийАдрес",					СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("ПочтовыйАдрес",						СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("АдресЭлектроннойПочты",				СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("Телефон",							СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("Комментарий",						СокрЛП(Массив[х]));
		
					Структура.Вставить("ИНН",								Структура.КонтрагентИНН);
					Структура.Вставить("КПП",								Структура.КонтрагентКПП);
					Структура.Вставить("КодРС",								Структура.КонтрагентКодРС);
					
		Если НЕ ЗначениеЗаполнено(Структура.Наименование) И НЕ ЗначениеЗаполнено(Структура.НаименованиеПолное) Тогда
			СтруктураОшибок.Вставить("ТипОшибки", "ОшибкаКонтрагент");
			ЗарегистрироватьИзменение("Контрагент: " + СокрЛП(Структура.КодРС) + ", не заполнено наименование ", Перечисления.СобытияЗагрузки.ДатаЗапрета, ТекущаяДата(), , "Справочник.Контрагенты");
			Возврат Неопределено;
		КонецЕсли;
		
		Если СтрДлина(Структура.ИНН) = 12 Тогда
			Структура.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Иначе
			Структура.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонецЕсли;
					
		Если НЕ ЗначениеЗаполнено(Структура.Наименование) Тогда
			Структура.Наименование = Структура.НаименованиеПолное;
		КонецЕсли;
		
		СпрЭлемент_Ссылка = НайтиЭлементСправочника("ллл_КонтрагентыРС", "КодРС", Ложь, , Структура.КодРС, "");
		Если СпрЭлемент_Ссылка = Неопределено Тогда
			СпрЭлемент = Справочники.ллл_КонтрагентыРС.СоздатьЭлемент();
		Иначе
			СпрЭлемент = СпрЭлемент_Ссылка.ПолучитьОбъект();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств( СпрЭлемент, Структура );
		
		СпрЭлемент.КонтактнаяИнформация.Очистить();
		Если ЗначениеЗаполнено( Структура.ЮридическийАдрес ) Тогда
			Стр = СпрЭлемент.КонтактнаяИнформация.Добавить();
			Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			Стр.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			Стр.Представление = Структура.ЮридическийАдрес;
		КонецЕсли;
			
		Если ЗначениеЗаполнено( Структура.ФактическийАдрес ) Тогда
			Стр = СпрЭлемент.КонтактнаяИнформация.Добавить();
			Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			Стр.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			Стр.Представление = Структура.ФактическийАдрес;
		КонецЕсли;
			
		Если ЗначениеЗаполнено( Структура.ПочтовыйАдрес ) Тогда
			Стр = СпрЭлемент.КонтактнаяИнформация.Добавить();
			Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			Стр.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
			Стр.Представление = Структура.ПочтовыйАдрес;
		КонецЕсли;
			
		Если ЗначениеЗаполнено( Структура.АдресЭлектроннойПочты ) Тогда
			Стр = СпрЭлемент.КонтактнаяИнформация.Добавить();
			Стр.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			Стр.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
			Стр.Представление = Структура.АдресЭлектроннойПочты;
		КонецЕсли;
			
		Если ЗначениеЗаполнено( Структура.Телефон ) Тогда
			Стр = СпрЭлемент.КонтактнаяИнформация.Добавить();
			Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			Стр.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			Стр.Представление = Структура.Телефон;
		КонецЕсли;
		СпрЭлемент.Записать();
		
		//// обновим информацию в справочнике Контрагенты
		//Контрагент_Ссылка = НайтиЭлементСправочника("Контрагенты", "КодРС", Ложь, , Структура.КодРС, "");
		//Если НЕ Контрагент_Ссылка = Неопределено Тогда
		//	Контрагент = Контрагент_Ссылка.ПолучитьОбъект();
		//	ЗаполнитьЗначенияСвойств(Контрагент, Структура, , "Наименование");
		//	Контрагент.Записать();
		//
		//	Контрагент.КонтактнаяИнформация.Очистить();
		//	Если ЗначениеЗаполнено( Структура.ЮридическийАдрес ) Тогда
		//		Стр = Контрагент.КонтактнаяИнформация.Добавить();
		//		Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		//		Стр.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		//		Стр.Представление = Структура.ЮридическийАдрес;
		//	КонецЕсли;
		//		
		//	Если ЗначениеЗаполнено( Структура.ФактическийАдрес ) Тогда
		//		Стр = Контрагент.КонтактнаяИнформация.Добавить();
		//		Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		//		Стр.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		//		Стр.Представление = Структура.ФактическийАдрес;
		//	КонецЕсли;
		//		
		//	Если ЗначениеЗаполнено( Структура.ПочтовыйАдрес ) Тогда
		//		Стр = Контрагент.КонтактнаяИнформация.Добавить();
		//		Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		//		Стр.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
		//		Стр.Представление = Структура.ПочтовыйАдрес;
		//	КонецЕсли;
		//		
		//	Если ЗначениеЗаполнено( Структура.АдресЭлектроннойПочты ) Тогда
		//		Стр = Контрагент.КонтактнаяИнформация.Добавить();
		//		Стр.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		//		Стр.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
		//		Стр.Представление = Структура.АдресЭлектроннойПочты;
		//	КонецЕсли;
		//		
		//	Если ЗначениеЗаполнено( Структура.Телефон ) Тогда
		//		Стр = Контрагент.КонтактнаяИнформация.Добавить();
		//		Стр.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		//		Стр.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		//		Стр.Представление = Структура.Телефон;
		//	КонецЕсли;
		//	Контрагент.Записать();
		//	
		//КонецЕсли;
		
		#КонецОбласти
				
	ИначеЕсли ВидСправочника = "ДоговорыКонтрагенты" Тогда
		#Область СправочникДоговорыКонтрагенты
		х = х + 1;	Структура.Вставить("КодРС",						Число(Массив[х]));
		х = х + 1;	Структура.Вставить("ДоговорДата",				СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("ДоговорНомер",				СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("ОрганизацияИНН",			Массив[х]);
		х = х + 1;	Структура.Вставить("ОрганизацияКПП",			Массив[х]);
		х = х + 1;	Структура.Вставить("ДоговорНаименование",		Массив[х]);
		х = х + 1;	Структура.Вставить("ВалютаВзаиморасчетовКод",	Массив[х]);
		х = х + 1;	Структура.Вставить("КонтрагентИНН",				Массив[х]);
		х = х + 1;	Структура.Вставить("КонтрагентКПП",				Массив[х]);
					Структура.Вставить("КонтрагентКодРС",			Массив[х]);
		х = х + 1;	Структура.Вставить("ВидДоговора",				Массив[х]);
		х = х + 1;	Структура.Вставить("СрокДействия",				Массив[х]);
		х = х + 1;	Структура.Вставить("Валютный",					Массив[х]);
		х = х + 1;	Структура.Вставить("ОплатаВВалюте",				Массив[х]);
		
		Структура.Вставить("Контрагент",				Справочники.Контрагенты.ПустаяСсылка());
		Если ЗначениеЗаполнено(Структура.КонтрагентИНН) Тогда
			Структура.Вставить("Контрагент",				НайтиЭлементСправочника("Контрагенты", "ИНН-КПП", Ложь, , Структура, ""));
		//Иначе
		//	Структура.Вставить("Контрагент",				НайтиЭлементСправочника("Контрагенты", "КодРС", Ложь, , Структура.КонтрагентКодРС, ""));
		КонецЕсли;
		
		//Если НЕ Структура.Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		//	НайденоКонтрагентов = НайденоКонтрагентов + 1;
		//	Если		НЕ НайтиЭлементСправочника("ДоговорыКонтрагентов", "НаименованиеВладельца", Ложь, , Структура.ДоговорНаименование, Структура.Контрагент) = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
		//		НайденоПоНаименованию = НайденоПоНаименованию + 1;
		//	ИначеЕсли	НЕ НайтиЭлементСправочника("ДоговорыКонтрагентов", "НаименованиеВладельца", Ложь, , Структура.ДоговорДата, Структура.Контрагент) = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
		//		НайденоПоДате = НайденоПоДате + 1;
		//	ИначеЕсли	НЕ НайтиЭлементСправочника("ДоговорыКонтрагентов", "НаименованиеВладельца", Ложь, , Структура.ДоговорНомер, Структура.Контрагент) = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
		//		НайденоПоНомеру = НайденоПоНомеру + 1;
		//	КонецЕсли;
		//Иначе
		//	НеНайденоКонтрагентов = НеНайденоКонтрагентов + 1;
		//КонецЕсли;
		
		//Структура.Вставить("ДоговорКонтрагента",		НайтиЭлементСправочника("ДоговорыКонтрагентов", "НаименованиеВладельца", Ложь, , Структура.ДоговорНаименование, Структура.Контрагент));
		//Структура.Вставить("Контрагент",				НайтиЭлементСправочника("Контрагенты", "ИНН-КПП", Ложь, , Структура, ""));
		#КонецОбласти
		
	ИначеЕсли ВидСправочника = "ллл_Бренды" Тогда
		#Область Справочник_ллл_Бренды
		х = х + 1;	Структура.Вставить("Код",						СокрЛП( Массив[х] ) );
		х = х + 1;	Структура.Вставить("Наименование",				СокрЛП( Массив[х] ) );
		
		ллл_Бренд = Справочники.ллл_Бренды;
		СпрСсылка = ллл_Бренд.НайтиПоКоду( Структура.Код );
		Если СпрСсылка = ллл_Бренд.ПустаяСсылка() Тогда
			СпрЭлемент = ллл_Бренд.СоздатьЭлемент();
			СобытияЗагрузки = Перечисления.СобытияЗагрузки.Создан;
		Иначе
			СпрЭлемент = СпрСсылка.ПолучитьОбъект();
			СобытияЗагрузки = Перечисления.СобытияЗагрузки.Изменен;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств( СпрЭлемент, Структура );
		СпрЭлемент.Записать();
		ЗарегистрироватьИзменение( СпрЭлемент.Ссылка, СобытияЗагрузки, ТекущаяДата(), , "Справочник.ллл_Бренды" );
		#КонецОбласти
		
	КонецЕсли;

КонецФункции	// МассивВСтруктуру

Функция МассивВСтруктуруРегистрСведенийОбработать(ВидРегистраСведений, Массив)

	Структура = Новый Структура;
	х = 0;

	Если ВидРегистраСведений = "НоменклатураКонтрагентовБЭД" Тогда
					Структура.Вставить("КодКонтрагентаРС",			Число(Массив[х]));
		х = х + 1;	Структура.Вставить("АртикулНоменклатуры",		СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("КодЕАН",					СокрЛП(Массив[х]));
		х = х + 1;	Структура.Вставить("АртикулКонтрагента",		Массив[х]);
		//
					Структура.Вставить("Контрагент",				НайтиЭлементСправочника("Контрагенты", "КодРС", Ложь, , Структура.КодКонтрагентаРС, ""));
		//
		Стр = НайтиЭлементСправочника("ТорговыеПлощадки", "КодРС", Ложь, , Структура.КодКонтрагентаРС, "");
		Если НЕ Стр = Неопределено И ЗначениеЗаполнено(Стр.Контрагент) Тогда	// ни где не нашли
			Структура.Вставить("Контрагент",			Стр.Контрагент);
			//// с начало ищем по связке ИНН-КПП
			//СпрСсылка = НайтиЭлементСправочника("ллл_КонтрагентыРС", "ИНН-КПП", Ложь, , Структура, "");
			//Если СпрСсылка = Неопределено Тогда
			//	// теперь ищем по коду РС
			//	СпрСсылка = НайтиЭлементСправочника("ллл_КонтрагентыРС", "КодРС", Ложь, , Структура.КодРС, "");
			//Иначе
			//	СпрЭлемент = СпрСсылка.ПолучитьОбъект();
			//КонецЕсли;
			//
			//Если СпрСсылка = Неопределено Тогда	// проверим, здесь он точно должен быть Справочник.КонтрагентыРС
			//	СпрЭлемент = Справочники.ллл_КонтрагентыРС.СоздатьЭлемент();
			//КонецЕсли;
		КонецЕсли;

		Если Структура.Контрагент = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Загрузка из РС", УровеньЖурналаРегистрации.Ошибка, , , "Не найден контрагент с кодом: " + Структура.КодКонтрагентаРС);
			ПеремещатьФайлыПослеУспешнойОбработки = Ложь;
		Иначе						
			Структура.Вставить("Номенклатура",				НайтиЭлементСправочника("Номенклатура", "Артикул", Ложь, , Структура.АртикулНоменклатуры, ""));
			Если Структура.Номенклатура = Неопределено Тогда
				ЗаписьЖурналаРегистрации("Загрузка из РС", УровеньЖурналаРегистрации.Ошибка, , , "Не найдена номенклатура с арткулом: " + Структура.АртикулНоменклатуры);
				ПеремещатьФайлыПослеУспешнойОбработки = Ложь;
			Иначе
				Структура.Вставить("ЕдиницаИзмерения",			Структура.Номенклатура.ЕдиницаИзмерения);
				
				НоваяЗапись = РегистрыСведений.НоменклатураКонтрагентовБЭД.СоздатьМенеджерЗаписи();
				НоваяЗапись.Владелец = Структура.Контрагент;
				НоваяЗапись.Идентификатор = Структура.Номенклатура.Артикул;
				
				НоваяЗапись.Наименование = Структура.Номенклатура.Наименование;	//--------------
				НоваяЗапись.ЕдиницаИзмерения = Структура.ЕдиницаИзмерения;
				НоваяЗапись.ЕдиницаИзмеренияКод = Структура.ЕдиницаИзмерения.Код;
				НоваяЗапись.Артикул = Структура.Номенклатура.Артикул;	//-------------
				НоваяЗапись.Штрихкод = Структура.КодЕАН;	//-------------------
				НоваяЗапись.Номенклатура = Структура.Номенклатура;	//----------------
				НоваяЗапись.ШтрихкодыНоменклатуры = Структура.АртикулКонтрагента;
				НоваяЗапись.Записать(Истина);  
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецФункции	// НайтиЭлементСправочника()

Функция СоздатьКонтрагента(Структура)

	ЭлементКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ЭлементКонтрагент, Структура.Контрагент, , "Владелец,Код");
	ЭлементКонтрагент.КонтактнаяИнформация.Загрузить( Структура.Контрагент.КонтактнаяИнформация.Выгрузить() );
	
	Если ЗначениеЗаполнено(Структура.КонтрагентКодРС) Тогда
		ДобавитьДополнительныйРеквизит(ЭлементКонтрагент, "Код РС (контрагент)", Структура.КонтрагентКодРС);
	КонецЕсли;
	ЭлементКонтрагент.Записать();
	
	Возврат ЭлементКонтрагент.Ссылка;
	
КонецФункции // СоздатьКонтрагента()

Функция СоздатьДоговорКонтрагента(Структура)

	// создадим договор с контрагентом
	ЭлементДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	ЭлементДоговор.Владелец = Структура.Контрагент.Ссылка;
	ЭлементДоговор.Организация = Организация;
	ЭлементДоговор.ВидДоговора = Структура.ВидДоговораСКонтрагентом;
	ЭлементДоговор.Наименование = Структура.НаименованиеДоговора;
	ЭлементДоговор.ВалютаВзаиморасчетов = Структура.ВалютаДокумента;
	ЭлементДоговор.СпособВыставленияДокументов = Перечисления.СпособыВыставленияДокументов.Автоматически;
	ЭлементДоговор.СпособЗаполненияСтавкиНДС = Перечисления.СпособыВыставленияДокументов.Автоматически;
	Если Структура.Свойство("РасчетыВУсловныхЕдиницах") Тогда
		ЭлементДоговор.РасчетыВУсловныхЕдиницах = Структура.РасчетыВУсловныхЕдиницах;
	КонецЕсли;
	Если Структура.Свойство("ДатаДоговора") И ЗначениеЗаполнено(Структура.ДатаДоговора) Тогда
		ЭлементДоговор.Дата = Структура.ДатаДоговора;
	КонецЕсли;
	Если Структура.Свойство("НомерДоговора") И ЗначениеЗаполнено(Структура.НомерДоговора) Тогда
		ЭлементДоговор.Номер = Структура.НомерДоговора;
	КонецЕсли;
	ЭлементДоговор.Записать();
	
	Возврат ЭлементДоговор.Ссылка;

КонецФункции // СоздатьКонтрагента()

Процедура ОбработатьСправочник(ВидСправочника, ПоискПо, ИскомоеЗначение, Структура)
		
	Если ВидСправочника = "Номенклатура" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
						|	" + ВидСправочника + ".Ссылка КАК Ссылка
						|ИЗ
						|	Справочник." + ВидСправочника + " КАК " + ВидСправочника + "
						|ГДЕ
						|	" + ВидСправочника + "." + ПоискПо + " = &Артикул";
		
		Запрос.УстановитьПараметр("Артикул", ИскомоеЗначение);
		Результат = Запрос.Выполнить();

		Выборка = Результат.Выбрать();
		Если Выборка.Количество() > 0 Тогда
			Выборка.Следующий();
			Элемент = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			Элемент = Справочники[ВидСправочника].СоздатьЭлемент();
		КонецЕсли;
		Элемент = Справочники.Номенклатура.СоздатьЭлемент();
		Элемент.Владелец = Справочники.Номенклатура.НайтиПоНаименованию("ТОВАРЫ");
		ЗаполнитьЗначенияСвойств(Элемент, Структура);
		Элемент.ОбменДанными.Загрузка = Истина;
		Элемент.Записать();
		
	ИначеЕсли ВидСправочника = "Контрагенты" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
						|	" + ВидСправочника + ".Ссылка КАК Ссылка
						|ИЗ
						|	Справочник." + ВидСправочника + " КАК " + ВидСправочника + "
						|ГДЕ
						|	" + ВидСправочника + "." + ПоискПо + " = &ИНН";
		
		Запрос.УстановитьПараметр("ИНН", ИскомоеЗначение);
		Результат = Запрос.Выполнить();

		Выборка = Результат.Выбрать();
		Если Выборка.Количество() > 0 Тогда
			Выборка.Следующий();
			Элемент = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			Элемент = Справочники[ВидСправочника].СоздатьЭлемент();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Элемент, Структура);
		Элемент.ОбменДанными.Загрузка = Истина;
		Элемент.Записать();
		
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьДополнительныйРеквизит(СпрЭлемент, НаименованиеРеквизита, ЗначениеДопРеквизита)
	
	// Получаем ссылку на доп реквизит
	ДопРеквизитПроверено = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(НаименованиеРеквизита, Истина);
	ЕстьСтроки = СпрЭлемент.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", ДопРеквизитПроверено));
	Если ЕстьСтроки.Количество() = 0 Тогда
	     СтрокаТЧ = СпрЭлемент.ДополнительныеРеквизиты.Добавить();
	     СтрокаТЧ.Свойство = ДопРеквизитПроверено;
	Иначе
	     СтрокаТЧ = ЕстьСтроки[0];
	КонецЕсли;
	СтрокаТЧ.Значение = ЗначениеДопРеквизита;
	
КонецПроцедуры

Процедура ДобавитьДополнительноеСвойство(Элемент, НаименованиеСвойства, ЗначениеСвойства)
	
	СвойствоСсылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(НаименованиеСвойства);
	
	НоваяЗапись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	НоваяЗапись.Объект   = Элемент;
	НоваяЗапись.Свойство = СвойствоСсылка; 
	НоваяЗапись.Значение = ЗначениеСвойства;
	НоваяЗапись.Записать();  

КонецПроцедуры

#КонецОбласти

Функция СтрокаВДату(СтрокаДатой)
	Возврат КонецДня(Дата(Сред(СтрокаДатой, 7, 4) + Сред(СтрокаДатой, 4, 2) + Сред(СтрокаДатой, 1, 2)));
КонецФункции

Процедура НоменклатураИсправитьНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Код КАК Код,
		|	Номенклатура.Артикул КАК Артикул
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	НЕ Номенклатура.Код = Номенклатура.Артикул
		|	И НЕ Номенклатура.Код ПОДОБНО ""%БП%""
		|	И НЕ Номенклатура.Код ПОДОБНО ""%00-00%""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Артикул = Объект.Код;
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереименоватьОшибочныеФайлыНаСервереМодульОбъекта() Экспорт

	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("СтароеНаименование");
	ТЗ.Колонки.Добавить("НовоеНаименование");
	
	Стр = ТЗ.Добавить();    Стр.СтароеНаименование = "ОшибкаТорговаяПлощадкаРегистрСведений_37753_";	Стр.НовоеНаименование = "";
	Стр = ТЗ.Добавить();    Стр.СтароеНаименование = "ОшибкаВСтруктуре_";								Стр.НовоеНаименование = "";
	Стр = ТЗ.Добавить();    Стр.СтароеНаименование = "ОшибкаПоДате_";									Стр.НовоеНаименование = "";
	Стр = ТЗ.Добавить();    Стр.СтароеНаименование = "ОшибкаМихаил_";									Стр.НовоеНаименование = "ОшибкаВСтруктуре_";
	Стр = ТЗ.Добавить();    Стр.СтароеНаименование = "Ошибка_";											Стр.НовоеНаименование = "";
	Стр = ТЗ.Добавить();    Стр.СтароеНаименование = "ОшибкаПеремещениеТоваров_";						Стр.НовоеНаименование = "";
	
	Для каждого СтрТЗ Из ТЗ Цикл
		МассивФайлов = НайтиФайлы(Каталог, СтрТЗ.СтароеНаименование + "*.txt",);
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ПереместитьФайл(ИмяФайла.ПолноеИмя, Каталог + "\" + СтрЗаменить(ИмяФайла.Имя, СтрТЗ.СтароеНаименование, СтрТЗ.НовоеНаименование));
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Функция НайтиДокумент(ВидДокумента, Структура)

	Если Структура.Свойство("Номер") Тогда
		ДокСсылка = Документы[ВидДокумента].НайтиПоНомеру(СокрЛП(Структура.Номер), Структура.Дата);
	ИначеЕсли Структура.Свойство("ллл_Номер") Тогда
		ДокСсылка = Документы[ВидДокумента].НайтиПоНомеру(СокрЛП(Структура.ллл_Номер), Структура.Дата);
	Иначе
		ДокСсылка = Документы[ВидДокумента].НайтиПоРеквизиту("НомерВходящегоДокумента", СокрЛП(Структура.НомерВходящегоДокумента));
	КонецЕсли;
	
	Если ДокСсылка.Пустая() Тогда
		Возврат Документы[ВидДокумента].ПустаяСсылка();
	Иначе
		Возврат ДокСсылка;
	КонецЕсли;

КонецФункции // НайтиДокумент()

Функция ЗарегистрироватьИзменение(_Объект, Событие, ТекущаяДата, ДатаОбъекта, Метаданные)
	
	НоваяЗапись = РегистрыСведений.МониторИнтеграцииСРусскимСтилем.СоздатьМенеджерЗаписи();
	НоваяЗапись.Период = ТекущаяДата;
	НоваяЗапись._Объект = _Объект;
	НоваяЗапись.Событие = Событие;
	НоваяЗапись.ДатаОбъекта = ДатаОбъекта;
	НоваяЗапись.Метаданные = Метаданные;
	НоваяЗапись.Записать(Истина);
	
КонецФункции

Функция ЗарегистрироватьОшибку( Стр )
	
	НоваяЗапись = РегистрыСведений.ллл_ОшибкиОбменаСРС.СоздатьМенеджерЗаписи();
	НоваяЗапись.Период = Стр.ТекущаяДата;
	НоваяЗапись.Объект = Стр.ТекОб;
	НоваяЗапись.ИмяФайла = Стр.ИмяФайла;
	НоваяЗапись.Комментарий = Стр.ОписаниеОшибки;
	НоваяЗапись.IDдокумента = Стр.ID_документа;
	НоваяЗапись.НомерДокумента = Стр.Номер;
	НоваяЗапись.Записать( Истина );
	
КонецФункции

Функция НайтиДокументПоКодуРС(Структура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеСведения.Объект КАК Ссылка,
		|	ДополнительныеСведения.Свойство КАК Свойство,
		|	ДополнительныеСведения.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект ССЫЛКА Документ." + Структура.ВидДокумента + "
		|	И ДополнительныеСведения.Свойство.Имя = ""КодРСДокументы""
		|	И ДополнительныеСведения.Значение = &Значение";
	
	Запрос.УстановитьПараметр("Значение", Структура.КодРСДокумент);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция НайтиДобавитьНомерОтправления( НомерОтправления )
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	л3_НомераОтправлений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.л3_НомераОтправлений КАК л3_НомераОтправлений
		|ГДЕ
		|	л3_НомераОтправлений.Код = &НомерОтправления";
	
	Запрос.УстановитьПараметр( "НомерОтправления", НомерОтправления );
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;
		КонецЦикла;
	Иначе
		Элем = Справочники.л3_НомераОтправлений.СоздатьЭлемент();
		Элем.Код = НомерОтправления;
		Элем.Наименование = НомерОтправления;
		Элем.Записать();
		
		НомерОтправленияСсылка = Элем.Ссылка;
		Возврат НомерОтправленияСсылка;
	КонецЕсли;

КонецФункции

Процедура ЗаписатьДокумент(Док, Проводить = Ложь)
	
	Если Док.ПометкаУдаления Тогда
		Если Док.Проведен Тогда
			Попытка
				Док.ПометкаУдаления = Ложь;
				Док.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Док.Записать();
				
				Док.ПометкаУдаления = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
		Док.Записать();
	Иначе
		РежимЗаписи = ?(Проводить, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		Попытка
			Док.ПометкаУдаления = Ложь;
			Док.Записать(РежимЗаписи);
		Исключение
			Док.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПометитьНаУдалениеСФ(ДокОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК Т
		|ГДЕ
		|	Т.ДокументОснование = &ДокументОснование
		|	И НЕ Т.Ссылка.ПометкаУдаления
		|	И Т.Ссылка.ВидСчетаФактуры В (ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный), ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию))";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекОб = Выборка.Ссылка.ПолучитьОбъект();
		Если ТекОб.Проведен Тогда
			ТекОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		ТекОб.ПометкаУдаления = Истина;
		ТекОб.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ДатаЗапретаРедактированияТекПользователя() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДатыЗапретаИзменения.ДатаЗапрета КАК ДатаЗапрета,
		|	ДатыЗапретаИзменения.Пользователь КАК Пользователь,
		|	ВЫБОР
		|		КОГДА ДатыЗапретаИзменения.Пользователь = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Приоритет
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрСведений.ДатыЗапретаИзменения КАК ДатыЗапретаИзменения
		|ГДЕ
		|	(&Пользователь = ДатыЗапретаИзменения.Пользователь
		|			ИЛИ ДатыЗапретаИзменения.Пользователь = ЗНАЧЕНИЕ(Перечисление.ВидыНазначенияДатЗапрета.ДляВсехПользователей))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ.ДатаЗапрета, ВЗ_Максимум.ДатаЗапретаМаксимум) КАК ДатаЗапрета,
		|	ВТ.Пользователь КАК Пользователь
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(ВТ.ДатаЗапрета) КАК ДатаЗапретаМаксимум
		|	ИЗ
		|		РегистрСведений.ДатыЗапретаИзменения КАК ВТ) КАК ВЗ_Максимум
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МИНИМУМ(ВТ.Приоритет) КАК Приоритет
		|		ИЗ
		|			ВТ КАК ВТ) КАК ВложенныйЗапрос
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
		|		ПО (ВложенныйЗапрос.Приоритет = ВТ.Приоритет)";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат КонецДня(Выборка.ДатаЗапрета) + 1;
	КонецЕсли;
	
КонецФункции

Функция ЗагружаемыеОбъекты() Экспорт
	
	СЗ = Новый СписокЗначений;
	//СЗ.Добавить("СправочникВидыНоменклатуры",     "ВидыНоменклатуры",                                   Истина);
	//СЗ.Добавить("СправочникСклады",               "Склады",                                             Истина);
	СЗ.Добавить("СправочникНоменклатураРС",			"Номенклатура",											Истина);
	СЗ.Добавить("СправочникБренд",					"ллл_Бренды",											Истина);
	СЗ.Добавить("СправочникКонтрагенты",			"Контрагенты",                                    	    Истина);
	//СЗ.Добавить("СправочникДоговорыКонтрагентов",	"Договоры контрагентов",                              Истина);
	СЗ.Добавить("РС_НоменклатураКонтрагентовБЭД",	"Регистр сведений ""Номенклатура контрагентов БЭД""",	Истина);
	//СЗ.Добавить("ПеремещениеТоваров",				"Перемещение товаров",                                Истина);
	СЗ.Добавить("ГТДИмпорт",						"ГТД импорт",											Истина);
	
	СЗ.Добавить("ТребованиеНакладная",				"Требование накладная",									Истина);
	СЗ.Добавить("ОтчетПроизводстваЗаСмену",			"Отчет производства за смену",							Истина);
	
	СЗ.Добавить("СчетНаОплатуПоставщика",			"Счет на оплату поставщику",							Истина);
	СЗ.Добавить("СчетПродажа",						"Счет на оплату покупателю",							Истина);
	
	СЗ.Добавить("Р_Т_У",							"Реализация товаров и услуг (Р_Т_У)",					Истина);
	СЗ.Добавить("Возврат",							"Возврат товаров от покупателя",						Истина);
	
	СЗ.Добавить("РТУ",								"Реализация товаров и услуг",							Истина);
	СЗ.Добавить("ПТУ",								"Поступление товаров и услуг",							Истина);
	СЗ.Добавить("П_Т_У",							"Поступление товаров и услуг (П_Т_У)",					Истина);
	
	Возврат СЗ;
	
КонецФункции

//Функция ЗагружаемыеОбъектыТЗ() Экспорт
//	
//	ТЗ = Новый ТаблицаЗначений();
//	ТЗ.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
//	ТЗ.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
//	ТЗ.Колонки.Добавить("Загружать", Новый ОписаниеТипов("Булево"));
//	ТЗ.Колонки.Добавить("Перемещеть", Новый ОписаниеТипов("Булево"));
//	ТЗ.Колонки.Добавить("Кодировка", Новый ОписаниеТипов("Строка"));
//	
//	Стр = ТЗ.Добавить(); Стр.Наименование = "СправочникНоменклатураРС";       Стр.Представление = "Номенклатура";                                       Стр.Загружать = Истина; Стр.Перемещать = Истина; Стр.Кодировка = "UTF8";
//	Стр = ТЗ.Добавить(); Стр.Наименование = "СправочникКонтрагенты";          Стр.Представление = "Контрагенты";                                        Стр.Загружать = Истина; Стр.Перемещать = Истина; Стр.Кодировка = "UTF8";
//	Стр = ТЗ.Добавить(); Стр.Наименование = "ДоговорыКонтрагентов";           Стр.Представление = "Договоры контрагентов";                              Стр.Загружать = Истина; Стр.Перемещать = Истина; Стр.Кодировка = "UTF8";
//	Стр = ТЗ.Добавить(); Стр.Наименование = "РС_НоменклатураКонтрагентовБЭД"; Стр.Представление = "Регистр сведений ""Номенклатура контрагентов БЭД"""; Стр.Загружать = Истина; Стр.Перемещать = Истина; Стр.Кодировка = "UTF8";
//	
//	// документы
//	Стр = ТЗ.Добавить(); Стр.Наименование = "ПТУ";                            Стр.Представление = "Поступление товаров и услуг";                        Стр.Загружать = Истина; Стр.Перемещать = Истина; Стр.Кодировка = "UTF8";
//	Стр = ТЗ.Добавить(); Стр.Наименование = "П_Т_У";                          Стр.Представление = "Поступление товаров и услуг (П_Т_У)";                Стр.Загружать = Истина; Стр.Перемещать = Истина; Стр.Кодировка = "UTF8";
//	Стр = ТЗ.Добавить(); Стр.Наименование = "СчетНаОплатуПоставщика";         Стр.Представление = "Счет на оплату поставщику";                          Стр.Загружать = Истина; Стр.Перемещать = Истина; Стр.Кодировка = "UTF8";
//	Стр = ТЗ.Добавить(); Стр.Наименование = "СчетПродажа";                    Стр.Представление = "Счет на оплату покупателю";                          Стр.Загружать = Истина; Стр.Перемещать = Истина; Стр.Кодировка = "UTF8";
//	Стр = ТЗ.Добавить(); Стр.Наименование = "РТУ";                            Стр.Представление = "Реализация товаров и услуг";                         Стр.Загружать = Истина; Стр.Перемещать = Истина; Стр.Кодировка = "UTF8";
//	Стр = ТЗ.Добавить(); Стр.Наименование = "Р_Т_У";                          Стр.Представление = "Реализация товаров и услуг (Р_Т_У)";                 Стр.Загружать = Истина; Стр.Перемещать = Истина; Стр.Кодировка = "UTF8";
//	Стр = ТЗ.Добавить(); Стр.Наименование = "ТребованиеНакладная";            Стр.Представление = "Требование накладная";                               Стр.Загружать = Истина; Стр.Перемещать = Истина; Стр.Кодировка = "UTF8";
//	Стр = ТЗ.Добавить(); Стр.Наименование = "ПеремещениеТоваров";             Стр.Представление = "Перемещение товаров";                                Стр.Загружать = Истина; Стр.Перемещать = Истина; Стр.Кодировка = "UTF8";
//	Стр = ТЗ.Добавить(); Стр.Наименование = "ОтчетПроизводстваЗаСмену";       Стр.Представление = "Отчет производства за смену";                        Стр.Загружать = Истина; Стр.Перемещать = Истина; Стр.Кодировка = "UTF8";
//	Стр = ТЗ.Добавить(); Стр.Наименование = "ГТДИмпорт";                      Стр.Представление = "ГТД импорт";                                         Стр.Загружать = Истина; Стр.Перемещать = Истина; Стр.Кодировка = "Windows1251";
//	Стр = ТЗ.Добавить(); Стр.Наименование = "Возврат";                        Стр.Представление = "Возврат товаров от покупателя";                      Стр.Загружать = Истина; Стр.Перемещать = Истина; Стр.Кодировка = "UTF8";
//	
//	Возврат ТЗ;
//	
//КонецФункции

Функция ПараметрыПоУмолчанию() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Каталог",                   Каталог);
	Параметры.Вставить("КаталогАрхива",             КаталогАрхива);
	Параметры.Вставить("СписокЗагружаемыхОбъектов", ЗагружаемыеОбъекты());
	//Параметры.Вставить("ТаблицаЗагружаемыхОбъектов",ЗагружаемыеОбъектыТЗ());
	
	Возврат Параметры;
	
КонецФункции

#Область Инициализация

ДатаПоследнегоИзменения = '2022.08.03';
ВалютаДоллар	=	НайтиЭлементСправочника("Валюты", "Код", Ложь, , "840", "");
ВалютаЕвро		=	НайтиЭлементСправочника("Валюты", "Код", Ложь, , "978", "");
ВалютаРубль		=	НайтиЭлементСправочника("Валюты", "Код", Ложь, , "643", "");
ЕдиницаИзмеренияШт		= НайтиЭлементСправочника("КлассификаторЕдиницИзмерения", "Код", Ложь, , "796", "");
ВидНоменклатурыТовар	= НайтиЭлементСправочника("ВидыНоменклатуры", "Наименование", Ложь, , "Товары", "");
Организация			= Справочники.Организации.НайтиПоРеквизиту("ИНН","7724338125");
Руководитель		= ПолучитьОтветственноеЛицоЮрЛица(ТекущаяДатаСеанса(), Организация, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
ГлавныйБухгалтер	= ПолучитьОтветственноеЛицоЮрЛица(ТекущаяДатаСеанса(), Организация, Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
ПеремещатьФайлыПослеУспешнойОбработки = Истина;
НоменклатурнаяГруппаТорговойПлощадки = НайтиЭлементСправочника("НоменклатурныеГруппы", "Наименование", Ложь, , "Торговля розничная, осуществляемая непосредственно при помощи сети Интернет", "");
Ответственный = НайтиЭлементСправочника( "Пользователи", "Наименование", Ложь, , "_Робот_ИнтеграцияРС", "" );
//Ответственный = Пользователи.АвторизованныйПользователь();
ДатаЗапретаРедактированияДляПользователя = ДатаЗапретаРедактированияТекПользователя();

Если ИмяКомпьютера() = "1c-test" Тогда
	Каталог = "C:\DEV\Павлов Владимир\Buh\1C_RS\2022";
	КаталогАрхива = Каталог + "\Архив";
	ПолноеИмяФайлаЛога = Каталог + "\Log.txt";
ИначеЕсли ИмяКомпьютера() = "1C01" Тогда
	Каталог = "\\corp.3l.ru\dfs\ФЭД\Бухгалтерия\!Обмен_1С_RS\1C_RS";
	//Каталог = "\\corp.3l.ru\dfs\ФЭД\Бухгалтерия\!Обмен_1С_RS\1C_RS_UNLOAD_DEV";
	КаталогАрхива = Каталог + "\Архив";
	ПолноеИмяФайлаЛога = Каталог + "\Log.txt";
ИначеЕсли ИмяКомпьютера() = "Zalman" Тогда
	Каталог = "D:\3L\Обмен";
	КаталогАрхива = Каталог + "\Архив";
	ПолноеИмяФайлаЛога = Каталог + "\Log.txt";
КонецЕсли;
//Сообщить("" + Каталог + "" + ИмяКомпьютера());

ТЗ_ГТД = Новый ТаблицаЗначений();
ТЗ_ГТД.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка"));
ТЗ_ГТД.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
ТЗ_ГТД.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
ТЗ_ГТД.Колонки.Добавить("Модель", Новый ОписаниеТипов("Строка"));
ТЗ_ГТД.Колонки.Добавить("РусскоеНаименование", Новый ОписаниеТипов("Строка"));
ТЗ_ГТД.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
ТЗ_ГТД.Колонки.Добавить("НомерГТД", Новый ОписаниеТипов("Строка"));
ТЗ_ГТД.Колонки.Добавить("СтранаПроисхожденияНаименование", Новый ОписаниеТипов("Строка"));
ТЗ_ГТД.Колонки.Добавить("Бренд", Новый ОписаниеТипов("Строка"));
ТЗ_ГТД.Колонки.Добавить("Производитель", Новый ОписаниеТипов("Строка"));
ТЗ_ГТД.Колонки.Добавить("Инвойс", Новый ОписаниеТипов("Строка"));
ТЗ_ГТД.Колонки.Добавить("КоличествоПоИнвойсу", Новый ОписаниеТипов("Число"));
ТЗ_ГТД.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("Строка"));

ТЗ_ГТД.Колонки.Добавить("Номенклатура",				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ТЗ_ГТД.Колонки.Добавить("ФактурнаяСтоимость",		Новый ОписаниеТипов("Число"));
ТЗ_ГТД.Колонки.Добавить("СуммаПошлины",				Новый ОписаниеТипов("Число"));
ТЗ_ГТД.Колонки.Добавить("СуммаНДС",					Новый ОписаниеТипов("Число"));
ТЗ_ГТД.Колонки.Добавить("ДокументПартии",			Новый ОписаниеТипов("ДокументСсылка.ПоступлениеТоваровУслуг"));
ТЗ_ГТД.Колонки.Добавить("НомерРаздела",				Новый ОписаниеТипов("Число"));
ТЗ_ГТД.Колонки.Добавить("СчетУчета",				ПланыСчетов.ТипВсеСсылки());
ТЗ_ГТД.Колонки.Добавить("СчетУчетаНДС",				ПланыСчетов.ТипВсеСсылки());
ТЗ_ГТД.Колонки.Добавить("СчетУчетаНУ",				ПланыСчетов.ТипВсеСсылки());
ТЗ_ГТД.Колонки.Добавить("СтранаПроисхождения",		Новый ОписаниеТипов("СправочникСсылка.СтраныМира"));

ТЗ_Поступление = Новый ТаблицаЗначений();
ТЗ_Поступление.Колонки.Добавить("Артикул",					Новый ОписаниеТипов("Строка"));
ТЗ_Поступление.Колонки.Добавить("Номенклатура",				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ТЗ_Поступление.Колонки.Добавить("Количество",				Новый ОписаниеТипов("Число"));
ТЗ_Поступление.Колонки.Добавить("Цена",						Новый ОписаниеТипов("Число"));
ТЗ_Поступление.Колонки.Добавить("Сумма",					Новый ОписаниеТипов("Число"));
ТЗ_Поступление.Колонки.Добавить("СтавкаНДС",				Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
ТЗ_Поступление.Колонки.Добавить("СуммаНДС",					Новый ОписаниеТипов("Число"));
ТЗ_Поступление.Колонки.Добавить("Всего",					Новый ОписаниеТипов("Число"));
ТЗ_Поступление.Колонки.Добавить("НомерГТД",					Новый ОписаниеТипов("СправочникСсылка.НомераГТД"));
ТЗ_Поступление.Колонки.Добавить("СчетУчета",				ПланыСчетов.ТипВсеСсылки());
ТЗ_Поступление.Колонки.Добавить("СчетУчетаНДС",				ПланыСчетов.ТипВсеСсылки());
ТЗ_Поступление.Колонки.Добавить("СтранаПроисхождения",		Новый ОписаниеТипов("СправочникСсылка.СтраныМира"));

глМассивЗагружаемыхДокументов = ЗагружаемыеОбъекты().ВыгрузитьЗначения();

глПериодОбработки = Неопределено;
#КонецОбласти